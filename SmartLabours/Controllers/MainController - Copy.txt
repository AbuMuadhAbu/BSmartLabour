//using SmartLabours.Models;
//using System;
//using System.Collections.Generic;
//using System.Data;
//using System.Data.Common;
//using System.Data.Entity.Validation;
//using System.IO;
//using System.Linq;
//using System.Net;
//using System.Text;
//using System.Web.Mvc;
//using System.Web;
//using System.Web.Security;
//using System.Data.SqlClient;
//using System.Configuration;
//using Microsoft.Practices.EnterpriseLibrary.Data;
//using System.Diagnostics;
//using System.Web.Routing;
//using System.Threading;
//using JdSoft.Apple.Apns.Notifications;
//using System.Net.Mail;
//using System.Web.Services;
//using System.Security.Cryptography.X509Certificates;
//using System.Net.Security;
//using System.Data.Common.CommandTrees.ExpressionBuilder;
//using System.Text.RegularExpressions;
//using System.Data.OleDb;
//using SmartLabours.Common;
//using System.Drawing;
using Microsoft.Reporting.WebForms;
using SmartLabours.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.Entity.Validation;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using System.Data.SqlClient;
using System.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Diagnostics;
using System.Web.Routing;
using System.Threading;
using JdSoft.Apple.Apns.Notifications;
using System.Net.Mail;
using System.Web.Services;
using System.Security.Cryptography.X509Certificates;
using System.Net.Security;
using System.Data.Common.CommandTrees.ExpressionBuilder;
using System.Text.RegularExpressions;
using System.Data.OleDb;
using SmartLabours.Common;
using System.Drawing;
using System.Web.UI.WebControls;
using System.Web.UI;
using System.Globalization;
using System.Reflection;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html.simpleparser;
using System.Data.Objects.SqlClient;

namespace SmartLabours.Controllers
{

    #region  AboutUsController
    public class AboutUsController : Controller
    {
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        // Methods
        public ActionResult AboutUs()
        {
            base.TempData["currentgetid"] = "idAbout";
            List<TBL_ABOUTUS_SMT> list = new List<TBL_ABOUTUS_SMT>();
            list = (from n in this.SmtDbEntites.Aboutus
                    where n.STATUS
                    orderby n.CREATEDDATE
                    select n).Take<TBL_ABOUTUS_SMT>(1).ToList<TBL_ABOUTUS_SMT>();
            TBL_ABOUTUS_SMT model = new TBL_ABOUTUS_SMT();
            foreach (TBL_ABOUTUS_SMT tbl_aboutus_smt2 in list)
            {
                model.SHORTDESC = tbl_aboutus_smt2.SHORTDESC;
                model.FULLDESCRIPTION = tbl_aboutus_smt2.FULLDESCRIPTION;
            }
            ((dynamic)base.ViewBag).AboutusShortDescription = model.SHORTDESC;
            return base.View(model);
        }
    }
    #endregion

    #region AccountController
    public class AccountController : Controller
    {
        // Methods
        [HttpGet]
        public JsonResult GetUserDetail(string LabourID)
        {
            SmartLabourEntities entities = new SmartLabourEntities();
            return base.Json(entities.Labours.SingleOrDefault<Labour>(n => n.LabourID == LabourID), JsonRequestBehavior.AllowGet);
        }

        public string Register(string LabourId, string Name, string EmailID, string PhoneNumber, string DOB, string Sex, string Address1, string Address2, string Address3, string Pincode)
        {
            try
            {
                SmartLabourEntities entities = new SmartLabourEntities();
                Labour entity = new Labour
                {
                    Name = Name,
                    EmailID = EmailID,
                    PhoneNumber = PhoneNumber,
                    DOB = Convert.ToDateTime(DOB),
                    Sex = Sex,
                    Address1 = Address1,
                    Address2 = Address2,
                    Address3 = Address3,
                    Pincode = Pincode,
                    CREATEDDATE = new DateTime?(DateTime.Now),
                    LabourID = LabourId
                };
                entities.Labours.Add(entity);
                entities.SaveChanges();
                return "{  result: \"SUCCESS\"}";
            }
            catch (Exception exception)
            {
                return ("{  result: \"ERROR\", error_msg:\"" + exception.Message + "\"}");
            }
        }
    }

    #endregion

    #region AdminAccountController
    [AuthorizeUser]
    public class AdminAccountController : BaseController
    {
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        // Methods
        [HttpGet]
        public ActionResult Changepassword()
        {
            return base.View();
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpPost]
        public ActionResult Changepassword(ChangePasswordModel ChangePWD)
        {
            try
            {
                if (base.ModelState.IsValid)
                {
                    int iuserid = Convert.ToInt32(base.Session["USERID"].ToString());
                    TBL_ADMINLOGIN_SMT model = this.SmtDbEntites.AdminLogin.SingleOrDefault<TBL_ADMINLOGIN_SMT>(n => n.USERID == iuserid);      
            
                        if (model.PASSWORD == ChangePWD.OldPassword)
                        {
                            model.PASSWORD = ChangePWD.NewPassword;
                            model.Orgname = "Dummy";
                            //if (base.TryUpdateModel<TBL_ADMINLOGIN_SMT>(model))
                            // {
                            this.SmtDbEntites.SaveChanges();
                            string str = new Mailing().SendMailforchangepassword(model.USEREMAIL, "You have recently changed your password", model.USERNAME, model.PASSWORD);
                            base.TempData["messagealert"] = "Password Changed successfully";
                            //}
                        }
                        else
                        {
                            base.ModelState.AddModelError("OldPassword", "The current password is incorrect");
                        }                
                }
            }
            catch (DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                //string str = ex.ToString() + "|||";
               
            }
            return base.View(ChangePWD);

        }
    }
    #endregion

    #region AdminController
    public class AdminController : Controller
    {
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        // Methods
        [HttpGet]
        public ActionResult forgotpassword()
        {
            return base.View();
        }

        public ActionResult forgotpasswordcheck(string emailid)
        {
            string password = string.Empty;
            string username = string.Empty;
            try
            {
                Labour labour = new Labour();
                if (((emailid != null) && (emailid != "")) && (emailid != "EmailID"))
                {
                    if ((from n in this.SmtDbEntites.AdminLogin
                         where n.USEREMAIL.ToLower().Trim() == emailid.ToLower().Trim()
                         select n).ToList<TBL_ADMINLOGIN_SMT>().Count <= 0)
                    {
                        return base.Json("2", JsonRequestBehavior.AllowGet);
                    }
                    TBL_ADMINLOGIN_SMT tbl_adminlogin_smt = this.SmtDbEntites.AdminLogin.SingleOrDefault<TBL_ADMINLOGIN_SMT>(n => n.USEREMAIL == emailid);
                    if ((((tbl_adminlogin_smt.PASSWORD != null) && (tbl_adminlogin_smt.PASSWORD != "")) && (tbl_adminlogin_smt.USERNAME != null)) && (tbl_adminlogin_smt.USERNAME != ""))
                    {
                        password = tbl_adminlogin_smt.PASSWORD.ToString();
                        username = tbl_adminlogin_smt.USERNAME.ToString();
                        CommonClass objCommon = new CommonClass();
                       // objMail.SendingMail(Email, Subject, Name, content, ContentTitle, Message);
                        objCommon.SendingMail(emailid, "Smart Labour - Forget Password", username, password, "Your Password :", "");
                      
                        return base.Json("1", JsonRequestBehavior.AllowGet);
                    }
                    return base.Json("0", JsonRequestBehavior.AllowGet);
                }
                if (((emailid == null) || (emailid == "")) || (emailid == "EmailID"))
                {
                    return base.Json("5", JsonRequestBehavior.AllowGet);
                }
                return base.Json("4", JsonRequestBehavior.AllowGet);
            }
            catch
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);
            }
        }

        //, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")
        [HttpGet, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Index()
        {
            TBL_ADMINLOGIN_SMT obj = new TBL_ADMINLOGIN_SMT();
            if (Request.Cookies["AdminUserName"] != null && Request.Cookies["AdminPasswd"] != null)
            {
                obj.USEREMAIL = Common.Encryption.Decrypt(Request.Cookies["AdminUserName"].Value, "SmartLabourAdmin");
                obj.PASSWORD = Common.Encryption.Decrypt(Request.Cookies["AdminPasswd"].Value, "SmartLabourAdmin");
            }
            return base.View(obj);
        }

        [HttpPost]
        public ActionResult Index(TBL_ADMINLOGIN_SMT logindtls, FormCollection obj)
        {
         //   logindtls.USERNAME = "Dummy";
          //  logindtls.Orgname = "Dummy";
           // if (base.ModelState.IsValid)
           // {
                FormsAuthentication.SetAuthCookie(logindtls.USEREMAIL, true);
                if ((from n in this.SmtDbEntites.AdminLogin
                     where (n.USEREMAIL == logindtls.USEREMAIL) && (n.PASSWORD == logindtls.PASSWORD)
                     select n).Count<TBL_ADMINLOGIN_SMT>() > 0)
                     {
                    TBL_ADMINLOGIN_SMT model = this.SmtDbEntites.AdminLogin.SingleOrDefault<TBL_ADMINLOGIN_SMT>(n => n.USEREMAIL == logindtls.USEREMAIL);
                    base.Session["USERNAME"] = model.USERNAME;
                    base.Session["USERID"] = model.USERID;
                    base.Session["LastLogin"] = string.Format("{0:d-MMM-yyyy HH:mm:ss}", model.LASTLOGIN);
                    model.LASTLOGIN = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString()));
                    model.Orgname = "Dummy";  
                    this.SmtDbEntites.Entry(model).State = EntityState.Modified;
                    this.SmtDbEntites.SaveChanges();
                  
                    //obj
                    if (obj.Count > 2 && obj[2].ToString().ToLower() == "rememberme")
                    {

                        Response.Cookies["AdminUserName"].Value = Common.Encryption.Encrypt(logindtls.USEREMAIL, "SmartLabourAdmin");
                        Response.Cookies["AdminPasswd"].Value = Common.Encryption.Encrypt(logindtls.PASSWORD, "SmartLabourAdmin");
                        Response.Cookies["AdminUserName"].Expires = DateTime.Now.AddDays(30);
                        Response.Cookies["AdminPasswd"].Expires = DateTime.Now.AddDays(30);
                    }
                    else
                    {
                        Response.Cookies["AdminUserName"].Expires = DateTime.Now.AddDays(-1);
                        Response.Cookies["AdminPasswd"].Expires = DateTime.Now.AddDays(-1);
                    }

                    return this.Redirect("/Smart/Dashboard");
                }
                base.ModelState.AddModelError("PASSWORD", "The user name or password provided is incorrect.");
            //}
            return base.View();
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public string SetMenuId(string Name)
        {
            base.TempData["currentgetidss"] = Name;
            return "success";
        }

        public string Signout()
        {
            FormsAuthentication.SignOut();
            base.Session.Abandon();
            base.Session.Clear();
            return "sucess";
        }
    }
    #endregion

    #region ArticalCommentsController
    [AuthorizeUser]
    public class ArticalCommentsController : BaseController
    {
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        // Methods
        public string Artical_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                TBL_COMMENTS_SMT entity = this.SmtDbEntites.Comments.SingleOrDefault<TBL_COMMENTS_SMT>(n => n.COMMENTSID == bannerid);
                this.SmtDbEntites.Comments.Remove(entity);
                this.SmtDbEntites.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        public ActionResult Artical_Delete(int id)
        {
            TBL_Artical_SMT entity = this.SmtDbEntites.Artical.SingleOrDefault<TBL_Artical_SMT>(n => n.ArticalID == id);
            this.SmtDbEntites.Artical.Remove(entity);
            this.SmtDbEntites.SaveChanges();
            base.TempData["messagealert"] = "Artical Comments Deleted Successfully";
            return base.RedirectToAction("Comments_List");
        }

        public string Artical_SaveHomecontent(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            List<TBL_COMMENTS_SMT> list = this.SmtDbEntites.Comments.ToList<TBL_COMMENTS_SMT>();
            for (int i = 0; i < list.Count; i++)
            {
                int ids = Convert.ToInt32(list[i].COMMENTSID);
                this.SmtDbEntites.Comments.SingleOrDefault<TBL_COMMENTS_SMT>(n => (n.COMMENTSID == ids)).APPROVED = false;
                this.SmtDbEntites.SaveChanges();
            }
            for (int j = 0; j < (strArray.Length - 1); j++)
            {
                int bannerid = Convert.ToInt32(strArray[j].ToString());
                this.SmtDbEntites.Comments.SingleOrDefault<TBL_COMMENTS_SMT>(n => (n.COMMENTSID == bannerid)).APPROVED = true;
                this.SmtDbEntites.SaveChanges();
            }
            return "success";
        }

        public ActionResult ArticalComments_View(int id)
        {
            base.TempData["currentgetidss"] = "Article’sTestimonials";
            TBL_COMMENTS_SMT model = this.SmtDbEntites.Comments.SingleOrDefault<TBL_COMMENTS_SMT>(n => n.COMMENTSID == id);
            return base.View(model);
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Comments_List(int? id, string search)
        {
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "Article’sTestimonials";
            List<TBL_COMMENTS_SMT> source = new List<TBL_COMMENTS_SMT>();
            if ((search != null) && (search != string.Empty))
            {
                var query = source = (from n in this.SmtDbEntites.Comments
                                      select n).ToList();
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        ((dynamic)base.ViewBag).TotalRecordcount = source.Count<TBL_COMMENTS_SMT>();
                        break;
                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        ((dynamic)base.ViewBag).TotalRecordcount = source.Count<TBL_COMMENTS_SMT>();
                        break;
                    case "3":
                        source = Contains(query, searchBy, searchText);
                        ((dynamic)base.ViewBag).TotalRecordcount = source.Count<TBL_COMMENTS_SMT>();
                        break;
                    case "50":
                        source = Startswith(query, "active", searchText);
                        break;

                    case "51":
                        source = Startswith(query, "inactive", searchText);
                        break;
                }
            }
            else
            {
                source = this.SmtDbEntites.Comments.ToList<TBL_COMMENTS_SMT>();
            }
            int num = source.Count<TBL_COMMENTS_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num2;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CREATEDDATE descending
                              select n).Skip<TBL_COMMENTS_SMT>(count).Take<TBL_COMMENTS_SMT>(10).ToList<TBL_COMMENTS_SMT>());
        }

        #region Search Options

        public List<TBL_COMMENTS_SMT> Startswith(List<TBL_COMMENTS_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Articals.Title.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.DESCRIPTION.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "active")
            {
                query = query.Where(n => n.APPROVED == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.APPROVED == false).ToList();
            }
            List<TBL_COMMENTS_SMT> source = query.Select(x => x).ToList<TBL_COMMENTS_SMT>();
            return source;
        }
        //<option value="1" >Artical</option>
        //         <option value="2">Date</option>
        //         <option value="3">Status</option>
        public List<TBL_COMMENTS_SMT> EqualTo(List<TBL_COMMENTS_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Articals.Title.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.DESCRIPTION.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "3")
            {
                //query = query.Where(n => n.STATUS .ToLower().StartsWith(searchText));
            }

            List<TBL_COMMENTS_SMT> source = query.Select(x => x).ToList<TBL_COMMENTS_SMT>();
            return source;
        }
        public List<TBL_COMMENTS_SMT> Contains(List<TBL_COMMENTS_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Articals.Title.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.DESCRIPTION.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                //query = query.Where(n => n.STATUS .ToLower().StartsWith(searchText));
            }
            List<TBL_COMMENTS_SMT> source = query.Select(x => x).ToList<TBL_COMMENTS_SMT>();
            return source;
        }

        #endregion


        public string UpdateStatus(string status, int bannerid)
        {
            TBL_COMMENTS_SMT tbl_comments_smt = this.SmtDbEntites.Comments.SingleOrDefault<TBL_COMMENTS_SMT>(n => n.COMMENTSID == bannerid);
            if (status == "true")
            {
                tbl_comments_smt.APPROVED = false;
            }
            else
            {
                tbl_comments_smt.APPROVED = true;
            }
            this.SmtDbEntites.SaveChanges();
            return "sucess";
        }
    }
    #endregion

    #region ArticalController
    [AuthorizeUser]
    public class ArticalController : BaseController
    {
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        // Methods
        [HttpGet]
        public ActionResult Artical_Add()
        {
            base.TempData["currentgetidss"] = "Article’sTestimonials";
            return base.View();
        }

        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Artical_Add(TBL_Artical_SMT objArtical)
        {
            if (base.ModelState.IsValid)
            {
                if ((from n in this.SmtDbEntites.Artical
                     where n.Title.ToLower().Trim() == objArtical.Title.ToLower().Trim()
                     select n).ToList<TBL_Artical_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Artical Title Already Exists";
                    return base.View(objArtical);
                }
                objArtical.CreatedDate = new DateTime?(DateTime.Now);
                this.SmtDbEntites.Artical.Add(objArtical);
                this.SmtDbEntites.SaveChanges();
                base.TempData["messagealert"] = "Artical Added Successfully";
                return base.RedirectToAction("Artical_List");
            }
            return base.View(objArtical);
        }

        public string Artical_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                TBL_Artical_SMT entity = this.SmtDbEntites.Artical.SingleOrDefault<TBL_Artical_SMT>(n => n.ArticalID == bannerid);
                this.SmtDbEntites.Artical.Remove(entity);
                this.SmtDbEntites.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        public ActionResult Artical_Delete(int id)
        {
            TBL_Artical_SMT entity = this.SmtDbEntites.Artical.SingleOrDefault<TBL_Artical_SMT>(n => n.ArticalID == id);
            this.SmtDbEntites.Artical.Remove(entity);
            this.SmtDbEntites.SaveChanges();
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return base.RedirectToAction("Artical_List");
        }

        [HttpGet]
        public ActionResult Artical_Edit(int id)
        {
            base.TempData["currentgetidss"] = "Article’sTestimonials";
            TBL_Artical_SMT model = this.SmtDbEntites.Artical.SingleOrDefault<TBL_Artical_SMT>(n => n.ArticalID == id);
            return base.View(model);
        }

        [HttpPost]
        public ActionResult Artical_Edit(int id, TBL_Artical_SMT objArtical)
        {
            if (base.ModelState.IsValid)
            {
                if ((from n in this.SmtDbEntites.Artical
                     where (n.ArticalID != id) && (n.Title.ToLower().Trim() == objArtical.Title.ToLower().Trim())
                     select n).ToList<TBL_Artical_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Artical Title Already Exists";
                    return base.View(objArtical);
                }
                TBL_Artical_SMT l_smt = this.SmtDbEntites.Artical.SingleOrDefault<TBL_Artical_SMT>(n => n.ArticalID == id);
                l_smt.Title = objArtical.Title;
                l_smt.Description = objArtical.Description;
                l_smt.ArticalDate = objArtical.ArticalDate;
                l_smt.ShortDescription = objArtical.ShortDescription;
                l_smt.Status = objArtical.Status;
                l_smt.CreatedDate = new DateTime?(DateTime.Now);
                this.SmtDbEntites.SaveChanges();
                base.TempData["messagealert"] = "Artical Updated Successfully";
                return base.RedirectToAction("Artical_List");
            }
            return base.View(objArtical);
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Artical_List(int? id, string search)
        {
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "Article’sTestimonials";
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<TBL_Artical_SMT> source = new List<TBL_Artical_SMT>();
            if ((search != null) && (search != string.Empty))
            {
                var query = (from n in this.SmtDbEntites.Artical
                             select n).ToList();
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":

                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(query, "active", searchText);
                        break;

                    case "51":
                        source = Startswith(query, "inactive", searchText);
                        break;
                }
            }
            else
            {
                source = this.SmtDbEntites.Artical.ToList<TBL_Artical_SMT>();
            }
            int num = source.Count<TBL_Artical_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.ArticalID descending
                              select n).Skip<TBL_Artical_SMT>(count).Take<TBL_Artical_SMT>(10).ToList<TBL_Artical_SMT>());
        }

        #region Search Options

        public List<TBL_Artical_SMT> Startswith(List<TBL_Artical_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Title.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => Convert.ToString(n.ArticalDate).ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "active")
            {
                query = query.Where(n => n.Status == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.Status == false).ToList();
            }
            List<TBL_Artical_SMT> source = query.Select(x => x).ToList<TBL_Artical_SMT>();
            return source;
        }

        public List<TBL_Artical_SMT> EqualTo(List<TBL_Artical_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Title.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => Convert.ToString(n.ArticalDate).ToLower() == searchText).ToList();

            }
            else if (SearchBy == "3")
            {
                //query = query.Where(n => n.STATUS .ToLower().StartsWith(searchText));
            }

            List<TBL_Artical_SMT> source = query.Select(x => x).ToList<TBL_Artical_SMT>();
            return source;
        }

        public List<TBL_Artical_SMT> Contains(List<TBL_Artical_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Title.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => Convert.ToString(n.ArticalDate).ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {
                //query = query.Where(n => n.STATUS .ToLower().StartsWith(searchText));
            }

            List<TBL_Artical_SMT> source = query.Select(x => x).ToList<TBL_Artical_SMT>();
            return source;
        }

        #endregion

        public string Artical_SaveHomecontent(string id)
        {
            try
            {
                string[] strArray = id.Split(new char[] { ',' });
                List<TBL_Artical_SMT> list = this.SmtDbEntites.Artical.ToList<TBL_Artical_SMT>();
                for (int i = 0; i < list.Count; i++)
                {
                    int ids = Convert.ToInt32(list[i].ArticalID);
                    TBL_Artical_SMT l_smt = this.SmtDbEntites.Artical.SingleOrDefault<TBL_Artical_SMT>(n => n.ArticalID == ids);
                    l_smt.ShortDescription = l_smt.ShortDescription;
                    l_smt.Homecontent = false;
                    this.SmtDbEntites.SaveChanges();
                }
                for (int j = 0; j < (strArray.Length - 1); j++)
                {
                    int bannerid = Convert.ToInt32(strArray[j].ToString());
                    this.SmtDbEntites.Artical.SingleOrDefault<TBL_Artical_SMT>(n => (n.ArticalID == bannerid)).Homecontent = true;
                    this.SmtDbEntites.SaveChanges();
                }
                return "success";
            }
            catch (DbEntityValidationException exception)
            {
                Exception innerException = exception;
                foreach (DbEntityValidationResult result in exception.EntityValidationErrors)
                {
                    foreach (DbValidationError error in result.ValidationErrors)
                    {
                        innerException = new InvalidOperationException(string.Format("{0}:{1}", result.Entry.Entity.ToString(), error.ErrorMessage), innerException);
                    }
                }
                return "Failure";
            }
        }

        public ActionResult Artical_View(int id)
        {
            base.TempData["currentgetidss"] = "Article’sTestimonials";
            TBL_Artical_SMT model = this.SmtDbEntites.Artical.SingleOrDefault<TBL_Artical_SMT>(n => n.ArticalID == id);
            return base.View(model);
        }

        public string UpdateStatus(string status, int bannerid)
        {
            TBL_Artical_SMT l_smt = this.SmtDbEntites.Artical.SingleOrDefault<TBL_Artical_SMT>(n => n.ArticalID == bannerid);
            if (status == "true")
            {
                l_smt.Status = false;
            }
            else
            {
                l_smt.Status = true;
            }
            this.SmtDbEntites.SaveChanges();
            return "sucess";
        }
    }
    #endregion

    #region ArticalFrontController
    public class ArticalFrontController : Controller
    {
        // Fields
        private static int pagesize = 5;
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        // Methods
        public ActionResult ArticalDetails(int id)
        {
            ((dynamic)base.ViewBag).TopArtical = (from n in this.SmtDbEntites.Artical
                                                  where n.Status && n.Homecontent
                                                  select n).Take<TBL_Artical_SMT>(5).ToList<TBL_Artical_SMT>();
            ((dynamic)base.ViewBag).Comments = (from n in this.SmtDbEntites.Comments
                                                where (n.ARTICALID == id) && n.APPROVED
                                                select n).ToList<TBL_COMMENTS_SMT>();
            TBL_Artical_SMT model = this.SmtDbEntites.Artical.SingleOrDefault<TBL_Artical_SMT>(n => n.ArticalID == id);
            base.TempData["currentgetid"] = "idArtical";
            return base.View(model);
        }

        public ActionResult Articals(int? id)
        {
            List<TBL_Artical_SMT> source = new List<TBL_Artical_SMT>();
            int count = 0;
            if (id.HasValue)
            {
                int? nullable2 = id - 1;
                count = nullable2.Value * pagesize;
                base.Session["Cpage"] = id;
            }
            if (!id.HasValue)
            {
                ((dynamic)base.ViewBag).CurrentPage = 1;
            }
            else
            {
                ((dynamic)base.ViewBag).CurrentPage = id;
            }
            source = (from n in this.SmtDbEntites.Artical
                      where n.Status
                      select n).ToList<TBL_Artical_SMT>();
            if ((source.Count<TBL_Artical_SMT>() % pagesize) == 0)
            {
                ((dynamic)base.ViewBag).TotalPages = source.Count<TBL_Artical_SMT>() / pagesize;
            }
            else
            {
                ((dynamic)base.ViewBag).TotalPages = (source.Count<TBL_Artical_SMT>() / pagesize) + 1;
            }
            ((dynamic)base.ViewBag).Artical = (from n in source
                                               where n.Status
                                               orderby n.CreatedDate descending
                                               select n).Skip<TBL_Artical_SMT>(count).Take<TBL_Artical_SMT>(pagesize).ToList<TBL_Artical_SMT>();
            ((dynamic)base.ViewBag).TopArtical = (from n in this.SmtDbEntites.Artical
                                                  where n.Status && n.Homecontent
                                                  orderby n.CreatedDate descending
                                                  select n).Take<TBL_Artical_SMT>(5).ToList<TBL_Artical_SMT>();
            base.TempData["currentgetid"] = "idArtical";
            return base.View();
        }

        public ActionResult FeedBack(string Feedbacktext, int Articalid)
        {
            if (base.Session["FUSERID"] != null)
            {
                TBL_COMMENTS_SMT entity = new TBL_COMMENTS_SMT();
                int num = Convert.ToInt32(base.Session["FUSERID"].ToString());
                entity.ARTICALID = Articalid;
                entity.UserID = num;
                entity.DESCRIPTION = Feedbacktext;
                entity.CREATEDDATE = new DateTime?(DateTime.Now);
                this.SmtDbEntites.Comments.Add(entity);
                this.SmtDbEntites.SaveChanges();
                return base.Json("Comments Posted Successfully", JsonRequestBehavior.AllowGet);
            }
            return base.Json("Please SignIn before Posted a Comments", JsonRequestBehavior.AllowGet);
        }

        public ActionResult MobileArticals(int? page)
        {
            List<TBL_Artical_SMT> source = new List<TBL_Artical_SMT>();
            int count = 0;
            if (page.HasValue)
            {
                int? nullable2 = page - 1;
                count = nullable2.Value * pagesize;
                base.Session["Cpage"] = page;
            }
            if (!page.HasValue)
            {
                ((dynamic)base.ViewBag).CurrentPage = 1;
            }
            else
            {
                ((dynamic)base.ViewBag).CurrentPage = page;
            }
            source = (from n in this.SmtDbEntites.Artical
                      where n.Status
                      select n).ToList<TBL_Artical_SMT>();
            if ((source.Count<TBL_Artical_SMT>() % pagesize) == 0)
            {
                ((dynamic)base.ViewBag).TotalPages = source.Count<TBL_Artical_SMT>() / pagesize;
            }
            else
            {
                ((dynamic)base.ViewBag).TotalPages = (source.Count<TBL_Artical_SMT>() / pagesize) + 1;
            }
            ((dynamic)base.ViewBag).Artical = (from n in source
                                               where n.Status
                                               orderby n.CreatedDate descending
                                               select n).Skip<TBL_Artical_SMT>(count).Take<TBL_Artical_SMT>(pagesize).ToList<TBL_Artical_SMT>();
            ((dynamic)base.ViewBag).TopArtical = (from n in this.SmtDbEntites.Artical
                                                  where n.Status && n.Homecontent
                                                  orderby n.CreatedDate descending
                                                  select n).Take<TBL_Artical_SMT>(5).ToList<TBL_Artical_SMT>();
            base.TempData["currentgetid"] = "idArtical";
            ((dynamic)base.ViewBag).MobileDisplay = "1";
            return base.View();
        }
    }
    #endregion

    #region AuthorizeLabourAttribute
    public class AuthorizeLabourAttribute : AuthorizeAttribute
    {
        // Methods
        protected override bool AuthorizeCore(HttpContextBase httpContext)
        {
            HttpSessionStateBase session = httpContext.Session;
            if (session["FUSERID"] != null)
            {
                SmartLabourEntities entities = new SmartLabourEntities();
                int Labour = Convert.ToInt32(session["FUSERID"]);
                if (entities.Labours.SingleOrDefault<Labour>(n => (n.UserID == Labour)).STATUS)
                {
                    return true;
                }
                session["FUSERID"] = "";
                session["FUSERNAME"] = "";
                return false;
            }
            return false;
        }

        protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)
        {
            FormsAuthentication.SignOut();
            filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { controller = "Home", action = "Index" }));
        }

        // Properties
        public string AccessLevel { get; set; }
    }
    #endregion

    #region AuthorizeSponsorAttribute
    public class AuthorizeSponsorAttribute : AuthorizeAttribute
    {
        // Methods
        protected override bool AuthorizeCore(HttpContextBase httpContext)
        {
            SmartLabourEntities entities;
            HttpSessionStateBase session = httpContext.Session;
            if (session["SPONSORID"] != null)
            {
                entities = new SmartLabourEntities();
                int Labour = Convert.ToInt32(session["SPONSORID"]);
                if (entities.Sponsor.SingleOrDefault<Sponsor>(n => (n.UserID == Labour)).Status)
                {
                    return true;
                }
                session["SPONSORID"] = "";
                session["FUSERNAME"] = "";
                return false;
            }
            if (session["FUSERID"] != null)
            {
                entities = new SmartLabourEntities();
                int Labour = Convert.ToInt32(session["FUSERID"]);
                if (entities.Labours.SingleOrDefault<Labour>(n => (n.UserID == Labour)).STATUS)
                {
                    return true;
                }
                session["FUSERID"] = "";
                session["FUSERNAME"] = "";
                return false;
            }
            return false;
        }

        protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)
        {
            FormsAuthentication.SignOut();
            filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { controller = "Home", action = "Index" }));
        }

        // Properties
        public string AccessLevel { get; set; }
    }

    #endregion

    #region AuthorizeUserAttribute
    public class AuthorizeUserAttribute : AuthorizeAttribute
    {
        // Methods
        protected override bool AuthorizeCore(HttpContextBase httpContext)
        {
            return (httpContext.Session["USERID"] != null);
        }

        protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)
        {
            FormsAuthentication.SignOut();
            filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new { controller = "Admin", action = "index" }));
        }

        // Properties
        public string AccessLevel { get; set; }
    }
    #endregion

    #region BannerController
    [AuthorizeUser]
    public class BannerController : BaseController
    {
        // Fields
        private SmartLabourEntities dbSmartLabours = new SmartLabourEntities();

        // Methods
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Banner_Add(TBL_Banner_SMT objBanner)
        {
            base.TempData["currentgetidss"] = "Others";
            return base.View();
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpPost]
        public ActionResult Banner_Add(TBL_Banner_SMT banner, HttpPostedFileBase BannerImage)
        {
            base.TempData["currentgetidss"] = "Others";
            base.TempData["messagealert"] = "";
            if (!base.ModelState.IsValid)
            {
                return base.View(banner);
            }
            if ((banner.BannerImage == null) && (BannerImage == null))
            {
                ((dynamic)base.ViewBag).messagealert = "Banner image required";
                return base.View(banner);
            }
            if (BannerImage != null)
            {
                string fileName = Path.GetFileName(BannerImage.FileName);
                string str2 = "";
                string str3 = "";
                string str4 = Path.GetExtension(fileName.ToString()).ToLower();
                string[] strArray = new string[] { ".png", ".jpg", ".gif" };
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (str4 == strArray[i])
                    {
                        str2 = strArray[i].ToString();
                    }
                }
                string str5 = DateTime.Now.ToString("ddMMyyhhmmss");
                string[] strArray2 = fileName.ToString().Split(new char[] { '.' });
                if (strArray2[0].ToString().Length > 30)
                {
                    str3 = strArray2[0].ToString().Substring(0, 0x1d) + str5 + str2.ToString();
                }
                else
                {
                    str3 = strArray2[0].ToString() + str5 + str2.ToString();
                }
                string filename = Path.Combine(base.Server.MapPath("~/Content/Admin/images/Banner/"), str3);
                BannerImage.SaveAs(filename);
                banner.BannerImage = str3;
            }
            this.dbSmartLabours.Banner.Add(banner);
            this.dbSmartLabours.SaveChanges();
            base.TempData["messagealert"] = "Record Added Successfully";
            return base.RedirectToAction("Banner_list");
        }

        public string Banner_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                TBL_Banner_SMT entity = this.dbSmartLabours.Banner.SingleOrDefault<TBL_Banner_SMT>(n => n.BannerId == bannerid);
                this.dbSmartLabours.Banner.Remove(entity);
                this.dbSmartLabours.SaveChanges();
            }
            return "success";
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Banner_Edit(int id, TBL_Banner_SMT objBanner)
        {
            TBL_Banner_SMT model = this.dbSmartLabours.Banner.SingleOrDefault<TBL_Banner_SMT>(n => n.BannerId == id);
            base.TempData["currentgetidss"] = "Others";
            return base.View(model);
        }

        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Banner_Edit(int id, TBL_Banner_SMT banner, HttpPostedFileBase BannerImage)
        {
            base.TempData["currentgetidss"] = "Others";
            base.TempData["messagealert"] = "";
            if (!base.ModelState.IsValid)
            {
                return base.View(banner);
            }
            TBL_Banner_SMT r_smt = this.dbSmartLabours.Banner.SingleOrDefault<TBL_Banner_SMT>(n => n.BannerId == id);
            if (BannerImage != null)
            {
                string fileName = Path.GetFileName(BannerImage.FileName);
                string str2 = "";
                string str3 = "";
                string str4 = Path.GetExtension(fileName.ToString()).ToLower();
                string[] strArray = new string[] { ".png", ".jpg", ".gif" };
                for (int i = 0; i < strArray.Length; i++)
                {
                    if (str4 == strArray[i])
                    {
                        str2 = strArray[i].ToString();
                    }
                }
                string str5 = DateTime.Now.ToString("ddMMyyhhmmss");
                string[] strArray2 = fileName.ToString().Split(new char[] { '.' });
                if (strArray2[0].ToString().Length > 30)
                {
                    str3 = strArray2[0].ToString().Substring(0, 0x1d) + str5 + str2.ToString();
                }
                else
                {
                    str3 = strArray2[0].ToString() + str5 + str2.ToString();
                }
                string filename = Path.Combine(base.Server.MapPath("~/Content/Admin/images/Banner/"), str3);
                BannerImage.SaveAs(filename);
                r_smt.BannerImage = str3;
            }
            r_smt.BannerTitle = banner.BannerTitle;
            r_smt.Status = banner.Status;
            this.dbSmartLabours.SaveChanges();
            base.TempData["messagealert"] = "Record Updated Successfully";
            return base.RedirectToAction("banner_list");
        }


        public ActionResult Banner_list(int? id, string search)
        {
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<TBL_Banner_SMT> source = new List<TBL_Banner_SMT>();
            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = (from n in this.dbSmartLabours.Banner
                                  where n.BannerTitle.ToLower().StartsWith(searchText)
                                  select n).ToList<TBL_Banner_SMT>();
                        break;

                    case "2":
                        source = (from n in this.dbSmartLabours.Banner
                                  where n.BannerTitle.Trim().ToLower() == searchText
                                  select n).ToList<TBL_Banner_SMT>();
                        break;

                    case "3":
                        source = (from n in this.dbSmartLabours.Banner
                                  where n.BannerTitle.ToLower().Contains(searchText)
                                  select n).ToList<TBL_Banner_SMT>();
                        break;
                    case "50":
                        source = (from n in this.dbSmartLabours.Banner
                                  where n.Status
                                  select n).ToList<TBL_Banner_SMT>();
                        break;

                    case "51":
                        source = (from n in this.dbSmartLabours.Banner
                                  where !n.Status
                                  select n).ToList<TBL_Banner_SMT>();
                        break;

                }
            }
            else
            {
                source = this.dbSmartLabours.Banner.ToList<TBL_Banner_SMT>();
            }
            int num = source.Count<TBL_Banner_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            base.TempData["currentgetidss"] = "Others";
            return base.View((from n in source
                              orderby n.BannerId descending
                              select n).Skip<TBL_Banner_SMT>(count).Take<TBL_Banner_SMT>(10).ToList<TBL_Banner_SMT>());
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Banner_View(int id)
        {
            base.TempData["currentgetidss"] = "Others";
            TBL_Banner_SMT model = this.dbSmartLabours.Banner.SingleOrDefault<TBL_Banner_SMT>(n => n.BannerId == id);
            return base.View(model);
        }

        public ActionResult BannerDelete(int id)
        {
            try
            {
                TBL_Banner_SMT entity = this.dbSmartLabours.Banner.SingleOrDefault<TBL_Banner_SMT>(n => n.BannerId == id);
                this.dbSmartLabours.Banner.Remove(entity);
                this.dbSmartLabours.SaveChanges();
                base.TempData["messagealert"] = "Record Deleted Successfully";
                return base.Json("1", JsonRequestBehavior.AllowGet);
            }
            catch
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);
            }
        }

        public void BANNERUPDATEPRIORITY(long lanId)
        {
            try
            {
                Database database = DatabaseFactory.CreateDatabase("DefaultConnection");
                string storedProcedureName = "PROC_Banner_priorityUpdate";
                DbCommand storedProcCommand = database.GetStoredProcCommand(storedProcedureName);
                database.AddInParameter(storedProcCommand, "@BANNERID", DbType.Int32, lanId);
                database.ExecuteNonQuery(storedProcCommand);
            }
            catch
            {
            }
        }

        public string UpdateStatus(string status, int cimageid)
        {
            TBL_Banner_SMT r_smt = this.dbSmartLabours.Banner.SingleOrDefault<TBL_Banner_SMT>(n => n.BannerId == cimageid);
            if (status == "true")
            {
                r_smt.Status = false;
            }
            else
            {
                r_smt.Status = true;
            }
            this.dbSmartLabours.SaveChanges();
            return "sucess";
        }
    }
    #endregion

    #region BaseController
    public class BaseController : Controller
    {
        // Fields
        private SmartLabourEntities db = new SmartLabourEntities();
        // Methods
        public ActionResult Index()
        {
            return base.View();
        }
        public bool sendAppleNotification(string deviceToken, string notificationMsg)
        {
            try
            {
                bool sandbox = true;
                string testDeviceToken = deviceToken;
                string p12File = "Push Notification_new.p12";
                string p12FilePassword = "123456";
                int count = 1;
                int sleepBetweenNotifications = 15000;
                string p12Filename = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, p12File);
                var jk = System.IO.File.Exists(p12Filename);
                NotificationService service = new NotificationService(sandbox, p12Filename, 1);
                service.SendRetries = 5; //5 retries before generating notificationfailed event
                service.ReconnectDelay = 5000; //5 seconds
                service.Error += new NotificationService.OnError(service_Error);
                service.NotificationTooLong += new NotificationService.OnNotificationTooLong(service_NotificationTooLong);
                service.BadDeviceToken += new NotificationService.OnBadDeviceToken(service_BadDeviceToken);
                service.NotificationFailed += new NotificationService.OnNotificationFailed(service_NotificationFailed);
                service.NotificationSuccess += new NotificationService.OnNotificationSuccess(service_NotificationSuccess);
                service.Connecting += new NotificationService.OnConnecting(service_Connecting);
                service.Connected += new NotificationService.OnConnected(service_Connected);
                service.Disconnected += new NotificationService.OnDisconnected(service_Disconnected);
                for (int i = 1; i <= count; i++)
                {
                    Notification alertNotification = new Notification(testDeviceToken);
                    alertNotification.Payload.Alert.Body = "Smart Labour -" + notificationMsg;
                    alertNotification.Payload.Sound = "default";
                    alertNotification.Payload.Badge = i;
                    //if (service.QueueNotification(alertNotification))
                    //    Console.WriteLine("Notification Queued!");
                    //else
                    //    Console.WriteLine("Notification Failed to be Queued!");
                    //Sleep in between each message
                    if (i < count)
                    {
                        //Console.WriteLine("Sleeping " + sleepBetweenNotifications + " milliseconds before next Notification...");
                        System.Threading.Thread.Sleep(sleepBetweenNotifications);
                    }
                }

                //Console.WriteLine("Cleaning Up...");
                service.Close();
                service.Dispose();
                //Console.WriteLine("Done!");
                //Console.WriteLine("Press enter to exit...");
                //Console.ReadLine();
            }
            catch (Exception ex)
            {
            }
            return true;
        }

        static void service_BadDeviceToken(object sender, BadDeviceTokenException ex)
        {
            Console.WriteLine("Bad Device Token: {0}", ex.Message);
        }

        static void service_Disconnected(object sender)
        {
            Console.WriteLine("Disconnected...");
        }

        static void service_Connected(object sender)
        {
            Console.WriteLine("Connected...");
        }

        static void service_Connecting(object sender)
        {
            Console.WriteLine("Connecting...");
        }

        static void service_NotificationTooLong(object sender, NotificationLengthException ex)
        {
            Console.WriteLine(string.Format("Notification Too Long: {0}", ex.Notification.ToString()));
        }

        static void service_NotificationSuccess(object sender, Notification notification)
        {
            Console.WriteLine(string.Format("Notification Success: {0}", notification.ToString()));
        }

        static void service_NotificationFailed(object sender, Notification notification)
        {
            Console.WriteLine(string.Format("Notification Failed: {0}", notification.ToString()));
        }

        static void service_Error(object sender, Exception ex)
        {
            Console.WriteLine(string.Format("Error: {0}", ex.Message));
        }

        protected override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            try
            {
                List<TBL_PAGE_USER_MAP_SMT> list = new List<TBL_PAGE_USER_MAP_SMT>();

                int UId = Convert.ToInt32(Convert.ToString(Session["USERID"]) == string.Empty ? "0" : Convert.ToString(Session["USERID"]));
                if (UId == 1)
                {
                    list = (from n in this.db.PageMap.Include("PAGE")
                            where (n.PAGE.STATUS == true)
                            select n).ToList<TBL_PAGE_USER_MAP_SMT>();
                }
                else
                {
                    list = (from n in this.db.PageMap.Include("PAGE")
                            where (n.VUSERTYPE == "Sub Admin") && (n.PAGE.STATUS == true)
                            select n).ToList<TBL_PAGE_USER_MAP_SMT>();

                }
                ((dynamic)base.ViewBag).MainMenu = (from m in list
                                                    where m.PAGE.IPARENTID == 0
                                                    orderby m.PAGE.IPRIORITY
                                                    select m).ToList<TBL_PAGE_USER_MAP_SMT>();
                ((dynamic)base.ViewBag).SubMenu = (from m in list
                                                   where m.PAGE.IPARENTID != 0
                                                   orderby m.PAGE.IPRIORITY
                                                   select m).ToList<TBL_PAGE_USER_MAP_SMT>();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

    }
    #endregion

    #region CmspageController
    [AuthorizeUser]
    public class CmspageController : BaseController
    {
        // Fields
        private SmartLabourEntities dbEntites = new SmartLabourEntities();

        // Methods
        [HttpGet]
        public ActionResult Aboutus_Add()
        {
            base.TempData["currentgetidss"] = "CMSPages";
            return base.View();
        }

        [HttpPost]
        public ActionResult Aboutus_Add(TBL_ABOUTUS_SMT objAboutus)
        {
            if (base.ModelState.IsValid)
            {
                base.TempData["currentgetidss"] = "CMSPages";
                if ((from n in this.dbEntites.Aboutus
                     where n.SHORTDESC.ToLower().Trim() == objAboutus.SHORTDESC.ToLower().Trim()
                     select n).ToList<TBL_ABOUTUS_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "About Us  Already Exists";
                    return base.View(objAboutus);
                }
                objAboutus.CREATEDDATE = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString()));
                objAboutus.CREATEDBY = base.Session["USERNAME"].ToString();
                this.dbEntites.Aboutus.Add(objAboutus);
                this.dbEntites.SaveChanges();
                base.TempData["messagealert"] = "Record Added Successfully";
                return base.RedirectToAction("Aboutus_List");
            }
            return base.View(objAboutus);
        }

        public string Aboutus_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                TBL_ABOUTUS_SMT entity = this.dbEntites.Aboutus.SingleOrDefault<TBL_ABOUTUS_SMT>(n => n.ABOUTUSID == bannerid);
                this.dbEntites.Aboutus.Remove(entity);
                this.dbEntites.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        public ActionResult Aboutus_Delete(int id)
        {
            TBL_ABOUTUS_SMT entity = this.dbEntites.Aboutus.SingleOrDefault<TBL_ABOUTUS_SMT>(n => n.ABOUTUSID == id);
            this.dbEntites.Aboutus.Remove(entity);
            this.dbEntites.SaveChanges();
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return base.RedirectToAction("Aboutus_List");
        }

        [HttpGet]
        public ActionResult Aboutus_Edit(int id)
        {
            TBL_ABOUTUS_SMT model = this.dbEntites.Aboutus.SingleOrDefault<TBL_ABOUTUS_SMT>(n => n.ABOUTUSID == id);
            base.TempData["currentgetidss"] = "CMSPages";
            return base.View(model);
        }

        [HttpPost]
        public ActionResult Aboutus_Edit(int id, TBL_ABOUTUS_SMT objAboutus)
        {
            base.TempData["currentgetidss"] = "CMSPages";
            if (base.ModelState.IsValid)
            {
                if ((from n in this.dbEntites.Aboutus
                     where (n.ABOUTUSID != id) && (n.SHORTDESC.ToLower().Trim() == objAboutus.SHORTDESC.ToLower().Trim())
                     select n).ToList<TBL_ABOUTUS_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "About Us Already Exists";
                    return base.View(objAboutus);
                }
                TBL_ABOUTUS_SMT tbl_aboutus_smt = this.dbEntites.Aboutus.SingleOrDefault<TBL_ABOUTUS_SMT>(n => n.ABOUTUSID == id);
                tbl_aboutus_smt.SHORTDESC = objAboutus.SHORTDESC;
                tbl_aboutus_smt.FULLDESCRIPTION = objAboutus.FULLDESCRIPTION;
                tbl_aboutus_smt.STATUS = objAboutus.STATUS;
                this.dbEntites.SaveChanges();
                base.TempData["messagealert"] = "Record Updated Successfully";
                return base.RedirectToAction("Aboutus_List");
            }
            return base.View(objAboutus);
        }

        public ActionResult Aboutus_List(int? id, string search)
        {
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "CMSPages";
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<TBL_ABOUTUS_SMT> source = new List<TBL_ABOUTUS_SMT>();
            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = (from n in this.dbEntites.Aboutus
                                  where n.SHORTDESC.ToLower().StartsWith(searchText)
                                  select n).ToList<TBL_ABOUTUS_SMT>();
                        break;

                    case "2":
                        source = (from n in this.dbEntites.Aboutus
                                  where n.SHORTDESC.Trim().ToLower() == searchText
                                  select n).ToList<TBL_ABOUTUS_SMT>();
                        break;

                    case "3":
                        source = (from n in this.dbEntites.Aboutus
                                  where n.SHORTDESC.ToLower().Contains(searchText)
                                  select n).ToList<TBL_ABOUTUS_SMT>();
                        break;
                    case "50":
                        source = (from n in this.dbEntites.Aboutus
                                  where n.STATUS
                                  select n).ToList<TBL_ABOUTUS_SMT>();
                        break;

                    case "51":
                        source = (from n in this.dbEntites.Aboutus
                                  where !n.STATUS
                                  select n).ToList<TBL_ABOUTUS_SMT>();
                        break;

                }
            }
            else
            {
                source = this.dbEntites.Aboutus.ToList<TBL_ABOUTUS_SMT>();
            }
            int num = source.Count<TBL_ABOUTUS_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).CurrentPage = id;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CREATEDDATE descending
                              select n).Skip<TBL_ABOUTUS_SMT>(count).Take<TBL_ABOUTUS_SMT>(10).ToList<TBL_ABOUTUS_SMT>());
        }

        public ActionResult Aboutus_View(int id)
        {
            base.TempData["currentgetidss"] = "CMSPages";
            TBL_ABOUTUS_SMT model = this.dbEntites.Aboutus.SingleOrDefault<TBL_ABOUTUS_SMT>(n => n.ABOUTUSID == id);
            return base.View(model);
        }

        [HttpGet]
        public ActionResult Contactus_Add()
        {
            base.TempData["currentgetidss"] = "CMSPages";
            return base.View();
        }

        [HttpPost]
        public ActionResult Contactus_Add(TBL_AdminCONTACTUS_SMT objAboutus)
        {
            if (base.ModelState.IsValid)
            {
                if ((from n in this.dbEntites.AdminContactus
                     where n.ADDRESS1.ToLower().Trim() == objAboutus.ADDRESS1.ToLower().Trim()
                     select n).ToList<TBL_AdminCONTACTUS_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Address  Already Exists";
                    return base.View(objAboutus);
                }
                objAboutus.CREATEDDATE = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString()));
                objAboutus.CREATEDBY = base.Session["USERNAME"].ToString();
                this.dbEntites.AdminContactus.Add(objAboutus);
                this.dbEntites.SaveChanges();
                base.TempData["messagealert"] = "Record Added Successfully";
                return base.RedirectToAction("Contactus_List");
            }
            return base.View(objAboutus);
        }

        public string Contactus_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                TBL_AdminCONTACTUS_SMT entity = this.dbEntites.AdminContactus.SingleOrDefault<TBL_AdminCONTACTUS_SMT>(n => n.CONTACTUSID == bannerid);
                this.dbEntites.AdminContactus.Remove(entity);
                this.dbEntites.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        [HttpGet]
        public ActionResult Contactus_Edit(int id)
        {
            TBL_AdminCONTACTUS_SMT model = this.dbEntites.AdminContactus.SingleOrDefault<TBL_AdminCONTACTUS_SMT>(n => n.CONTACTUSID == id);
            base.TempData["currentgetidss"] = "CMSPages";
            return base.View(model);
        }

        [HttpPost]
        public ActionResult Contactus_Edit(int id, TBL_AdminCONTACTUS_SMT objcontactus)
        {
            base.TempData["currentgetidss"] = "CMSPages";
            if (base.ModelState.IsValid)
            {
                if ((from n in this.dbEntites.AdminContactus
                     where (n.CONTACTUSID != id) && (n.ADDRESS1.ToLower().Trim() == objcontactus.ADDRESS1.ToLower().Trim())
                     select n).ToList<TBL_AdminCONTACTUS_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Address Already Exists";
                    return base.View(objcontactus);
                }
                TBL_AdminCONTACTUS_SMT ncontactus_smt = this.dbEntites.AdminContactus.SingleOrDefault<TBL_AdminCONTACTUS_SMT>(n => n.CONTACTUSID == id);
                ncontactus_smt.CITY = objcontactus.CITY;
                ncontactus_smt.ADDRESS1 = objcontactus.ADDRESS1;
                ncontactus_smt.STATUS = ncontactus_smt.STATUS;
                ncontactus_smt.ADDRESS2 = objcontactus.ADDRESS2;
                ncontactus_smt.COUNTRY = objcontactus.COUNTRY;
                ncontactus_smt.EMAILID = objcontactus.EMAILID;
                ncontactus_smt.PHONENO = objcontactus.PHONENO;
                ncontactus_smt.POBOXNO = objcontactus.POBOXNO;
                this.dbEntites.SaveChanges();
                base.TempData["messagealert"] = "Record Updated Successfully";
                return base.RedirectToAction("Contactus_List");
            }
            return base.View(objcontactus);
        }

        public ActionResult Contactus_List(int? id, string search)
        {
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "CMSPages";
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<TBL_AdminCONTACTUS_SMT> source = new List<TBL_AdminCONTACTUS_SMT>();
            var query = (from n in this.dbEntites.AdminContactus select n).ToList<TBL_AdminCONTACTUS_SMT>();
            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(query, "Active", searchText);
                        break;

                    case "51":
                        source = Startswith(query, "InActive", searchText);
                        break;

                }
            }
            else
            {
                source = this.dbEntites.AdminContactus.ToList<TBL_AdminCONTACTUS_SMT>();
            }
            int num = source.Count<TBL_AdminCONTACTUS_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).CurrentPage = id;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CREATEDDATE descending
                              select n).Skip<TBL_AdminCONTACTUS_SMT>(count).Take<TBL_AdminCONTACTUS_SMT>(10).ToList<TBL_AdminCONTACTUS_SMT>());
        }

        #region Search Options

        public List<TBL_AdminCONTACTUS_SMT> Startswith(List<TBL_AdminCONTACTUS_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.ADDRESS1.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {

                query = query.Where(n => n.CITY.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {

                query = query.Where(n => n.COUNTRY.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "4")
            {

                query = query.Where(n => n.EMAILID.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "5")
            {

                query = query.Where(n => n.PHONENO.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "6")
            {

                query = query.Where(n => n.POBOXNO.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "Active")
            {
                query = query.Where(n => n.STATUS == true).ToList();
            }
            else if (SearchBy == "InActive")
            {
                query = query.Where(n => n.STATUS == false).ToList();
            }
            List<TBL_AdminCONTACTUS_SMT> source = query.Select(x => x).ToList<TBL_AdminCONTACTUS_SMT>();
            return source;
        }

        public List<TBL_AdminCONTACTUS_SMT> EqualTo(List<TBL_AdminCONTACTUS_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.ADDRESS1.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "2")
            {

                query = query.Where(n => n.CITY.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "3")
            {

                query = query.Where(n => n.COUNTRY.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "4")
            {

                query = query.Where(n => n.EMAILID.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "5")
            {

                query = query.Where(n => n.PHONENO.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "6")
            {

                query = query.Where(n => n.POBOXNO.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "7")
            {
                //query = query.Where(n => n.STATUS .ToLower()==searchText);
            }
            List<TBL_AdminCONTACTUS_SMT> source = query.Select(x => x).ToList<TBL_AdminCONTACTUS_SMT>();
            return source;
        }

        public List<TBL_AdminCONTACTUS_SMT> Contains(List<TBL_AdminCONTACTUS_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.ADDRESS1.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {

                query = query.Where(n => n.CITY.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {

                query = query.Where(n => n.COUNTRY.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "4")
            {

                query = query.Where(n => n.EMAILID.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "5")
            {

                query = query.Where(n => n.PHONENO.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "6")
            {

                query = query.Where(n => n.POBOXNO.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "7")
            {
                //query = query.Where(n => n.STATUS .ToLower().Contains(searchText));
            }

            List<TBL_AdminCONTACTUS_SMT> source = query.Select(x => x).ToList<TBL_AdminCONTACTUS_SMT>();
            return source;
        }

        #endregion

        public ActionResult Contactus_View(int id)
        {
            base.TempData["currentgetidss"] = "CMSPages";
            TBL_AdminCONTACTUS_SMT model = this.dbEntites.AdminContactus.SingleOrDefault<TBL_AdminCONTACTUS_SMT>(n => n.CONTACTUSID == id);
            return base.View(model);
        }

        public ActionResult Termandcondition_View(int id)
        {
            base.TempData["currentgetidss"] = "CMSPages";
            TBL_TERMSANDCONDITION_SMT model = this.dbEntites.Termsandcondition.SingleOrDefault<TBL_TERMSANDCONDITION_SMT>(n => n.TermsandConditionId == id);
            return base.View(model);
        }

        [HttpGet]
        public ActionResult Termsandcondition_Add()
        {
            base.TempData["currentgetidss"] = "CMSPages";
            return base.View();
        }

        [HttpPost]
        public ActionResult Termsandcondition_Add(TBL_TERMSANDCONDITION_SMT objAboutus)
        {
            base.TempData["currentgetidss"] = "CMSPages";
            if (base.ModelState.IsValid)
            {
                if ((from n in this.dbEntites.Termsandcondition
                     where n.ShortDescription.ToLower().Trim() == objAboutus.ShortDescription.ToLower().Trim()
                     select n).ToList<TBL_TERMSANDCONDITION_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Terms and condition  Already Exists";
                    return base.View(objAboutus);
                }
                objAboutus.CREATEDDATE = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString()));
                objAboutus.CREATEDBY = base.Session["USERNAME"].ToString();
                this.dbEntites.Termsandcondition.Add(objAboutus);
                this.dbEntites.SaveChanges();
                base.TempData["messagealert"] = "Record Added Successfully";
                return base.RedirectToAction("Termsandcondition_List");
            }
            return base.View(objAboutus);
        }

        public string Termsandcondition_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                TBL_TERMSANDCONDITION_SMT entity = this.dbEntites.Termsandcondition.SingleOrDefault<TBL_TERMSANDCONDITION_SMT>(n => n.TermsandConditionId == bannerid);
                this.dbEntites.Termsandcondition.Remove(entity);
                this.dbEntites.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        [HttpGet]
        public ActionResult Termsandcondition_Edit(int id)
        {
            TBL_TERMSANDCONDITION_SMT model = this.dbEntites.Termsandcondition.SingleOrDefault<TBL_TERMSANDCONDITION_SMT>(n => n.TermsandConditionId == id);
            base.TempData["currentgetidss"] = "CMSPages";
            return base.View(model);
        }

        [HttpPost]
        public ActionResult Termsandcondition_Edit(int id, TBL_TERMSANDCONDITION_SMT objtermsandcondition)
        {
            base.TempData["currentgetidss"] = "CMSPages";
            if (base.ModelState.IsValid)
            {
                if ((from n in this.dbEntites.Termsandcondition
                     where (n.TermsandConditionId != id) && (n.ShortDescription.ToLower().Trim() == objtermsandcondition.ShortDescription.ToLower().Trim())
                     select n).ToList<TBL_TERMSANDCONDITION_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "About Us Already Exists";
                    return base.View(objtermsandcondition);
                }
                TBL_TERMSANDCONDITION_SMT tbl_termsandcondition_smt = this.dbEntites.Termsandcondition.SingleOrDefault<TBL_TERMSANDCONDITION_SMT>(n => n.TermsandConditionId == id);
                tbl_termsandcondition_smt.ShortDescription = objtermsandcondition.ShortDescription;
                tbl_termsandcondition_smt.FullDecription = objtermsandcondition.FullDecription;
                tbl_termsandcondition_smt.STATUS = objtermsandcondition.STATUS;
                this.dbEntites.SaveChanges();
                base.TempData["messagealert"] = "Record Updated Successfully";
                return base.RedirectToAction("Termsandcondition_List");
            }
            return base.View(objtermsandcondition);
        }

        public ActionResult Termsandcondition_List(int? id, string search)
        {
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "CMSPages";
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<TBL_TERMSANDCONDITION_SMT> source = new List<TBL_TERMSANDCONDITION_SMT>();
            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = (from n in this.dbEntites.Termsandcondition
                                  where n.ShortDescription.ToLower().StartsWith(searchText)
                                  select n).ToList<TBL_TERMSANDCONDITION_SMT>();
                        break;

                    case "2":
                        source = (from n in this.dbEntites.Termsandcondition
                                  where n.ShortDescription.Trim().ToLower() == searchText
                                  select n).ToList<TBL_TERMSANDCONDITION_SMT>();
                        break;

                    case "3":
                        source = (from n in this.dbEntites.Termsandcondition
                                  where n.ShortDescription.ToLower().Contains(searchText)
                                  select n).ToList<TBL_TERMSANDCONDITION_SMT>();
                        break;

                    case "50":
                        source = (from n in this.dbEntites.Termsandcondition
                                  where n.STATUS
                                  select n).ToList<TBL_TERMSANDCONDITION_SMT>();
                        break;

                    case "51":
                        source = (from n in this.dbEntites.Termsandcondition
                                  where !n.STATUS
                                  select n).ToList<TBL_TERMSANDCONDITION_SMT>();
                        break;

                }
            }
            else
            {
                source = this.dbEntites.Termsandcondition.ToList<TBL_TERMSANDCONDITION_SMT>();
            }
            int num = source.Count<TBL_TERMSANDCONDITION_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).CurrentPage = id;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CREATEDDATE descending
                              select n).Skip<TBL_TERMSANDCONDITION_SMT>(count).Take<TBL_TERMSANDCONDITION_SMT>(10).ToList<TBL_TERMSANDCONDITION_SMT>());
        }

        public string UpdateAboutusStatus(string status, int bannerid)
        {
            TBL_ABOUTUS_SMT tbl_aboutus_smt = this.dbEntites.Aboutus.SingleOrDefault<TBL_ABOUTUS_SMT>(n => n.ABOUTUSID == bannerid);
            if (status == "true")
            {
                tbl_aboutus_smt.STATUS = false;
            }
            else
            {
                tbl_aboutus_smt.STATUS = true;
            }
            this.dbEntites.SaveChanges();
            return "sucess";
        }

        public string UpdateContactusStatus(string status, int bannerid)
        {
            TBL_AdminCONTACTUS_SMT ncontactus_smt = this.dbEntites.AdminContactus.SingleOrDefault<TBL_AdminCONTACTUS_SMT>(n => n.CONTACTUSID == bannerid);
            if (status == "true")
            {
                ncontactus_smt.STATUS = false;
            }
            else
            {
                ncontactus_smt.STATUS = true;
            }
            this.dbEntites.SaveChanges();
            return "sucess";
        }

        public string UpdateTermsandconditionStatus(string status, int bannerid)
        {
            TBL_TERMSANDCONDITION_SMT tbl_termsandcondition_smt = this.dbEntites.Termsandcondition.SingleOrDefault<TBL_TERMSANDCONDITION_SMT>(n => n.TermsandConditionId == bannerid);
            if (status == "true")
            {
                tbl_termsandcondition_smt.STATUS = false;
            }
            else
            {
                tbl_termsandcondition_smt.STATUS = true;
            }
            this.dbEntites.SaveChanges();
            return "sucess";
        }
    }
    #endregion

    #region ContactQuriesController
    [AuthorizeUser]
    public class ContactQuriesController : BaseController
    {
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        // Methods
        public string Contactus_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                TBL_CONTACTUS_SMT entity = this.SmtDbEntites.Contactus.SingleOrDefault<TBL_CONTACTUS_SMT>(n => n.CONTACTID == bannerid);
                this.SmtDbEntites.Contactus.Remove(entity);
                this.SmtDbEntites.SaveChanges();
                base.TempData["messagealert"] = "Record Deleted Successfully";
            }
            return "success";
        }

        public ActionResult Contactus_List(int? id, string search)
        {
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "Others";
            List<TBL_CONTACTUS_SMT> source = new List<TBL_CONTACTUS_SMT>();
            var query = (from n in this.SmtDbEntites.Contactus select n).ToList<TBL_CONTACTUS_SMT>();
            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                }
            }
            else
            {
                source = this.SmtDbEntites.Contactus.ToList<TBL_CONTACTUS_SMT>();
            }
            int num = source.Count<TBL_CONTACTUS_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CREATEDDATE descending
                              select n).Skip<TBL_CONTACTUS_SMT>(count).Take<TBL_CONTACTUS_SMT>(10).ToList<TBL_CONTACTUS_SMT>());
        }

        #region Search Options

        public List<TBL_CONTACTUS_SMT> Startswith(List<TBL_CONTACTUS_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.FIRSTNAME.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {

                query = query.Where(n => n.EMAILID.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {

                query = query.Where(n => n.PHONENO.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "4")
            {

                query = query.Where(n => n.COMMENTS.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "5")
            {

                query = query.Where(n => n.REVIEW.ToLower().StartsWith(searchText)).ToList();

            }

            List<TBL_CONTACTUS_SMT> source = query.Select(x => x).ToList<TBL_CONTACTUS_SMT>();
            return source;
        }

        public List<TBL_CONTACTUS_SMT> EqualTo(List<TBL_CONTACTUS_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.FIRSTNAME.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "2")
            {

                query = query.Where(n => n.EMAILID.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "3")
            {

                query = query.Where(n => n.PHONENO.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "4")
            {

                query = query.Where(n => n.COMMENTS.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "5")
            {

                query = query.Where(n => n.REVIEW.ToLower() == searchText).ToList();

            }
            List<TBL_CONTACTUS_SMT> source = query.Select(x => x).ToList<TBL_CONTACTUS_SMT>();
            return source;
        }

        public List<TBL_CONTACTUS_SMT> Contains(List<TBL_CONTACTUS_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.FIRSTNAME.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {

                query = query.Where(n => n.EMAILID.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {

                query = query.Where(n => n.PHONENO.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "4")
            {

                query = query.Where(n => n.COMMENTS.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "5")
            {

                query = query.Where(n => n.REVIEW.ToLower().Contains(searchText)).ToList();

            }
            List<TBL_CONTACTUS_SMT> source = query.Select(x => x).ToList<TBL_CONTACTUS_SMT>();
            return source;
        }

        #endregion

        public ActionResult Index()
        {
            return base.View();
        }

        public string UpdatePriority(string priority)
        {
            string[] strArray = priority.TrimEnd(new char[] { '|' }).Split(new char[] { '|' });
            for (int i = 0; i < strArray.Length; i++)
            {
                int cimageid = Convert.ToInt32(strArray[i].Split(new char[] { ',' })[0].Replace("txtPriority", "").Trim());
                TBL_CONTACTUS_SMT tbl_contactus_smt = this.SmtDbEntites.Contactus.SingleOrDefault<TBL_CONTACTUS_SMT>(n => n.CONTACTID == cimageid);
                if (strArray[i].Split(new char[] { ',' })[1] != string.Empty)
                {
                    tbl_contactus_smt.REVIEW = strArray[i].Split(new char[] { ',' })[1];
                }
            }
            int num2 = this.SmtDbEntites.SaveChanges();
            return "sucess";
        }
    }
    #endregion

    #region ContactUsController
    public class ContactUsController : Controller
    {
        // Fields
        private SmartLabourEntities dbEntites = new SmartLabourEntities();

        // Methods
        [HttpGet]
        public ActionResult Contactus()
        {
            base.TempData["currentgetid"] = "idcontactus";
            List<TBL_AdminCONTACTUS_SMT> list = new List<TBL_AdminCONTACTUS_SMT>();
            list = (from n in this.dbEntites.AdminContactus
                    where n.STATUS
                    orderby n.CREATEDDATE
                    select n).Take<TBL_AdminCONTACTUS_SMT>(1).ToList<TBL_AdminCONTACTUS_SMT>();
            ((dynamic)base.ViewBag).Contactus = list;
            return base.View();
        }

        [HttpPost]
        public ActionResult Contactus(TBL_CONTACTUS_SMT objcontact)
        {
            try
            {
                CommonClass objCommon = new CommonClass();
                if (base.ModelState.IsValid)
                {
                    OrganizationSubAdminController OBJmAIL = new OrganizationSubAdminController();
                    SmartLabourServices objWs = new SmartLabourServices();
                    string Resule = objWs.SaveContactus(objcontact.FIRSTNAME, objcontact.LASTNAME, objcontact.EMAILID, objcontact.PHONENO, objcontact.COMMENTS);
                    objcontact.CREATEDDATE = new DateTime?(DateTime.Now);
                    this.dbEntites.Contactus.Add(objcontact);
                    this.dbEntites.SaveChanges();

                    string str = objCommon.SendingMail(objcontact.EMAILID, "Welcome to Smart Labour", objcontact.EMAILID, "", "", "Thank you for contacting us we will get back to you soon");
                    base.TempData["messagealert"] = "Thank you for contacting us we will get back to you soon";
                    return this.Redirect("/ContactUs");
                }
                return base.View(objcontact);
            }
            catch
            {
                return null;
            }
        }

        [HttpGet]
        public ActionResult MobileContactus()
        {
            ((dynamic)base.ViewBag).MobileDisplay = "1";
            base.TempData["currentgetid"] = "idcontactus";
            List<TBL_AdminCONTACTUS_SMT> list = new List<TBL_AdminCONTACTUS_SMT>();
            list = (from n in this.dbEntites.AdminContactus
                    where n.STATUS
                    orderby n.CREATEDDATE
                    select n).Take<TBL_AdminCONTACTUS_SMT>(1).ToList<TBL_AdminCONTACTUS_SMT>();
            ((dynamic)base.ViewBag).Contactus = list;
            return base.View();
        }

        [HttpPost]
        public ActionResult MobileContactus(TBL_CONTACTUS_SMT objcontact)
        {
            try
            {
                ((dynamic)base.ViewBag).MobileDisplay = "1";
                if (base.ModelState.IsValid)
                {
                    objcontact.CREATEDDATE = new DateTime?(DateTime.Now);
                    this.dbEntites.Contactus.Add(objcontact);
                    this.dbEntites.SaveChanges();
                    base.TempData["messagealert"] = "Thank you for contactus we will contact you soon";
                    return base.RedirectToAction("/contactus");
                }
                return base.View(objcontact);
            }
            catch
            {
                return this.Redirect("/Home/index");
            }
        }
    }
    #endregion

    #region CourseController

    [AuthorizeUser]
    public class CourseController : BaseController
    {
        OrganizationSubAdminController objOrg = new OrganizationSubAdminController();
        CommonClass objCommon = new CommonClass();
        CategoryController objCategory = new CategoryController();
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        // Methods
        [HttpGet, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Add()
        {
            Course ObjCourse = new Course();
            int UId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId=0;
           if (UId == 1)
            {
                OrgId = 1;//(from m in this.SmtDbEntites.Organisation where m.OrganisationName.ToLower().Trim() == ObjCourse.OrganisationName.ToLower().Trim() select m.OrgId).FirstOrDefault();       
            }
           else
           {
               ((dynamic)base.ViewBag).OrgNameType = "Text";
               OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UId select m.OrgId).FirstOrDefault();
               string OrgName = objCommon.GetOrganizartionNameFromID(OrgId);     //objOrg.GetOrganizationName(Oid);
               ((dynamic)base.ViewBag).GetOrganizationName = OrgName;
               ObjCourse.OrganisationName = OrgName;      
           }

           ((dynamic)base.ViewBag).CategoryList = objCategory.getCategoryList(OrgId);
           ((dynamic)base.ViewBag).SubCategoryList = objCategory.getSubCategoryList(Convert.ToInt32(ObjCourse.CategoryId));

           ObjCourse.STATUS = true;
           ObjCourse.IsEmbededURL = true;
            base.TempData["currentgetidss"] = "LearnEarn";
            ((dynamic)base.ViewBag).CourseTypelst = this.getCourseType();
            return base.View(ObjCourse);
        }

        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Add(Course ObjCourse)
        {
            try
            {
                base.TempData["currentgetidss"] = "LearnEarn";
                ((dynamic)base.ViewBag).CourseTypelst = this.getCourseType();
                int Orgid = 0;
                 int UId = Convert.ToInt32(Session["USERID"].ToString());
                if (UId == 1)
                {
                    Orgid = (from m in this.SmtDbEntites.Organisation where m.OrganisationName.ToLower().Trim() == ObjCourse.OrganisationName.ToLower().Trim() select m.OrgId).FirstOrDefault();
                    if (ObjCourse.OrganisationName == string.Empty || ObjCourse.OrganisationName ==null)
                    {
                        Orgid = 1;
                    }
                }
                else
                {
                    ((dynamic)base.ViewBag).OrgNameType = "Text";
                    Orgid = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UId select m.OrgId).FirstOrDefault();                  
                    ObjCourse.OrgId = Orgid;
                   
                }

                ((dynamic)base.ViewBag).CategoryList = objCategory.getCategoryList(Orgid);
                ((dynamic)base.ViewBag).SubCategoryList = objCategory.getSubCategoryList(Convert.ToInt32(ObjCourse.CategoryId));

                if (ObjCourse.SubCategoryName == string.Empty || ObjCourse.SubCategoryName == null)
                {
                    int count = GetSubcategoryCount1(ObjCourse.CategoryName, Orgid);
                    if (count > 0)
                    {
                        ((dynamic)base.ViewBag).SubCategoryMsg = "Please Select Sub Category";
                        return base.View(ObjCourse);
                    }
                }

                //Addded For Sub Admin Privilege       
               
                //End         
              //  int CategoryId = (from m in this.SmtDbEntites.Category where m.CategoryName.ToLower().Trim() == ObjCourse.CategoryName.ToLower().Trim() && m.OrgId==Orgid select m.CategoryId).FirstOrDefault();
               // int? SubCategoryId = (from m in this.SmtDbEntites.SubCategory where m.SubCategoryName.ToLower().Trim() == ObjCourse.SubCategoryName.ToLower().Trim() && m.CategoryId == CategoryId select m.SubCategoryId).FirstOrDefault();

                if (Orgid == 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Organization does not Exists";
                    return base.View(ObjCourse);
                }
                ((dynamic)base.ViewBag).CategoryList = objCategory.getCategoryList(Orgid);
                ((dynamic)base.ViewBag).SubCategoryList = objCategory.getSubCategoryList(Convert.ToInt32(ObjCourse.CategoryId));
               
                if (base.ModelState.IsValid)
                {
                    List<Course> model = (from n in this.SmtDbEntites.Courses
                                          where n.CourseName.ToLower().Trim() == ObjCourse.CourseName && n.OrgId == Orgid
                                          select n).ToList<Course>();
                    if (model.Count > 0)
                    {
                        ((dynamic)base.ViewBag).messagealert = "Course Already Exists";
                        return base.View(ObjCourse);
                    }
                    ObjCourse.OrgId = Orgid;
                    ObjCourse.CategoryId = ObjCourse.CategoryId;
                    if (ObjCourse.SubCategoryId==0)
                    {
                        ObjCourse.SubCategoryId = null;
                    }   
                    ObjCourse.CREATEDDATE = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString()));
                    ObjCourse.CREATEDBY = base.Session["USERID"].ToString();
                    if (ObjCourse.IsEmbededURL==true)
                    {
                       ObjCourse.MutlticourseDesc = ObjCourse.MutlticourseDesc;
                    }
                    else
                    {
                        ObjCourse.MutlticourseDesc = ObjCourse.hdnKeywords;
                    }                   
                  //  ObjCourse.QuestionTitle = ObjCourse.QuestionTitle;
                    this.SmtDbEntites.Courses.Add(ObjCourse);
                    this.SmtDbEntites.SaveChanges();
                //    int courseID = ObjCourse.CourseID;

                    if (ObjCourse.IsEmbededURL == true)
                    {
                        TBL_COURSEDTL_SMT entity = new TBL_COURSEDTL_SMT
                        {
                            DESCRIPTION = ObjCourse.MutlticourseDesc,
                            COURSEID = ObjCourse.CourseID,
                            CREATEDDATE = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString())),
                            CREATEDBY = base.Session["USERNAME"].ToString()
                        };
                        this.SmtDbEntites.CourseDTLs.Add(entity);
                        this.SmtDbEntites.SaveChanges();
                    }
                    else
                    {
                        if ((ObjCourse.hdnKeywords != "") && (ObjCourse.hdnKeywords != null))
                        {
                            this.SaveMultiplecourse(ObjCourse.hdnKeywords, ObjCourse.CourseID);
                        }
                    }

                    base.TempData["messagealert"] = "Course Added Successfully";
                    return base.RedirectToAction("List");
                }
                return base.View(ObjCourse);
            }
            catch (DbEntityValidationException dbEx)
            {
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        Trace.TraceInformation(
                              "Class: {0}, Property: {1}, Error: {2}",
                              validationErrors.Entry.Entity.GetType().FullName,
                              validationError.PropertyName,
                              validationError.ErrorMessage);
                    }
                }
                return base.View();
            }
        }

        public string Courses_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                Course entity = this.SmtDbEntites.Courses.SingleOrDefault<Course>(n => n.CourseID == bannerid);
                this.SmtDbEntites.Courses.Remove(entity);
                this.SmtDbEntites.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        public ActionResult Courses_Delete(int id)
        {
            Course entity = this.SmtDbEntites.Courses.SingleOrDefault<Course>(n => n.CourseID == id);
            this.SmtDbEntites.Courses.Remove(entity);
            this.SmtDbEntites.SaveChanges();
            base.TempData["messagealert"] = "Courses Deleted Successfully";
            return base.RedirectToAction("Courses_List");
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpGet]
        public ActionResult Edit(int id)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            Course model = this.SmtDbEntites.Courses.SingleOrDefault<Course>(n => n.CourseID == id);
            int OrgId = (from m in this.SmtDbEntites.Courses where m.CourseID == id select m.OrgId).FirstOrDefault();
            string OrgName = (from m in this.SmtDbEntites.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();
           // model.CategoryName = (from m in this.SmtDbEntites.Category where m.CategoryId == model.CategoryId select m.CategoryName).FirstOrDefault();
          //  model.SubCategoryName = (from m in this.SmtDbEntites.SubCategory where m.SubCategoryId == model.SubCategoryId select m.SubCategoryName).FirstOrDefault();

             if (UserId==1)
            {
                model.OrganisationName = OrgName;
            }
            else
            {
                ((dynamic)base.ViewBag).OrgNameType = "Text";
                int UId = Convert.ToInt32(Session["USERID"].ToString());
                ((dynamic)base.ViewBag).GetOrganizationName = OrgName;

            }
             ((dynamic)base.ViewBag).CategoryList = objCategory.getCategoryList(OrgId);
             ((dynamic)base.ViewBag).SubCategoryList = objCategory.getSubCategoryList(Convert.ToInt32(model.CategoryId));
            base.TempData["currentgetidss"] = "LearnEarn";
            ((dynamic)base.ViewBag).CourseTypelst = this.getCourseType();
            return base.View(model);
        }

        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Edit(int id, Course objCourse)
        {
            try
            {
                int UId = Convert.ToInt32(Session["USERID"].ToString());
                int OrgId = 0;

                if (UId == 1)
                {
                    OrgId = (from m in this.SmtDbEntites.Organisation where m.OrganisationName.ToLower().Trim() == objCourse.OrganisationName.ToLower().Trim() select m.OrgId).FirstOrDefault();
                    if (objCourse.OrganisationName == string.Empty || objCourse.OrganisationName == null)
                    {
                        OrgId = 1;
                    }
                }
                else
                {
                    OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UId select m.OrgId).FirstOrDefault();
                    string OrgName = (from m in this.SmtDbEntites.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();
                    ((dynamic)base.ViewBag).GetOrganizationName = OrgName;
                }
                base.TempData["currentgetidss"] = "LearnEarn";
                ((dynamic)base.ViewBag).CourseTypelst = this.getCourseType();

             
                if (objCourse.SubCategoryName == string.Empty || objCourse.SubCategoryName == null)
                {
                    int count = GetSubcategoryCount1(objCourse.CategoryName,OrgId);
                    if (count > 0)
                    {
                        ((dynamic)base.ViewBag).SubCategoryMsg = "Please select Sub Category";
                        return base.View(objCourse);
                    }
                }

                if (OrgId == 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Organization does not Exists";
                    return base.View(objCourse);
                }
          
                ((dynamic)base.ViewBag).CategoryList = objCategory.getCategoryList(OrgId);
                ((dynamic)base.ViewBag).SubCategoryList = objCategory.getSubCategoryList(Convert.ToInt32(objCourse.CategoryId));
                

                if (base.ModelState.IsValid)
                {
                    if ((from n in this.SmtDbEntites.Courses
                         where (n.CourseID != id) && (n.CourseName.ToLower().Trim() == objCourse.CourseName.ToLower().Trim()&& n.OrgId==OrgId ) 
                         select n).ToList<Course>().Count > 0)
                    {
                        ((dynamic)base.ViewBag).messagealert = "Course  Already Exists";
                        return base.View(objCourse);
                    }

                    Course course = this.SmtDbEntites.Courses.SingleOrDefault<Course>(n => n.CourseID == id);
                    course.CategoryId = objCourse.CategoryId;
                    if (objCourse.SubCategoryId==0)
                    {
                        course.SubCategoryId = null;
                    }
                  
                    course.CourseTypeID = objCourse.CourseTypeID;
                    course.CourseName = objCourse.CourseName;
                    course.CategoryName = "Temp";
                    course.OrganisationName = "Temp";
                    course.STATUS = objCourse.STATUS;
                    course.OrgId = OrgId;
                    course.IsEmbededURL=objCourse.IsEmbededURL;
                    //  course.OrganisationName = OrgName;
                    course.QuestionTitle = objCourse.QuestionTitle;
                    if (objCourse.IsEmbededURL == true)
                    {
                        course.MutlticourseDesc = objCourse.MutlticourseDescURL;
                    }
                    else
                    {
                        course.MutlticourseDesc = objCourse.hdnKeywords;
                    }
                    //course.MutlticourseDesc = objCourse.hdnKeywords;
                    course.MODIFIEDBY = base.Session["USERID"].ToString();
                    course.MODIFIEDDATE = new DateTime?(DateTime.Now);
                    this.SmtDbEntites.SaveChanges();


                    if (objCourse.IsEmbededURL == true)
                    {
                        this.RemoveKeywords(id);
                        TBL_COURSEDTL_SMT entity = new TBL_COURSEDTL_SMT
                        {
                            DESCRIPTION = objCourse.MutlticourseDescURL,
                            COURSEID = id,
                            CREATEDDATE = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString())),
                            CREATEDBY = base.Session["USERNAME"].ToString(),
                            IsEmbededURL = objCourse.IsEmbededURL
                        };
                        this.SmtDbEntites.CourseDTLs.Add(entity);
                        this.SmtDbEntites.SaveChanges();
                    }
                    else
                    {
                        if ((objCourse.hdnKeywords != "") && (objCourse.hdnKeywords != null))
                        {
                            this.SaveMultiplecourse(objCourse.hdnKeywords, id);
                        }
                    }

                    base.TempData["messagealert"] = " Course Updated Successfully";
                    return base.RedirectToAction("List");
                }
                return base.View(objCourse);
            }
            catch (DbEntityValidationException dbEx)
            {
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        Trace.TraceInformation(
                              "Class: {0}, Property: {1}, Error: {2}",
                              validationErrors.Entry.Entity.GetType().FullName,
                              validationError.PropertyName,
                              validationError.ErrorMessage);
                    }
                }
                return base.View();
            }
        }

        public SelectList getCourseType()
        {
            return new SelectList(from m in
                                      (from m in this.SmtDbEntites.CourseTypes select m).AsEnumerable<CourseType>()
                                  orderby m.CourseTypeID
                                  select new SelectListItem { Text = m.CourseTypeName, Value = m.CourseTypeID.ToString() }, "Value", "Text");
        }

        /// <summary>
        /// Course List
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        public ActionResult List(int? id, string search)
        {
            try
            {
                int UserId = Convert.ToInt32(Session["USERID"].ToString());
                int OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
                if (!id.HasValue)
                {
                    id = 1;
                }
                base.TempData["currentgetidss"] = "LearnEarn";
                if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
                {
                    ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
                }
                List<Course> source = new List<Course>();               
                if (UserId == 1)
                {
                    source = (from n in this.SmtDbEntites.Courses
                             select n).ToList();

                }
                else
                {
                    source = (from n in this.SmtDbEntites.Courses
                             where n.OrgId == OrgId
                             select n).ToList();

                }
                if ((search != null) && (search != string.Empty))
                {                   
                    string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                    string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                    switch (search.Split(new char[] { ',' })[1].Trim())
                    {
                        case "1":
                            source = Startswith(source, searchBy, searchText);
                            break;

                        case "2":
                            source = EqualTo(source, searchBy, searchText);
                            break;

                        case "3":
                            source = Contains(source, searchBy, searchText);
                            break;

                        case "50":
                            source = Startswith(source, "Active", searchText);
                            break;

                        case "51":
                            source = Startswith(source, "InActive", searchText);
                            break;
                    }
                }
               
                int num = source.Count<Course>();
                int num2 = 0;
                if ((num % 10) == 0)
                {
                    num2 = num / 10;
                }
                else
                {
                    num2 = (num / 10) + 1;
                }
                if ((search != null) && (search != string.Empty))
                {
                    base.ViewData["SearchText"] = search;
                    if (num2 < id)
                    {
                        id = 1;
                    }
                }
                else
                {
                    base.ViewData["SearchText"] = "";
                }
                ((dynamic)base.ViewBag).totalnumber = num2;
                ((dynamic)base.ViewBag).TotalRecordcount = num;
                ((dynamic)base.ViewBag).CurrentPage = id;
                int count = (Convert.ToInt32(id) * 10) - 10;              
                    return base.View((from n in source
                                      orderby n.CREATEDDATE descending
                                      select n).Skip<Course>(count).Take<Course>(10).ToList<Course>());
               
            }
            catch
            {
                List<Course> source = new List<Course>();
                ((dynamic)base.ViewBag).totalnumber = 0;
                ((dynamic)base.ViewBag).TotalRecordcount = 0;
                ((dynamic)base.ViewBag).CurrentPage = 0;
                return base.View(source);
            }
            //catch (DbEntityValidationException dbEx)
            //{
            //    Exception raise = dbEx;
            //    foreach (var validationErrors in dbEx.EntityValidationErrors)
            //    {
            //        foreach (var validationError in validationErrors.ValidationErrors)
            //        {
            //            string message = string.Format("{0}:{1}",
            //                validationErrors.Entry.Entity.ToString(),
            //                validationError.ErrorMessage);
            //            // raise a new exception nesting  
            //            // the current instance as InnerException  
            //            raise = new InvalidOperationException(message, raise);
            //        }
            //    }
            //    //string str = ex.ToString() + "|||";
            //    List<Course> source = new List<Course>();
            //    ((dynamic)base.ViewBag).totalnumber = 0;
            //    ((dynamic)base.ViewBag).TotalRecordcount = 0;
            //    ((dynamic)base.ViewBag).CurrentPage = 0;
            //    return base.View(source);
            //}
        }

        #region Search Options

        /// <summary>
        /// Search value starts with
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<Course> Startswith(List<Course> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {              
                query = query.Where(n => n.coursetype.CourseTypeName.ToLower().Trim().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.CourseName.ToLower().Trim().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Trim().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.Category.CategoryName.ToLower().Trim().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n =>n.SubCategoryId!=null && n.SubCategory.SubCategoryName.ToLower().Trim().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => n.CREATEDDATE!=null && Convert.ToString(n.CREATEDDATE).ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "Active")
            {
                query = query.Where(n => n.STATUS == true).ToList();
            }
            else if (SearchBy == "InActive")
            {
                query = query.Where(n => n.STATUS == false).ToList();
            }
            List<Course> source = query.Select(x => x).ToList<Course>();
            return source;
        }

        /// <summary>
        /// search value Equalto
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<Course> EqualTo(List<Course> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.coursetype.CourseTypeName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.CourseName.ToLower() == searchText).ToList();               
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n =>n.Category.CategoryName.ToLower().Trim()==(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.SubCategoryId != null && n.SubCategory.SubCategoryName.ToLower().Trim()==(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => n.CREATEDDATE != null && Convert.ToString(n.CREATEDDATE).ToLower()==(searchText)).ToList();
            }
            List<Course> source = query.Select(x => x).ToList<Course>();
            return source;
        }

        /// <summary>
        /// Search contains
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<Course> Contains(List<Course> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.coursetype.CourseTypeName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.CourseName.ToLower().Contains(searchText)).ToList();               
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.Category.CategoryName.ToLower().Trim().Contains(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.SubCategoryId != null && n.SubCategory.SubCategoryName.ToLower().Trim().Contains(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => n.CREATEDDATE != null && Convert.ToString(n.CREATEDDATE).ToLower().Contains(searchText)).ToList();
            }
            List<Course> source = query.Select(x => x).ToList<Course>();
            return source;
        }

        #endregion

        public void RemoveKeywords(int courseid)
        {
            List<TBL_COURSEDTL_SMT> list = (from n in this.SmtDbEntites.CourseDTLs
                                            where n.COURSEID == courseid
                                            select n).ToList<TBL_COURSEDTL_SMT>();
            for (int i = 0; i < list.Count; i++)
            {
                int ProDtlID = list[i].COURSEDTLID;
                TBL_COURSEDTL_SMT entity = this.SmtDbEntites.CourseDTLs.SingleOrDefault<TBL_COURSEDTL_SMT>(n => n.COURSEDTLID == ProDtlID);
                this.SmtDbEntites.CourseDTLs.Remove(entity);
            }
            this.SmtDbEntites.SaveChanges();
        }

        public void SaveEditKeywords(string hdnKeywords, int courseid)
        {
            try
            {
                this.RemoveKeywords(courseid);
                if ((hdnKeywords != null) && (hdnKeywords != ""))
                {
                    string[] strArray = hdnKeywords.Split(new char[] { '~' });
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        if (strArray[i] != "")
                        {
                            string str = strArray[i];
                            if (str.Length > 0)
                            {
                                TBL_COURSEDTL_SMT entity = new TBL_COURSEDTL_SMT
                                {
                                    DESCRIPTION = str,
                                    COURSEID = courseid,
                                    CREATEDDATE = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString())),
                                    CREATEDBY = base.Session["USERNAME"].ToString()
                                };
                                this.SmtDbEntites.CourseDTLs.Add(entity);
                                this.SmtDbEntites.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch
            {
            }
        }

        public void SaveMultiplecourse(string hdnKeywords, int Productid)
        {
            try
            {
                if ((hdnKeywords != null) && (hdnKeywords != ""))
                {
                    string[] strArray = hdnKeywords.Split(new char[] { '~' });
                    RemoveKeywords(Productid);

                    for (int i = 0; i < strArray.Length; i++)
                    {
                        if (strArray[i] != "")
                        {
                            string str = strArray[i];
                            if (str.Length > 0)
                            {
                                TBL_COURSEDTL_SMT entity = new TBL_COURSEDTL_SMT
                                {
                                    DESCRIPTION = str,
                                    COURSEID = Productid,
                                    CREATEDDATE = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString())),
                                    CREATEDBY = base.Session["USERNAME"].ToString()
                                };
                                this.SmtDbEntites.CourseDTLs.Add(entity);
                                this.SmtDbEntites.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (DbEntityValidationException exception)
            {
                Exception innerException = exception;
                foreach (DbEntityValidationResult result in exception.EntityValidationErrors)
                {
                    foreach (DbValidationError error in result.ValidationErrors)
                    {
                        innerException = new InvalidOperationException(string.Format("{0}:{1}", result.Entry.Entity.ToString(), error.ErrorMessage), innerException);
                    }
                }
            }
        }

        public string UpdateStatus(string status, int bannerid)
        {
            Course course = this.SmtDbEntites.Courses.SingleOrDefault<Course>(n => n.CourseID == bannerid);
            if (status == "true")
            {
                course.STATUS = false;
            }
            else
            {
                course.STATUS = true;
            }
            course.CategoryName = "Dummy";
            this.SmtDbEntites.SaveChanges();
            return "sucess";
        }

        public ActionResult View(int id)
        {
            base.TempData["currentgetidss"] = "LearnEarn";
            Course model = this.SmtDbEntites.Courses.Include("coursetype").SingleOrDefault<Course>(n => n.CourseID == id);
            //TBL_COURSEDTL_SMT Course = new TBL_COURSEDTL_SMT();
            List<TBL_COURSEDTL_SMT> source = new List<TBL_COURSEDTL_SMT>();
            source = (from n in this.SmtDbEntites.CourseDTLs
                      where n.COURSEID == id
                      select n).ToList();
            ((dynamic)base.ViewBag).coursedtl = (from n in this.SmtDbEntites.CourseDTLs
                                                 where n.COURSEID == id
                                                 select n).ToList<TBL_COURSEDTL_SMT>();
            return base.View(model);
        }

        public int GetSubcategoryCount(string Category)
        {
            int CategoryId = 0;
            CategoryId = (from m in this.SmtDbEntites.Category where m.CategoryName.ToLower().Trim() == Category.ToLower().Trim() && m.Status == true select m.CategoryId).FirstOrDefault();
            if (CategoryId == 0)
            {
                return -1;
            }
            int count = 0;
            count = (from n in this.SmtDbEntites.SubCategory
                     join m in this.SmtDbEntites.Category on n.CategoryId equals m.CategoryId
                     where m.CategoryName.ToLower().Trim() == Category.ToLower().Trim() && m.Status == true && n.Status == true
                     select n).Count();
            return count;
        }


        ///// <summary>
        ///// Bind for Organization Names
        ///// </summary>
        ///// <param name="term"></param>
        ///// <returns></returns>
        //public SelectList GetOrganizationNamelist()
        //{
        //    return new SelectList(from m in
        //                              (from t1 in this.SmtDbEntites.Organisation
        //                               join t2 in
        //                                   this.SmtDbEntites.Courses on t1.OrgId equals t2.OrgId
        //                               select new { t1.OrgId, t2.OrganisationName }).Distinct()
        //                          orderby m.OrganisationName
        //                          select new SelectListItem { Text = m.OrganisationName, Value = m.OrgId.ToString() }, "Value", "Text");
        //}

        public int GetSubcategoryCount1(string Category, int Orgid)
        {
            int CategoryId = 0;
            CategoryId = (from m in this.SmtDbEntites.Category where m.CategoryName.ToLower().Trim() == Category.ToLower().Trim() && m.OrgId==Orgid select m.CategoryId).SingleOrDefault();
            if (CategoryId == 0)
            {
                return -1;
            }
            int count = 0;         
            count = (from n in this.SmtDbEntites.SubCategory
                     join m in this.SmtDbEntites.Category on n.CategoryId equals m.CategoryId
                     where m.CategoryName.ToLower().Trim() == Category.ToLower().Trim() && m.Status == true && n.Status == true && m.OrgId==Orgid
                     select n).Count();          
            return count;
        }

        public int GetSubcategoryCount2(string Category, string OrgName)
        {
            int Orgid = 0;
            int UId = Convert.ToInt32(Session["USERID"].ToString());
            if (UId == 1)
            {
                Orgid = (from m in this.SmtDbEntites.Organisation where m.OrganisationName.ToLower().Trim() == OrgName.ToLower().Trim() select m.OrgId).FirstOrDefault();
            }
            else
            {
                Orgid = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UId select m.OrgId).FirstOrDefault(); 
            }

            int CategoryId = 0;
            CategoryId = (from m in this.SmtDbEntites.Category where m.CategoryName.ToLower().Trim() == Category.ToLower().Trim() && m.OrgId==Orgid select m.CategoryId).SingleOrDefault();
            if (CategoryId == 0)
            {
                return -1;
            }
            int count = 0;         
            count = (from n in this.SmtDbEntites.SubCategory
                     join m in this.SmtDbEntites.Category on n.CategoryId equals m.CategoryId
                     where m.CategoryName.ToLower().Trim() == Category.ToLower().Trim() && m.Status == true && n.Status == true && m.OrgId==Orgid
                     select n).Count();          
            return count;
        }



        
    }
    #endregion

    #region DemoController
    public class DemoController : Controller
    {
        // Methods
        public ActionResult Demo()
        {
            return base.View();
        }

        public JsonResult GetData()
        {
            return base.Json("Hi", JsonRequestBehavior.AllowGet);
        }
    }
    #endregion

    #region DisbuteController

    [AuthorizeUser]
    public class DisbuteController : BaseController
    {
        // Fields
        private SmartLabourEntities dbEntites = new SmartLabourEntities();
       
        /// <summary>
        /// Dispute List 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Disbute_List(int? id, string search)
        {
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "PhoneDetails";
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"].ToString()!= string.Empty))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<DonatePhone> source = new List<DonatePhone>();
            source = this.PhoneRequestHistory();
            if ((search != null) && (search != string.Empty))
            {              
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":

                        source = Startswith(source, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(source, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(source, searchBy, searchText);
                        break;
                }
            }
            else
            {
                source = source.ToList<DonatePhone>();
            }
            int num = source.Count<DonatePhone>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.phoneAssignlabour.PhoneAssignedID descending
                              select n).Skip<DonatePhone>(count).Take<DonatePhone>(10).ToList<DonatePhone>());
        }

        #region Search Options

        /// <summary>
        /// Search Starts with Values
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<DonatePhone> Startswith(List<DonatePhone> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.PhoneOwnerName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.phoneAssignlabour.CourierDetail.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.BrandName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.IMEANumber.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.ModelNo.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => Convert.ToString(n.phoneAssignlabour.PhoneAssignedID).ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "7")
            {
                query = query.Where(n => Convert.ToString(n.createdDate).ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "8")
            {
                query = query.Where(n => n.phoneAssignlabour.disbuteFeedBack.ToLower().StartsWith(searchText)).ToList();
            } 
            else if (SearchBy == "9")
            {
                query = query.Where(n => n.DisbuteReview.ToLower().StartsWith(searchText)).ToList();
            }
            List<DonatePhone> source = query.Select(x => x).ToList<DonatePhone>();
            return source;
        }

        /// <summary>
        /// Search by equal to Search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<DonatePhone> EqualTo(List<DonatePhone> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.PhoneOwnerName.ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.phoneAssignlabour.CourierDetail.ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.BrandName.ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.IMEANumber.ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.ModelNo.ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => Convert.ToString(n.phoneAssignlabour.PhoneAssignedID).ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "7")
            {
                query = query.Where(n => Convert.ToString(n.createdDate).ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "8")
            {
                query = query.Where(n => n.phoneAssignlabour.disbuteFeedBack.ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "9")
            {
                query = query.Where(n => n.DisbuteReview.ToLower()==(searchText)).ToList();
            }
            List<DonatePhone> source = query.Select(x => x).ToList<DonatePhone>();
            return source;
        }

        /// <summary>
        /// Search by Contains a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<DonatePhone> Contains(List<DonatePhone> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.PhoneOwnerName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.phoneAssignlabour.CourierDetail.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.BrandName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.IMEANumber.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.ModelNo.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => Convert.ToString(n.phoneAssignlabour.PhoneAssignedID).ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "7")
            {
                query = query.Where(n => Convert.ToString(n.createdDate).ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "8")
            {
                query = query.Where(n => n.phoneAssignlabour.disbuteFeedBack.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "9")
            {
                query = query.Where(n => n.DisbuteReview.ToLower().Contains(searchText)).ToList();
            }
            List<DonatePhone> source = query.Select(x => x).ToList<DonatePhone>();
            return source;
        }

        #endregion

        /// <summary>
        /// Get Dispurte List from DB
        /// </summary>
        /// <returns></returns>
        public List<DonatePhone> PhoneRequestHistory()
        {
            int UId = Convert.ToInt32(Session["USERID"].ToString());
            base.TempData["currentgetid"] = "idlabour";
            SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ConnectionString);
            connection.Open();
            string cmdText = "pro_DisbutedTransactionList";
            SqlCommand command = new SqlCommand(cmdText, connection);
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@UserId", UId);
            List<DonatePhone> list = new List<DonatePhone>();
            using (SqlDataReader reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    DonatePhone item = new DonatePhone
                    {
                        phoneAssignlabour = new PhoneAsssignedToLabour()
                    };
                    if (reader["Name"] != DBNull.Value)
                    {
                        item.PhoneOwnerName = reader["Name"].ToString();
                    }
                    if (reader["EmailID"] != DBNull.Value)
                    {
                        item.PhoneColor = reader["EmailID"].ToString();
                    }
                    if (reader["BrandName"] != DBNull.Value)
                    {
                        item.BrandName = reader["BrandName"].ToString();
                    }
                    if (reader["IMEANumber"] != DBNull.Value)
                    {
                        item.IMEANumber = reader["IMEANumber"].ToString();
                    }
                    if (reader["ModelNo"] != DBNull.Value)
                    {
                        item.ModelNo = reader["ModelNo"].ToString();
                    }
                    if (reader["LabourID"] != DBNull.Value)
                    {
                        item.phoneAssignlabour.CourierDetail = reader["LabourID"].ToString();
                    }
                    if (reader["DeliveredDate"] != DBNull.Value)
                    {
                        item.phoneAssignlabour.DeliveredDate = new DateTime?(Convert.ToDateTime(reader["DeliveredDate"].ToString()));
                    }
                    if (reader["TransactionID"] != DBNull.Value)
                    {
                        item.phoneAssignlabour.PhoneAssignedID = Convert.ToInt32(reader["TransactionID"].ToString());
                    }
                    if (reader["PhoneStatus"] != DBNull.Value)
                    {
                        item.phoneAssignlabour.IsLabourReceivedPhone = new bool?(Convert.ToBoolean(reader["PhoneStatus"].ToString()));
                    }
                    if (reader["FeedBack"] != null)
                    {
                        item.phoneAssignlabour.disbuteFeedBack = reader["FeedBack"].ToString();
                    }
                    if (reader["FeedBack"] != null)
                    {
                        item.phoneAssignlabour.disbuteFeedBack = reader["FeedBack"].ToString();
                    }
                    if (reader["FeedBack"] != null)
                    {
                        item.DisbuteReview = reader["REVIEW"].ToString();
                    }
                    if (reader["FeedBack"] != null)
                    {
                        item.DisbuteReviewId = Convert.ToInt32(reader["DisbuteID"].ToString());
                    }
                    if (reader["FeedBack"] != null)
                    {
                        item.createdDate = reader["createdDate"].ToString();
                    }
                    list.Add(item);
                }
            }
            connection.Close();
            return list;
        }

        /// <summary>
        /// Update Admin reivews 
        /// </summary>
        /// <param name="priority"></param>
        /// <returns></returns>
        public string UpdatePriority(string priority)
        {
            string[] strArray = priority.TrimEnd(new char[] { '|' }).Split(new char[] { '|' });
            for (int i = 0; i < strArray.Length; i++)
            {
                int cimageid = Convert.ToInt32(strArray[i].Split(new char[] { ',' })[0].Replace("txtPriority", "").Trim());
                TBL_DISBUTETRANSACTION_SMT tbl_disbutetransaction_smt = this.dbEntites.DisbuteTransaction.SingleOrDefault<TBL_DISBUTETRANSACTION_SMT>(n => n.DisbuteID == cimageid);
                if (strArray[i].Split(new char[] { ',' })[1] != string.Empty)
                {
                    tbl_disbutetransaction_smt.REVIEW = strArray[i].Split(new char[] { ',' })[1];
                }
            }
            int num2 = this.dbEntites.SaveChanges();
            return "sucess";
        }
    }

    #endregion

    #region DonatePhoneController

    public class DonatePhoneController : BaseController
    {
        // Fields
        private SmartLabourEntities objSmartLabourEntities = new SmartLabourEntities();

        // Methods
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpGet]
        public ActionResult AddCourierDetails(int id)
        {
            base.TempData["currentgetidss"] = "PhoneDetails";
            DonatePhone model = this.objSmartLabourEntities.DonatePhone.SingleOrDefault<DonatePhone>(n => n.DonateID == id);
            return base.View(model);
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpPost]
        public ActionResult AddCourierDetails(int id, DonatePhone DonatePhone)
        {
            try
            {
                base.TempData["currentgetidss"] = "PhoneDetails";
                DonatePhone objDonatePhone = this.objSmartLabourEntities.DonatePhone.SingleOrDefault<DonatePhone>(n => n.DonateID == id);
                objDonatePhone.CourierDetail = DonatePhone.CourierDetail;
                objDonatePhone.DonatedDate = new DateTime?(DateTime.Now);
                objDonatePhone.IsPhoneConfirmation = DonatePhone.IsPhoneConfirmation;
                objDonatePhone.IsPhoneAcceptedByAdmin = DonatePhone.IsPhoneAcceptedByAdmin;
                objDonatePhone.Pincode = DonatePhone.Pincode;
                objDonatePhone.City = DonatePhone.City;
                objDonatePhone.State = DonatePhone.State;
                objDonatePhone.Country = DonatePhone.Country;
                this.objSmartLabourEntities.SaveChanges();
                int userId = objDonatePhone.UserID;
                TBL_Sponsor_Notifications entity = new TBL_Sponsor_Notifications();
                if (!(((!DonatePhone.IsPhoneConfirmation || (DonatePhone.CourierDetail == null)) || DonatePhone.IsPhoneAcceptedByAdmin) || DonatePhone.IsPhoneAssignedToLabour))
                {
                    entity = this.objSmartLabourEntities.SponsorNotification.SingleOrDefault<TBL_Sponsor_Notifications>(n => n.DonateID == objDonatePhone.DonateID);
                    entity.IsPhoneConfirmation = DonatePhone.IsPhoneConfirmation;
                    entity.IsCourrierconfirmation = true;
                    entity.CREATEDDATE = new DateTime?(DateTime.Now);
                    this.objSmartLabourEntities.SponsorNotification.Add(entity);
                    this.objSmartLabourEntities.SaveChanges();
                }
                else if (!(((!DonatePhone.IsPhoneConfirmation || (DonatePhone.CourierDetail == null)) || !DonatePhone.IsPhoneAcceptedByAdmin) || DonatePhone.IsPhoneAssignedToLabour))
                {
                    entity.DonateID = objDonatePhone.DonateID;
                    entity.UserID = objDonatePhone.UserID;
                    entity.IsPhoneConfirmation = DonatePhone.IsPhoneConfirmation;
                    entity.IsCourrierconfirmation = true;
                    entity.IsPhoneAcceptedByAdmin = DonatePhone.IsPhoneAcceptedByAdmin;
                    entity.CREATEDDATE = new DateTime?(DateTime.Now);
                    this.objSmartLabourEntities.SponsorNotification.Add(entity);
                    this.objSmartLabourEntities.SaveChanges();
                }
                else if ((DonatePhone.IsPhoneConfirmation && DonatePhone.IsPhoneAcceptedByAdmin) && DonatePhone.IsPhoneAssignedToLabour)
                {
                    entity.DonateID = objDonatePhone.DonateID;
                    entity.UserID = objDonatePhone.UserID;
                    entity.IsPhoneConfirmation = DonatePhone.IsPhoneConfirmation;
                    entity.IsPhoneAcceptedByAdmin = DonatePhone.IsPhoneAcceptedByAdmin;
                    entity.IsCourrierconfirmation = true;
                    entity.IsPhoneAssignedToLabour = true;
                    entity.CREATEDDATE = new DateTime?(DateTime.Now);
                    this.objSmartLabourEntities.SponsorNotification.Add(entity);
                    this.objSmartLabourEntities.SaveChanges();
                }
                Sponsor sponsor = this.objSmartLabourEntities.Sponsor.SingleOrDefault<Sponsor>(n => n.UserID == userId);
                //if (objlabour != null)
                //{
                //    Labour labour = new Labour();
                //    string LabourId = objlabour.LabourID;
                //    labour = this.SmtDbEntites.Labours.SingleOrDefault<Labour>(n => n.LabourID == LabourId);
                //    if ((labour.DeviceToken != null) && (labour.DeviceType == "Android"))
                //    {
                //        string deviceToken = labour.DeviceToken;
                //        string str2 = "AIzaSyCDuLpL_40YdjlU7BkBbMc9Cr5n4PuRCig";
                //        string notificationMsg = objlabour.NotificationMsg;
                //        WebRequest request = WebRequest.Create("https://gcm-http.googleapis.com/gcm/send");
                //        request.Method = "post";
                //        request.ContentType = " application/x-www-form-urlencoded;charset=UTF-8";
                //        request.Headers.Add(string.Format("Authorization: key={0}", str2));
                //        string str5 = string.Concat(new object[] { "collapse_key=Updates Available&data.message=", notificationMsg, "&data.title=\"smartLabours\"&data.notId=", DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Millisecond, "&data.time=", DateTime.Now.ToString(), "&to=", deviceToken });
                //        Console.WriteLine(str5);
                //        byte[] bytes = Encoding.UTF8.GetBytes(str5);
                //        request.ContentLength = bytes.Length;
                //        Stream requestStream = request.GetRequestStream();
                //        requestStream.Write(bytes, 0, bytes.Length);
                //        requestStream.Close();
                //        WebResponse response = request.GetResponse();
                //        requestStream = response.GetResponseStream();
                //        StreamReader reader = new StreamReader(requestStream);
                //        string str6 = reader.ReadToEnd();
                //        reader.Close();
                //        requestStream.Close();
                //        response.Close();
                //        ((dynamic)base.ViewBag).Message = "Msg successfully send";
                //    }
                //}
                if (objDonatePhone.IsPhoneAcceptedByAdmin)
                {
                    string str = new Mailing().SendMailforSponsorcourrier(sponsor.EmailID, "Smartlabours-Courrier Details", DonatePhone.CourierDetail);
                    base.TempData["messagealert"] = "Status Updated  Successfully";
                }
                else if (!(objDonatePhone.IsPhoneConfirmation || objDonatePhone.IsPhoneAcceptedByAdmin))
                {
                    base.TempData["messagealert"] = "Status Updated  Successfully";
                }
                else
                {
                    base.TempData["messagealert"] = "Status Updated  Successfully";
                }
                return base.RedirectToAction("/List");
            }
            catch
            {
                return base.RedirectToAction("/List");
            }
        }

        public ActionResult CheckIMEANumber(string IMEANUMBER)
        {
            string data = "";
            if ((from n in this.objSmartLabourEntities.DonatePhone
                 where n.IMEANumber.ToLower().Trim() == IMEANUMBER.ToLower().Trim()
                 select n).ToList<DonatePhone>().Count > 0)
            {
                data = "IMEA number Already Exists!!";
                return base.Json(data, JsonRequestBehavior.AllowGet);
            }
            return base.Json(data, JsonRequestBehavior.AllowGet);
        }

        [AuthorizeSponsor]
        public ActionResult DonatePhone()
        {
            DonatePhone model = new DonatePhone();
            base.TempData["currentgetid"] = "idsponsor";
            int UserID = Convert.ToInt32(base.Session["SPONSORID"]);
            Sponsor sponsor = this.objSmartLabourEntities.Sponsor.SingleOrDefault<Sponsor>(n => n.UserID == UserID);
            if (sponsor != null)
            {
                model.Address = sponsor.Address1;
                model.PhoneOwnerName = sponsor.Name;
                model.ContactDetail = sponsor.PhoneNumber;
            }
            return base.View(model);
        }

        [HttpPost]
        public ActionResult DonatePhone(DonatePhone objDonatePhone)
        {
            try
            {
                if (base.ModelState.IsValid)
                {
                    objDonatePhone.UserID = Convert.ToInt32(base.Session["SPONSORID"]);
                    objDonatePhone.Address = objDonatePhone.Address;
                    objDonatePhone.ContactDetail = objDonatePhone.ContactDetail;
                    objDonatePhone.AlternateAddress = objDonatePhone.AlternateAddress;
                    objDonatePhone.AlternatePhoneNumber = objDonatePhone.AlternatePhoneNumber;
                    objDonatePhone.DonatedDate = new DateTime?(DateTime.Now);
                    this.objSmartLabourEntities.DonatePhone.Add(objDonatePhone);
                    this.objSmartLabourEntities.SaveChanges();
                    TBL_Sponsor_Notifications entity = new TBL_Sponsor_Notifications
                    {
                        DonateID = objDonatePhone.DonateID,
                        UserID = objDonatePhone.UserID,
                        CREATEDDATE = new DateTime?(DateTime.Now)
                    };
                    this.objSmartLabourEntities.SponsorNotification.Add(entity);
                    this.objSmartLabourEntities.SaveChanges();
                    var sponser = objSmartLabourEntities.Sponsor.Where(a => a.UserID == objDonatePhone.UserID).FirstOrDefault();
                    string str4 = new Mailing().SentEmail_DonatePhone(sponser.EmailID, "Smartlabours-Donate Phone", sponser.Name);
                    base.TempData["postphone"] = 1;
                    base.TempData["currentgetid"] = "idsponsor";
                    return this.Redirect("/SponsorAccount/ProfileDetails");
                }
                return base.View(objDonatePhone);
            }
            catch
            {
                return this.Redirect("/Home/index");
            }
        }

        [AuthorizeSponsor]
        public ActionResult DonatePhoneHistory()
        {
            base.TempData["currentgetid"] = "idsponsor";
            try
            {
                List<DonatePhone> model = new List<DonatePhone>();
                base.TempData["currentgetidss"] = "PhoneDetails";
                int sponsorID = Convert.ToInt16(base.Session["SPONSORID"]);
                model = (from n in this.objSmartLabourEntities.DonatePhone
                         where n.UserID == sponsorID
                         select n).ToList<DonatePhone>();
                return base.View(model);
            }
            catch
            {
                return this.Redirect("/Home/index");
            }
        }

        [AuthorizeSponsor]
        public ActionResult OtherDonationHistory()
        {
            base.TempData["currentgetid"] = "idsponsor";
            try
            {
                List<TBL_SPONSOROTHERDONATION_SMT> model = new List<TBL_SPONSOROTHERDONATION_SMT>();
                base.TempData["currentgetidss"] = "PhoneDetails";
                int sponsorID = Convert.ToInt16(base.Session["SPONSORID"]);
              //  model = (from n in this.objSmartLabourEntities.SponsorotherDonation 
                model = (from n in this.objSmartLabourEntities.SponsorotherDonation
                         where n.UserId == sponsorID
                         orderby n.CreatedDate descending
                         select n).ToList<TBL_SPONSOROTHERDONATION_SMT>();
                return base.View(model);
            }
            catch
            {
                return this.Redirect("/Home/index");
            }
        }

        /// <summary>
        /// Donate Phone List
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        [AuthorizeUser]
        public ActionResult List(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            base.TempData["currentgetidss"] = "PhoneDetails";
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"].ToString() != string.Empty))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<DonatePhone> source = new List<DonatePhone>();
            int OrgId = (from m in this.objSmartLabourEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();

            if ((search != null) && (search != string.Empty))
            {
                var query = source;
                 if (UserId==1)
                {
                    query = (from n in this.objSmartLabourEntities.DonatePhone select n).ToList();
                }
                else
                {
                    query = (from n in this.objSmartLabourEntities.DonatePhone
                             join m in this.objSmartLabourEntities.Sponsor on n.UserID equals m.UserID
                             where m.OrgId == OrgId
                             select n).ToList();
                }
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string SearchBy = search.Split(new char[] { ',' })[2].Trim();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, SearchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, SearchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, SearchBy, searchText);
                        break;

                    case "50":
                        source = Startswith(query, "Awaiting For Your Approval", searchText);
                        break;

                    case "51":
                        source = Startswith(query, "In transit", searchText);
                        break;

                    case "52":
                        source = Startswith(query, "Received", searchText);
                        break;

                    case "53":
                        source = Startswith(query, "Phone Assigned to Labour", searchText);
                        break;

                    case "54":
                        source = Startswith(query, "Rejected", searchText);
                        break;
                }
            }
            else
            {
                 if (UserId==1)
                {
                    source = this.objSmartLabourEntities.DonatePhone.ToList<DonatePhone>();
                }
                else
                {
                    source = (from n in this.objSmartLabourEntities.DonatePhone.AsEnumerable()
                              join m in this.objSmartLabourEntities.Sponsor.AsEnumerable() on n.UserID equals m.UserID
                              where m.OrgId == OrgId
                              select n).ToList<DonatePhone>();
                }
            }
            int num = source.Count<DonatePhone>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.DonatedDate descending
                              select n).Skip<DonatePhone>(count).Take<DonatePhone>(10).ToList<DonatePhone>());
        }

        #region Serch Options DonatePhone

        /// <summary>
        /// Search Field Starts With Search Text
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<DonatePhone> Startswith(List<DonatePhone> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.BrandName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.sponsors.EmiratesId.StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.PhoneOwnerName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => Convert.ToString(n.DonateID).StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.DonatedDate != null && (n.DonatedDate).ToString().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "Awaiting For Your Approval")
            {
                query = query.Where(n=>n.IsPhoneConfirmation==false && (n.CourierDetail==null || n.CourierDetail==string.Empty) ).ToList();
            }
            else if (SearchBy == "In transit")
            {
                query = query.Where(n => n.IsPhoneConfirmation == true && n.CourierDetail != null && n.IsPhoneAcceptedByAdmin == false).ToList();
            }
            else if (SearchBy == "Received")
            {
                query = query.Where(n => n.IsPhoneAcceptedByAdmin == true && n.IsPhoneAssignedToLabour==false).ToList();
            }
            else if (SearchBy == "Phone Assigned to Labour")
            {
                query = query.Where(n => n.IsPhoneAcceptedByAdmin == true && n.IsPhoneAssignedToLabour == true).ToList();
            }
            else if (SearchBy == "Rejected")
            {
                query = query.Where(n => n.IsPhoneConfirmation == false && n.IsPhoneAcceptedByAdmin == false && n.IsPhoneAssignedToLabour == true).ToList();
            }

            List<DonatePhone> source = query.Select(x => x).ToList<DonatePhone>();
            return source;
        }

        /// <summary>
        /// Search Field Equal To Search Text 
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<DonatePhone> EqualTo(List<DonatePhone> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.BrandName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.sponsors.EmiratesId == searchText).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.PhoneOwnerName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => Convert.ToString(n.DonateID) == searchText).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.DonatedDate != null && Convert.ToString(n.DonatedDate) == (searchText)).ToList();
            }
            List<DonatePhone> source = query.Select(x => x).ToList<DonatePhone>();
            return source;
        }

        /// <summary>
        /// Search Field Contains Search Text 
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<DonatePhone> Contains(List<DonatePhone> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.BrandName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.sponsors.EmiratesId.Contains(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.PhoneOwnerName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => Convert.ToString(n.DonateID).Contains(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.DonatedDate != null && Convert.ToString(n.DonatedDate).Contains(searchText)).ToList();
            }
            List<DonatePhone> source = query.Select(x => x).ToList<DonatePhone>();
            return source;
        }

        #endregion

        /// <summary>
        /// Other Donation Delete Method
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public string otherDonation_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                TBL_SPONSOROTHERDONATION_SMT entity = this.objSmartLabourEntities.SponsorotherDonation.SingleOrDefault<TBL_SPONSOROTHERDONATION_SMT>(n => n.SponsorDonateId == bannerid);
                this.objSmartLabourEntities.SponsorotherDonation.Remove(entity);
                this.objSmartLabourEntities.SaveChanges();
                base.TempData["messagealert"] = "Record Deleted Successfully";
            }
            return "success";
        }

        /// <summary>
        /// Other Donation List
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        public ActionResult OtherDonation_List(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.objSmartLabourEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "PhoneDetails";
            List<TBL_SPONSOROTHERDONATION_SMT> source = new List<TBL_SPONSOROTHERDONATION_SMT>();
            if (UserId == 1)
            {
                source = (from n in this.objSmartLabourEntities.SponsorotherDonation select n).ToList();             

            }
            else
            {
                source = (from n in this.objSmartLabourEntities.SponsorotherDonation
                             join m in this.objSmartLabourEntities.Sponsor on n.UserId equals m.UserID
                             where m.OrgId == OrgId
                             select n).ToList();
            }

            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":

                        source = OListStartswith(source, searchBy, searchText);
                            break;

                    case "2":

                            source = OListEqualTo(source, searchBy, searchText);
                            break;

                    case "3":
                            source = OListContains(source, searchBy, searchText);                       
                            break;
                }
            }
           
            int num = source.Count<TBL_SPONSOROTHERDONATION_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CreatedDate descending
                              select n).Skip<TBL_SPONSOROTHERDONATION_SMT>(count).Take<TBL_SPONSOROTHERDONATION_SMT>(10).ToList<TBL_SPONSOROTHERDONATION_SMT>());
        }

        #region Others List Search

        /// <summary>
        /// field starts with search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_SPONSOROTHERDONATION_SMT> OListStartswith(List<TBL_SPONSOROTHERDONATION_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => Convert.ToString(n.SponsorDonateId).ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.DonateType.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => Convert.ToString(n.DonateAmount).ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.Description.StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {              
                query = query.Where(n =>Convert.ToString(n.CreatedDate).StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {              
                query = query.Where(n => n.Comments != null && n.Comments.StartsWith(searchText)).ToList();
            }
            List<TBL_SPONSOROTHERDONATION_SMT> source = query.Select(x => x).ToList<TBL_SPONSOROTHERDONATION_SMT>();
            return source;
        }

        /// <summary>
        /// values Equal to Search values
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_SPONSOROTHERDONATION_SMT> OListEqualTo(List<TBL_SPONSOROTHERDONATION_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => Convert.ToString(n.SponsorDonateId).ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.DonateType.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => Convert.ToString(n.DonateAmount).ToLower() == searchText).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.Description.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => Convert.ToString(n.CreatedDate)==(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {              
                query = query.Where(n => n.Comments != null && n.Comments == searchText).ToList();
            }

            List<TBL_SPONSOROTHERDONATION_SMT> source = query.Select(x => x).ToList<TBL_SPONSOROTHERDONATION_SMT>();
            return source;
        }

        /// <summary>
        /// Values Conrtains Search values
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_SPONSOROTHERDONATION_SMT> OListContains(List<TBL_SPONSOROTHERDONATION_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => Convert.ToString(n.SponsorDonateId).ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.DonateType.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => Convert.ToString(n.DonateAmount).ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.Description.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => Convert.ToString(n.CreatedDate).Contains(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n =>  n.Comments != null &&  n.Comments.ToLower().Trim().Contains(searchText)).ToList();
            }
            List<TBL_SPONSOROTHERDONATION_SMT> source = query.Select(x => x).ToList<TBL_SPONSOROTHERDONATION_SMT>();
            return source;
        }

        #endregion

        public string UpdatePriority(string priority)
        {
            string[] strArray = priority.TrimEnd(new char[] { '|' }).Split(new char[] { '|' });
            for (int i = 0; i < strArray.Length; i++)
            {
                int cimageid = Convert.ToInt32(strArray[i].Split(new char[] { ',' })[0].Replace("txtPriority", "").Trim());
                TBL_SPONSOROTHERDONATION_SMT tbl_sponsorotherdonation_smt = this.objSmartLabourEntities.SponsorotherDonation.SingleOrDefault<TBL_SPONSOROTHERDONATION_SMT>(n => n.SponsorDonateId == cimageid);
                if (strArray[i].Split(new char[] { ',' })[1] != string.Empty)
                {
                    tbl_sponsorotherdonation_smt.Comments = strArray[i].Split(new char[] { ',' })[1];
                }
            }
            int num2 = this.objSmartLabourEntities.SaveChanges();
            return "sucess";
        }

        public string UpdateStatus(string status, int bannerid)
        {
            DonatePhone phone = this.objSmartLabourEntities.DonatePhone.SingleOrDefault<DonatePhone>(n => n.DonateID == bannerid);
            if (status == "true")
            {
                phone.IsPhoneAcceptedByAdmin = false;
            }
            else
            {
                phone.IsPhoneAcceptedByAdmin = true;
            }
            this.objSmartLabourEntities.SaveChanges();
            return "sucess";
        }
    }
    #endregion

    #region HomeController

    public class HomeController : Controller
    {
        // Fields
        private static string connString = ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ToString();
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();
        private Database objAccessDb = new Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase(connString);
        // Methods
        public ActionResult ChangePassword()
        {
            return base.View();
        }

        [HttpGet]
        public ActionResult forgotpassword()
        {
            return base.View();
        }

        public ActionResult forgotpasswordcheck(string emailid)
        {
            string password = string.Empty;
            string username = string.Empty;
            try
            {
                Labour labour = new Labour();
                if (((emailid != null) && (emailid != "")) && (emailid != "EmailID"))
                {
                    if ((from n in this.SmtDbEntites.Labours
                         where n.EmailID.ToLower().Trim() == emailid.ToLower().Trim()
                         select n).ToList<Labour>().Count <= 0)
                    {
                        return base.Json("2", JsonRequestBehavior.AllowGet);
                    }
                    Labour labour2 = this.SmtDbEntites.Labours.SingleOrDefault<Labour>(n => n.EmailID == emailid);
                    if ((((labour2.Password != null) && (labour2.Password != "")) && (labour2.Name != null)) && (labour2.Name != ""))
                    {
                        password = labour2.Password.ToString();
                        username = labour2.EmailID.ToString();
                        Mailing mailing = new Mailing();
                        if (mailing.Email_Wise(emailid, "Smartlabours-Forgot Password", username, password) != "")
                        {
                            return base.Json("1", JsonRequestBehavior.AllowGet);
                        }
                        return base.Json("3", JsonRequestBehavior.AllowGet);
                    }
                    return base.Json("0", JsonRequestBehavior.AllowGet);
                }
                if (((emailid == null) || (emailid == "")) || (emailid == "EmailID"))
                {
                    return base.Json("5", JsonRequestBehavior.AllowGet);
                }
                return base.Json("4", JsonRequestBehavior.AllowGet);
            }
            catch
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Index()
        {

            //string host = ConfigurationSettings.AppSettings["LHost"].ToString();
            //int port = Convert.ToInt32(ConfigurationSettings.AppSettings["LPort"].ToString());
            //string str2 = ConfigurationSettings.AppSettings["LToMailId"].ToString();
            //string address = ConfigurationSettings.AppSettings["LMailId"].ToString();
            //SmtpClient client = new SmtpClient(host, port);
            //string userName = ConfigurationSettings.AppSettings["LMailId"].ToString();
            //string password = ConfigurationSettings.AppSettings["LMailPassword"].ToString();
            //client.Credentials = new NetworkCredential(userName, password);
            //MailMessage message = new MailMessage
            //{
            //    From = new MailAddress(address)
            //};
            //message.To.Add(new MailAddress("subhasekarcbe@gmail.com"));
            //message.Subject = "Test";
            //message.Priority = MailPriority.Normal;
            //message.IsBodyHtml = true;
            //message.Body = "Test";
            //SmtpClient client2 = new SmtpClient
            //{
            //    Host = host,
            //    EnableSsl = true
            //};
            //NetworkCredential credential = new NetworkCredential(userName, password);
            //client2.UseDefaultCredentials = true;
            //client2.Credentials = credential;
            //client2.Timeout = 100000000;
            //client2.Port = port;
            //client2.Send(message);
            sendAppleNotification("25e8470652f18135c84798208b7c05d0941b4a2c46af030814b315095859c7b1", "hi");
            var serviceTypeer = SmtDbEntites.ServiceType.ToList();
            var serviceType = SmtDbEntites.ServiceType.Where(a => a.SERVICETYPENAME.Trim() == "Talk Time").Select(x => x.SERVICETYPEID).FirstOrDefault();
            ((dynamic)base.ViewBag).Banner = (from n in this.SmtDbEntites.Banner
                                              where n.Status
                                              select n).ToList<TBL_Banner_SMT>();
            ((dynamic)base.ViewBag).Artical = (from n in this.SmtDbEntites.Artical
                                               where n.Status && n.Homecontent
                                               select n).Take<TBL_Artical_SMT>(4).ToList<TBL_Artical_SMT>();
            ((dynamic)base.ViewBag).Testimonial = (from n in this.SmtDbEntites.Testimonial
                                                   where (n.Status == true) && n.Homecontent
                                                   select n).Take<TBL_TESTIMONIAL_SMT>(5).ToList<TBL_TESTIMONIAL_SMT>();
            ((dynamic)base.ViewBag).LabourDetails = (from n in this.SmtDbEntites.Labours
                                                     where n.STATUS && n.IsDisplayNameAccepted
                                                     select n).Take<Labour>(10).ToList<Labour>();
            ((dynamic)base.ViewBag).SponsorDetails = (from n in this.SmtDbEntites.Sponsor
                                                      where (n.Status && n.IsDisplayNameAccepted) && (n.Homecontent == true)
                                                      select n).Take<Sponsor>(4).ToList<Sponsor>();
            List<TBL_ABOUTUS_SMT> list = new List<TBL_ABOUTUS_SMT>();
            list = (from n in this.SmtDbEntites.Aboutus
                    where n.STATUS
                    orderby n.CREATEDDATE
                    select n).Take<TBL_ABOUTUS_SMT>(1).ToList<TBL_ABOUTUS_SMT>();
            TBL_ABOUTUS_SMT tbl_aboutus_smt = new TBL_ABOUTUS_SMT();
            foreach (TBL_ABOUTUS_SMT tbl_aboutus_smt2 in list)
            {
                tbl_aboutus_smt.SHORTDESC = tbl_aboutus_smt2.SHORTDESC;
                tbl_aboutus_smt.FULLDESCRIPTION = tbl_aboutus_smt2.FULLDESCRIPTION;
            }
            ((dynamic)base.ViewBag).AboutusShortDescription = tbl_aboutus_smt.SHORTDESC;
            base.TempData["currentgetid"] = "idhome";

            if (base.Request.Cookies["LUserName"] != null)
            {
                ((dynamic)base.ViewBag).lname = base.Request.Cookies["LUserName"].Value.ToString();
            }
            else
            {
                ((dynamic)base.ViewBag).lname = "";
            }
            if (base.Request.Cookies["LPassword"] != null)
            {
                ((dynamic)base.ViewBag).lpwd = base.Request.Cookies["LPassword"].Value.ToString();
            }
            else 
            {
                ((dynamic)base.ViewBag).lpwd = "";
            }
            if (base.Request.Cookies["SUserName"] != null)
            {
                ((dynamic)base.ViewBag).sponsorname = base.Request.Cookies["SUserName"].Value.ToString();
            }
            else
            {
                ((dynamic)base.ViewBag).sponsorname = "";
            }
            if (base.Request.Cookies["SPassword"] != null)
            {
                ((dynamic)base.ViewBag).sponsorpwd = base.Request.Cookies["SPassword"].Value.ToString();
            }
            else
            {
                ((dynamic)base.ViewBag).sponsorpwd = "";
            }
            return base.View();
        }

        public ActionResult Register()
        {
            return base.View();
        }

        public JsonResult RunSmartSchedular()
        {
            try
            {
                string data = "";
                SqlConnection connection = new SqlConnection(connString);
                SqlCommand command = new SqlCommand("Pro_AssignPhoneToLabour", connection)
                {
                    CommandType = CommandType.StoredProcedure
                };
                connection.Open();

                List<int> model = new List<int>();
                using (IDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {

                        if (reader["labourId"] != DBNull.Value)
                        {
                            int intLabourId = Convert.ToInt32(reader["labourId"].ToString());
                            model.Add(intLabourId);
                        }

                    }
                }
                if (model.Count() > 0)
                {
                    foreach (var item in model)
                    {
                        string LabourId = item.ToString();
                        string notificationMsg = "Phone Available";
                        var labourDetails = this.SmtDbEntites.Labours.SingleOrDefault<Labour>(n => n.LabourID == LabourId);
                        string deviceToken = labourDetails.DeviceToken;
                        if ((labourDetails.DeviceToken != null) && (labourDetails.DeviceType == "Android"))
                        {

                            //string str2 = "AIzaSyDhZkAxp-GmOiiIJnoV9AJyr0nJYSohFxs";
                            string str2 = "AIzaSyCDuLpL_40YdjlU7BkBbMc9Cr5n4PuRCig";

                            WebRequest request = WebRequest.Create("https://gcm-http.googleapis.com/gcm/send");
                            request.Method = "post";
                            request.ContentType = " application/x-www-form-urlencoded;charset=UTF-8";
                            request.Headers.Add(string.Format("Authorization: key={0}", str2));
                            string str5 = string.Concat(new object[] { "collapse_key=Updates Available&data.message=", notificationMsg, "&data.title=\"smartLabours\"&data.notId=", DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Millisecond, "&data.time=", DateTime.Now.ToString(), "&to=", deviceToken });
                            Console.WriteLine(str5);
                            byte[] bytes = Encoding.UTF8.GetBytes(str5);
                            request.ContentLength = bytes.Length;
                            Stream requestStream = request.GetRequestStream();
                            requestStream.Write(bytes, 0, bytes.Length);
                            requestStream.Close();
                            WebResponse response = request.GetResponse();
                            requestStream = response.GetResponseStream();
                            StreamReader reader = new StreamReader(requestStream);
                            string str6 = reader.ReadToEnd();
                            reader.Close();
                            requestStream.Close();
                            response.Close();
                        }
                        else if ((labourDetails.DeviceToken != null) && (labourDetails.DeviceType == "iOS"))
                        {
                            sendAppleNotification(deviceToken, notificationMsg);
                        }
                        //else if ((labourDetails.DeviceToken != null))
                        //{
                        //    sendAppleNotification(deviceToken);
                        //}
                        string str4 = new Mailing().SentEmail_PhoneRequest(labourDetails.EmailID, "Smartlabours-Phone Available", labourDetails.Name);
                    }
                }
                //int num = command.ExecuteNonQuery();
                connection.Close();
                command.Dispose();
                connection.Dispose();
                SqlConnection connection2 = new SqlConnection(connString);
                SqlCommand command2 = new SqlCommand("Pro_AssignExpiredPhone", connection2)
                {
                    CommandType = CommandType.StoredProcedure
                };
                connection2.Open();
                int num = command2.ExecuteNonQuery();
                connection2.Close();
                command2.Dispose();
                connection2.Dispose();
                if (num != 0)
                {
                    data = "success";
                }
                return base.Json(data, JsonRequestBehavior.AllowGet);
            }
            catch
            {
                return base.Json("failure", JsonRequestBehavior.AllowGet);
            }
        }

        public bool sendAppleNotification(string deviceToken, string notificationMsg)
        {
            try
            {
                bool sandbox = true;
                string testDeviceToken = deviceToken;
                string p12File = "Push Notification_new.p12";
                string p12FilePassword = "123456";
                int count = 2;
                int sleepBetweenNotifications = 15000;
                string p12Filename = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, p12File);
                var jk = System.IO.File.Exists(p12Filename);
                NotificationService service = new NotificationService(sandbox, p12Filename, 1);
                service.SendRetries = 5; //5 retries before generating notificationfailed event
                service.ReconnectDelay = 5000; //5 seconds
                service.Error += new NotificationService.OnError(service_Error);
                service.NotificationTooLong += new NotificationService.OnNotificationTooLong(service_NotificationTooLong);
                service.BadDeviceToken += new NotificationService.OnBadDeviceToken(service_BadDeviceToken);
                service.NotificationFailed += new NotificationService.OnNotificationFailed(service_NotificationFailed);
                service.NotificationSuccess += new NotificationService.OnNotificationSuccess(service_NotificationSuccess);
                service.Connecting += new NotificationService.OnConnecting(service_Connecting);
                service.Connected += new NotificationService.OnConnected(service_Connected);
                service.Disconnected += new NotificationService.OnDisconnected(service_Disconnected);
                for (int i = 1; i <= count; i++)
                {
                    Notification alertNotification = new Notification(testDeviceToken);
                    alertNotification.Payload.Alert.Body = "Smart Labour -" + notificationMsg;
                    alertNotification.Payload.Sound = "default";
                    alertNotification.Payload.Badge = i;

                    //if (service.QueueNotification(alertNotification))
                    //    Console.WriteLine("Notification Queued!");
                    //else
                    //    Console.WriteLine("Notification Failed to be Queued!");
                    //Sleep in between each message
                    if (i < count)
                    {
                        //Console.WriteLine("Sleeping " + sleepBetweenNotifications + " milliseconds before next Notification...");
                        System.Threading.Thread.Sleep(sleepBetweenNotifications);
                    }
                }

                //Console.WriteLine("Cleaning Up...");
                service.Close();
                service.Dispose();
                //Console.WriteLine("Done!");
                //Console.WriteLine("Press enter to exit...");
                //Console.ReadLine();
            }
            catch (Exception ex)
            {
            }
            return true;
        }

        static void service_BadDeviceToken(object sender, BadDeviceTokenException ex)
        {
            Console.WriteLine("Bad Device Token: {0}", ex.Message);
        }

        static void service_Disconnected(object sender)
        {
            Console.WriteLine("Disconnected...");
        }

        static void service_Connected(object sender)
        {
            Console.WriteLine("Connected...");
        }

        static void service_Connecting(object sender)
        {
            Console.WriteLine("Connecting...");
        }

        static void service_NotificationTooLong(object sender, NotificationLengthException ex)
        {
            Console.WriteLine(string.Format("Notification Too Long: {0}", ex.Notification.ToString()));
        }

        static void service_NotificationSuccess(object sender, Notification notification)
        {
            Console.WriteLine(string.Format("Notification Success: {0}", notification.ToString()));
        }

        static void service_NotificationFailed(object sender, Notification notification)
        {
            Console.WriteLine(string.Format("Notification Failed: {0}", notification.ToString()));
        }

        static void service_Error(object sender, Exception ex)
        {
            Console.WriteLine(string.Format("Error: {0}", ex.Message));
        }


        public string AssignVoucherToLabour(int OrgId)
        {
              List<VoucherPoints> model = new List<VoucherPoints>();
                string data = "";   
                DataSet dt = objAccessDb.ExecuteDataSet("Pro_AssignVoucherPoints", OrgId);               
                foreach (DataRow reader1 in dt.Tables[0].Rows)
                {
                    VoucherPoints item1 = new VoucherPoints();
                    if (reader1["LabourId"] != DBNull.Value)
                    {
                        item1.LabourId =reader1["LabourId"].ToString();

                    }
                    if (reader1["Points"] != DBNull.Value)
                    {
                        item1.Points = Convert.ToInt32(reader1["Points"].ToString());
                    }
                    model.Add(item1);
                }
                    if (model.Count() > 0)
                    {
                        foreach (var item in model)
                        {
                            string LabourId = item.LabourId.ToString();
                            string notificationMsg = "You have a Voucher Available with " + item.Points + " Points";
                            var labourDetails = this.SmtDbEntites.Labours.SingleOrDefault<Labour>(n => n.LabourID == LabourId);
                            if ((labourDetails.DeviceToken != null) && (labourDetails.DeviceType == "Android"))
                            {
                                string deviceToken = labourDetails.DeviceToken;
                                string str2 = "AIzaSyCDuLpL_40YdjlU7BkBbMc9Cr5n4PuRCig";
                                WebRequest request = WebRequest.Create("https://gcm-http.googleapis.com/gcm/send");
                                request.Method = "post";
                                request.ContentType = " application/x-www-form-urlencoded;charset=UTF-8";
                                request.Headers.Add(string.Format("Authorization: key={0}", str2));
                                string str5 = string.Concat(new object[] { "collapse_key=Updates Available&data.message=", notificationMsg, "&data.title=\"smartLabours\"&data.notId=", DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Millisecond, "&data.time=", DateTime.Now.ToString(), "&to=", deviceToken });
                                Console.WriteLine(str5);
                                byte[] bytes = Encoding.UTF8.GetBytes(str5);
                                request.ContentLength = bytes.Length;
                                Stream requestStream = request.GetRequestStream();
                                requestStream.Write(bytes, 0, bytes.Length);
                                requestStream.Close();
                                WebResponse response = request.GetResponse();
                                requestStream = response.GetResponseStream();
                                StreamReader reader = new StreamReader(requestStream);
                                string str6 = reader.ReadToEnd();
                                reader.Close();
                                requestStream.Close();
                                response.Close();
                            }
                            else if ((labourDetails.DeviceToken != null) && (labourDetails.DeviceType == "iOS"))
                            {
                                string deviceToken = labourDetails.DeviceToken;
                                sendAppleNotification(deviceToken, notificationMsg);
                            }
                        }
                        data = "Success";
                        return data;
                }
              return "Not Processed";
        }

        public JsonResult RunVoucherSchedular(string OrgName)
        {
            try
            {
                string data = string.Empty;
                int Temp = 0;
                int OrgId = 0;
                int UserId = Convert.ToInt32(Session["USERID"].ToString());
                if (UserId == 1)
                {
                    string[] strOrg = OrgName.Split(',');
                    foreach (string strOrgName in strOrg)
                    {
                        OrgId = (from m in this.SmtDbEntites.Organisation where m.OrganisationName.ToLower().Trim() == strOrgName.ToLower().Trim() select m.OrgId).FirstOrDefault();
                        data= AssignVoucherToLabour(OrgId);
                        if (data == "Success")
                        {
                            Temp = 1;
                        }
                    }
                  }
                    else
                    {                   
                        OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
                        data= AssignVoucherToLabour(OrgId);
                     }
                   if(Temp==1)
                   {
                       data = "Success";
                   }
                    return base.Json(data, JsonRequestBehavior.AllowGet);
            }
            catch
            {
                return base.Json("Reward point not available for voucher redemption", JsonRequestBehavior.AllowGet);
            }
        }
        

        [HttpPost]
        public string SaveProfileImagejson(string LabourID, HttpPostedFileBase file)
        {
            try
            {
                string str = DateTime.Now.ToString("ddMMyyhhmmss");
                string str2 = "";
                if (file != null)
                {
                    string fileName = Path.GetFileName(file.FileName);
                    string str4 = "";
                    string str5 = Path.GetExtension(fileName.ToString()).ToLower();
                    string[] strArray = new string[] { ".png", ".jpg", ".gif" };
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        if (str5 == strArray[i])
                        {
                            str4 = strArray[i].ToString();
                        }
                    }
                    string[] strArray2 = fileName.ToString().Replace(" ", "").Split(new char[] { '.' });
                    if (strArray2[0].ToString().Length > 30)
                    {
                        str2 = strArray2[0].ToString().Substring(0, 30) + str + str4.ToString();
                    }
                    else
                    {
                        str2 = strArray2[0].ToString() + str + str4.ToString();
                    }
                    string filename = Path.Combine(base.Server.MapPath("~/Content/Front/images/LabourImage/"), str2);
                    file.SaveAs(filename);
                    Labour labour = new Labour();
                    Labour labour2 = new Labour();
                    labour2 = this.SmtDbEntites.Labours.SingleOrDefault<Labour>(n => n.LabourID == LabourID);
                    labour = this.SmtDbEntites.Labours.SingleOrDefault<Labour>(n => n.LabourID == LabourID);
                    labour2.Name = labour.Name;
                    labour2.DOB = labour.DOB;
                    labour2.LabourImage = labour.LabourImage;
                    labour2.EmailID = labour.EmailID;
                    labour2.LabourID = labour.LabourID;
                    labour2.Pincode = labour.Pincode;
                    labour2.Address1 = labour.Address1;
                    labour2.PhoneNumber = labour.PhoneNumber;
                    labour2.STATUS = labour.STATUS;
                    labour2.Sex = labour.Sex;
                    labour2.Password = labour.Password;
                    labour2.ConfirmPassword = labour.Password;
                    labour2.IsDisplayNameAccepted = labour.IsDisplayNameAccepted;
                    labour2.MODIFIEDBY = labour.Name;
                    labour2.MODIFIEDDATE = new DateTime?(DateTime.Now);
                    labour2.LabourImage = str2;
                    this.SmtDbEntites.SaveChanges();
                    return "Success";
                }
                return "Success";
            }
            catch (DbEntityValidationException exception)
            {
                Exception innerException = exception;
                foreach (DbEntityValidationResult result in exception.EntityValidationErrors)
                {
                    foreach (DbValidationError error in result.ValidationErrors)
                    {
                        innerException = new InvalidOperationException(string.Format("{0}:{1}", result.Entry.Entity.ToString(), error.ErrorMessage), innerException);
                    }
                }
                return "Failure";
            }
        }

        public string Signout()
        {
            FormsAuthentication.SignOut();
            base.Session.Abandon();
            base.Session.Clear();
            return "sucess";
        }

        public ActionResult Sitemap()
        {
            base.TempData["currentgetid"] = "idsitemap1";
            return base.View();
        }

        [HttpGet]
        public ActionResult sponsorforgotpassword()
        {
            return base.View();
        }

        public ActionResult sponsorforgotpassword(string emailid)
        {
            string password = string.Empty;
            string username = string.Empty;
            try
            {
                Labour labour = new Labour();
                if (((emailid != null) && (emailid != "")) && (emailid != "EmailID"))
                {
                    if ((from n in this.SmtDbEntites.Sponsor
                         where n.EmiratesId.ToLower().Trim() == emailid.ToLower().Trim()
                         select n).ToList<Sponsor>().Count <= 0)
                    {
                        return base.Json("2", JsonRequestBehavior.AllowGet);
                    }
                    Sponsor sponsor = this.SmtDbEntites.Sponsor.SingleOrDefault<Sponsor>(n => n.EmiratesId == emailid);
                    if ((((sponsor.Password != null) && (sponsor.Password != "")) && (sponsor.Name != null)) && (sponsor.Name != ""))
                    {
                        password = sponsor.Password.ToString();
                        username = sponsor.EmailID.ToString();
                        Mailing mailing = new Mailing();
                        if (mailing.Email_Wise(emailid, "Smartlabours-Forgot Password", username, password) != "")
                        {
                            return base.Json("1", JsonRequestBehavior.AllowGet);
                        }
                        return base.Json("3", JsonRequestBehavior.AllowGet);
                    }
                    return base.Json("0", JsonRequestBehavior.AllowGet);
                }
                if (((emailid == null) || (emailid == "")) || (emailid == "EmailID"))
                {
                    return base.Json("5", JsonRequestBehavior.AllowGet);
                }
                return base.Json("4", JsonRequestBehavior.AllowGet);
            }
            catch
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// Cheeck Organization Name
        /// </summary>
        /// <param name="OrgName"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult CheckOrganizationName(string OrgName)
        {
            int OrgId = 0;
            OrgId = (from n in this.SmtDbEntites.Organisation where n.IsActive == true && n.OrganisationName.ToLower().Trim() == OrgName.ToLower().Trim() select n.OrgId).SingleOrDefault();
            if (OrgId == 0)
            {
                return base.Json("Organization Name does not Exists", JsonRequestBehavior.AllowGet);
            }
            return base.Json("1", JsonRequestBehavior.AllowGet);
        }

    }

    #endregion

    #region PhoneRegisterController
    [AuthorizeLabour]
    public class LabourAccount11Controller : Controller
    {
        // Fields
        private SmartLabourEntities dbEntites = new SmartLabourEntities();

        // Methods
        public string AcceptPhone(string IsAccepted)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ToString();
            try
            {
                if (base.Session["LABOURID"] != null)
                {
                    string str2 = base.Session["LABOURID"].ToString();
                    SqlConnection connection = new SqlConnection(connectionString);
                    SqlCommand command = new SqlCommand("Pro_AcceptPhone", connection)
                    {
                        CommandType = CommandType.StoredProcedure
                    };
                    command.Parameters.Add(new SqlParameter("@LabourId", str2));
                    command.Parameters.Add(new SqlParameter("@IsPhoneAccepted", Convert.ToBoolean(IsAccepted)));
                    connection.Open();
                    command.ExecuteNonQuery();
                    connection.Close();
                    command.Dispose();
                    connection.Dispose();
                    SmartLabourEntities entities = new SmartLabourEntities();
                    var labour = entities.Labours.Where(a => a.LabourID == str2).FirstOrDefault();
                    string str4 = new Mailing().SentEmail_PhoneAccept(labour.EmailID, "Smartlabours-Phone Accepted", labour.Name);
                    return "Sucess";
                }
                return "Failure";
            }
            catch
            {
                return "Failure";
            }
        }

        public SelectList BindsexType()
        {
            List<SelectListItem> items = new List<SelectListItem>();
            SelectListItem item = new SelectListItem
            {
                Text = "select",
                Value = "0"
            };
            items.Add(item);
            SelectListItem item2 = new SelectListItem
            {
                Text = "Male",
                Value = "1"
            };
            items.Add(item2);
            SelectListItem item3 = new SelectListItem
            {
                Text = "FeMale",
                Value = "2"
            };
            items.Add(item3);
            return new SelectList(items, "Value", "Text");
        }

        public ActionResult CheckPhoneRequest()
        {
            List<PhoneAsssignedToLabour> list = new List<PhoneAsssignedToLabour>();
            string LabourId = base.Session["LABOURID"].ToString();
            if ((from n in this.dbEntites.phoneAssigntolabour
                 where (((n.LabourID == LabourId) && (n.IsPhoneAccepted == false)) && (n.IsLabourReceivedPhone == false)) && (n.IsLabourReceivedPhone == null)
                 select n).ToList<PhoneAsssignedToLabour>().Count > 0)
            {
                return base.Json("1", JsonRequestBehavior.AllowGet);
            }
            return base.Json("0", JsonRequestBehavior.AllowGet);
        }

        public string Disbute_Transaction(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int num2 = Convert.ToInt32(strArray[i].ToString());
                TBL_DISBUTETRANSACTION_SMT entity = new TBL_DISBUTETRANSACTION_SMT
                {
                    TransactionId = num2,
                    Createddate = new DateTime?(DateTime.Now)
                };
                this.dbEntites.DisbuteTransaction.Add(entity);
                this.dbEntites.SaveChanges();
            }
            return "success";
        }

        public ActionResult Notification()
        {
            base.TempData["currentgetid"] = "idlabour";
            string str = base.Session["LABOURID"].ToString();
            if (base.Session["LABOURID"] != null)
            {
                Database database = DatabaseFactory.CreateDatabase("DefaultConnection");
                string storedProcedureName = "pro_PhoneAvailable";
                DbCommand storedProcCommand = database.GetStoredProcCommand(storedProcedureName);
                database.AddInParameter(storedProcCommand, "@Labourid", DbType.String, str);
                List<DonatePhone> model = new List<DonatePhone>();
                using (IDataReader reader = database.ExecuteReader(storedProcCommand))
                {
                    while (reader.Read())
                    {
                        DonatePhone item = new DonatePhone
                        {
                            phoneAssignlabour = new PhoneAsssignedToLabour()
                        };
                        if (reader["BrandName"] != DBNull.Value)
                        {
                            item.BrandName = reader["BrandName"].ToString();
                        }
                        if (reader["PhoneColor"] != DBNull.Value)
                        {
                            item.PhoneColor = reader["PhoneColor"].ToString();
                        }
                        if (reader["IMEANumber"] != DBNull.Value)
                        {
                            item.IMEANumber = reader["IMEANumber"].ToString();
                        }
                        if (reader["ModelNo"] != DBNull.Value)
                        {
                            item.ModelNo = reader["ModelNo"].ToString();
                        }
                        if (reader["CourierDetail"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.CourierDetail = reader["CourierDetail"].ToString();
                        }
                        if (reader["DeliveredDate"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.DeliveredDate = new DateTime?(Convert.ToDateTime(reader["DeliveredDate"].ToString()));
                        }
                        if (reader["TransactionID"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.PhoneAssignedID = Convert.ToInt32(reader["TransactionID"].ToString());
                        }
                        if (reader["AssignedDate"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.AssignedDate = new DateTime?(Convert.ToDateTime(reader["AssignedDate"]));
                        }
                        if (reader["DaysLeft"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.PhoneExpiryDays = reader["DaysLeft"].ToString();
                        }
                        model.Add(item);
                    }
                }
                return base.View(model);
            }
            return base.View();
        }

        [HttpGet]
        public ActionResult PhoneRegister()
        {
            try
            {
                base.TempData["currentgetid"] = "idlabour";
                RequestPhone model = new RequestPhone();
                List<RequestPhone> list = new List<RequestPhone>();
                string LabourId = base.Session["LABOURID"].ToString();
                list = (from n in this.dbEntites.RequestPhones
                        where n.LabourID == LabourId
                        select n).ToList<RequestPhone>();
                ((dynamic)base.ViewBag).RequestCount = list.Count;
                Labour labour = this.dbEntites.Labours.SingleOrDefault<Labour>(n => n.LabourID == LabourId);
                if (labour != null)
                {
                    model.Address = labour.Address1;
                    model.MailId = labour.EmailID;
                    model.LabourID = labour.LabourID;
                    model.PhoneNumber = labour.PhoneNumber;
                }
                return base.View(model);
            }
            catch
            {
                return this.Redirect("/Home/index");
            }
        }

        [HttpPost]
        public ActionResult PhoneRegister(RequestPhone objRequestphone)
        {
            try
            {
                base.TempData["currentgetid"] = "idlabour";
                if (base.ModelState.IsValid)
                {
                    List<PhoneAsssignedToLabour> list = new List<PhoneAsssignedToLabour>();
                    string LabourId = base.Session["LABOURID"].ToString();
                    if ((from n in this.dbEntites.phoneAssigntolabour
                         where (((n.LabourID == LabourId) && (n.IsPhoneAccepted == false)) && (n.IsLabourReceivedPhone == false)) && (n.IsLabourReceivedPhone == null)
                         select n).ToList<PhoneAsssignedToLabour>().Count > 0)
                    {
                        base.TempData["Request"] = "Already Your  Phone Request is Pending.. Please wait ";
                        return base.RedirectToAction("/ProfileDetails");
                    }
                    RequestPhone entity = new RequestPhone
                    {
                        MailId = objRequestphone.MailId,
                        NewAddress = objRequestphone.NewAddress,
                        PhoneNumber = objRequestphone.PhoneNumber,
                        AlternatePhoneNumber = objRequestphone.AlternatePhoneNumber,
                        LabourID = objRequestphone.LabourID,
                        Address = objRequestphone.Address,
                        RequestedDate = new DateTime?(DateTime.Now)
                    };
                    var labour = dbEntites.Labours.Where(a => a.LabourID == objRequestphone.LabourID).FirstOrDefault();
                    string str4 = new Mailing().SentEmail_PhoneRequest(labour.EmailID, "Smartlabours-Phone Request", labour.Name);
                    this.dbEntites.RequestPhones.Add(entity);
                    this.dbEntites.SaveChanges();
                    ((dynamic)base.ViewBag).messagealert = "Phone Request Send Successfully";
                    return base.RedirectToAction("/ProfileDetails");
                }
                return base.View(objRequestphone);
            }
            catch
            {
                return null;
            }
        }

        public ActionResult PhoneRequestHistory()
        {
            try
            {
                base.TempData["currentgetid"] = "idlabour";
                string str = base.Session["LABOURID"].ToString();
                if (base.Session["LABOURID"] != null)
                {
                    Database database = DatabaseFactory.CreateDatabase("DefaultConnection");
                    string storedProcedureName = "pro_PhoneAcceptedLabourHistory";
                    DbCommand storedProcCommand = database.GetStoredProcCommand(storedProcedureName);
                    database.AddInParameter(storedProcCommand, "@Labourid", DbType.String, str);
                    List<DonatePhone> model = new List<DonatePhone>();
                    using (IDataReader reader = database.ExecuteReader(storedProcCommand))
                    {
                        while (reader.Read())
                        {
                            DonatePhone item = new DonatePhone
                            {
                                phoneAssignlabour = new PhoneAsssignedToLabour()
                            };
                            if (reader["BrandName"] != DBNull.Value)
                            {
                                item.BrandName = reader["BrandName"].ToString();
                            }
                            if (reader["PhoneColor"] != DBNull.Value)
                            {
                                item.PhoneColor = reader["PhoneColor"].ToString();
                            }
                            if (reader["IMEANumber"] != DBNull.Value)
                            {
                                item.IMEANumber = reader["IMEANumber"].ToString();
                            }
                            if (reader["ModelNo"] != DBNull.Value)
                            {
                                item.ModelNo = reader["ModelNo"].ToString();
                            }
                            if (reader["CourierDetail"] != DBNull.Value)
                            {
                                item.phoneAssignlabour.CourierDetail = reader["CourierDetail"].ToString();
                            }
                            if (reader["DeliveredDate"] != DBNull.Value)
                            {
                                item.phoneAssignlabour.DeliveredDate = new DateTime?(Convert.ToDateTime(reader["DeliveredDate"].ToString()));
                            }
                            if (reader["TransactionID"] != DBNull.Value)
                            {
                                item.phoneAssignlabour.PhoneAssignedID = Convert.ToInt32(reader["TransactionID"].ToString());
                            }
                            if (reader["PhoneStatus"] != DBNull.Value)
                            {
                                item.phoneAssignlabour.IsPhoneAccepted = new bool?(Convert.ToBoolean(reader["PhoneStatus"].ToString()));
                            }
                            if (reader["IsLabourReceivedPhone"] != DBNull.Value)
                            {
                                item.phoneAssignlabour.IsLabourReceivedPhone = new bool?(Convert.ToBoolean(reader["IsLabourReceivedPhone"].ToString()));
                            }
                            model.Add(item);
                        }
                    }
                    return base.View(model);
                }
                return this.Redirect("/Home/index");
            }
            catch (Exception)
            {
                return null;
            }
        }

        [HttpGet]
        public ActionResult ProfileDetails()
        {
            try
            {
                int userId = Convert.ToInt32(base.Session["FUSERID"].ToString());
                ((dynamic)base.ViewBag).sex = this.BindsexType();
                Labour model = this.dbEntites.Labours.SingleOrDefault<Labour>(n => n.UserID == userId);
                base.TempData["currentgetid"] = "idlabour";
                return base.View(model);
            }
            catch
            {
                return null;
            }
        }

        [HttpPost]
        public ActionResult ProfileDetails(Labour objLabour)
        {
            try
            {
                base.TempData["currentgetid"] = "idlabour";
                if (base.ModelState.IsValid)
                {
                    Labour labour = this.dbEntites.Labours.SingleOrDefault<Labour>(n => n.UserID == objLabour.UserID);
                    labour.Name = objLabour.Name;
                    labour.DOB = objLabour.DOB;
                    labour.EmailID = objLabour.EmailID;
                    labour.LabourID = objLabour.LabourID;
                    labour.Pincode = objLabour.Pincode;
                    labour.Address1 = objLabour.Address1;
                    labour.PhoneNumber = objLabour.PhoneNumber;
                    labour.STATUS = objLabour.STATUS;
                    labour.Sex = objLabour.Sex;
                    labour.Password = objLabour.Password;
                    labour.ConfirmPassword = objLabour.Password;
                    labour.IsDisplayNameAccepted = objLabour.IsDisplayNameAccepted;
                    labour.MODIFIEDBY = objLabour.Name;
                    labour.MODIFIEDDATE = new DateTime?(DateTime.Now);
                    this.dbEntites.SaveChanges();
                    return base.RedirectToAction("/ProfileDetails");
                }
                return base.View(objLabour);
            }
            catch (DbEntityValidationException exception)
            {
                Exception innerException = exception;
                foreach (DbEntityValidationResult result in exception.EntityValidationErrors)
                {
                    foreach (DbValidationError error in result.ValidationErrors)
                    {
                        innerException = new InvalidOperationException(string.Format("{0}:{1}", result.Entry.Entity.ToString(), error.ErrorMessage), innerException);
                    }
                }
                return null;
            }
        }
    }
    #endregion

    #region Labour Account Controller
    [AuthorizeLabour]
    public class LabourAccountController : Controller
    {
        // Fields
        private SmartLabourEntities dbEntites = new SmartLabourEntities();
        LabourController objLabour = new LabourController();
        // Methods
        public string AcceptPhone(string IsAccepted)
        {
            string connectionString = ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ToString();
            try
            {
                if (base.Session["LABOURID"] != null)
                {
                    string str2 = base.Session["LABOURID"].ToString();
                    SqlConnection connection = new SqlConnection(connectionString);
                    SqlCommand command = new SqlCommand("Pro_AcceptPhone", connection)
                    {
                        CommandType = CommandType.StoredProcedure
                    };
                    command.Parameters.Add(new SqlParameter("@LabourId", str2));
                    command.Parameters.Add(new SqlParameter("@IsPhoneAccepted", Convert.ToBoolean(IsAccepted)));
                    connection.Open();
                    command.ExecuteNonQuery();
                    connection.Close();
                    command.Dispose();
                    connection.Dispose();
                    return "Sucess";
                }
                return "Failure";
            }
            catch
            {
                return "Failure";
            }
        }

        public SelectList BindsexType()
        {
            List<SelectListItem> items = new List<SelectListItem>();
            SelectListItem item = new SelectListItem
            {
                Text = "select",
                Value = "0"
            };
            items.Add(item);
            SelectListItem item2 = new SelectListItem
            {
                Text = "Male",
                Value = "1"
            };
            items.Add(item2);
            SelectListItem item3 = new SelectListItem
            {
                Text = "FeMale",
                Value = "2"
            };
            items.Add(item3);
            return new SelectList(items, "Value", "Text");
        }

        public ActionResult CheckPhoneRequest()
        {
            List<PhoneAsssignedToLabour> list = new List<PhoneAsssignedToLabour>();
            string LabourId = base.Session["LABOURID"].ToString();
            if ((from n in this.dbEntites.phoneAssigntolabour
                 where ((n.LabourID == LabourId) && (n.IsPhoneAccepted == false)) && ((n.IsLabourReceivedPhone == false) || (n.IsLabourReceivedPhone == null))
                 select n).ToList<PhoneAsssignedToLabour>().Count > 0)
            {
                return base.Json("1", JsonRequestBehavior.AllowGet);
            }
            return base.Json("0", JsonRequestBehavior.AllowGet);
        }

        public ActionResult CheckPhoneRequestStatus()
        {
            string requestStatus = "";
            string data = "";
            bool rEQUESTFAMILYSTATUS = false;
            List<RequestPhone> source = new List<RequestPhone>();
            TBL_REQUESTFAMILYSETTINGS_SMT tbl_requestfamilysettings_smt = new TBL_REQUESTFAMILYSETTINGS_SMT();
            tbl_requestfamilysettings_smt = this.dbEntites.Requestsettings.SingleOrDefault<TBL_REQUESTFAMILYSETTINGS_SMT>(n => n.REQUESTPHONEFAMILID == 1);
            if (tbl_requestfamilysettings_smt != null)
            {
                rEQUESTFAMILYSTATUS = tbl_requestfamilysettings_smt.REQUESTFAMILYSTATUS;
            }
            string str3 = base.Session["LABOURID"].ToString();
            source = this.GetuserRequestcount();
            ((dynamic)base.ViewBag).RequestCount = source.Count<RequestPhone>();
            if (source.Count > 0)
            {
                requestStatus = source[0].RequestStatus;
                data = (string)(string.Concat(new object[] { requestStatus, ",", rEQUESTFAMILYSTATUS, "," }) + ((dynamic)base.ViewBag).RequestCount);
                return base.Json(data, JsonRequestBehavior.AllowGet);
            }
            return base.Json("0", JsonRequestBehavior.AllowGet);
        }

        public string Disbute_Transaction(string id, string Reaason)
        {
            try
            {
                string[] strArray = id.Split(new char[] { ',' });
                int index = 0;
                while (index < (strArray.Length - 1))
                {
                    int Transactionid = Convert.ToInt32(strArray[index].ToString());
                    TBL_DISBUTETRANSACTION_SMT tbl_disbutetransaction_smt = new TBL_DISBUTETRANSACTION_SMT();
                    if (this.dbEntites.DisbuteTransaction.SingleOrDefault<TBL_DISBUTETRANSACTION_SMT>(n => (n.TransactionId == Transactionid)) != null)
                    {
                        return "this Transaction Already Disputed  Please try another transaction...";
                    }
                    TBL_DISBUTETRANSACTION_SMT entity = new TBL_DISBUTETRANSACTION_SMT
                    {
                        TransactionId = Transactionid,
                        Createddate = new DateTime?(DateTime.Now),
                        FeedBack = Reaason
                    };
                    this.dbEntites.DisbuteTransaction.Add(entity);
                    this.dbEntites.SaveChanges();
                    return "success";
                }
                return "failure";
            }
            catch (Exception exception)
            {
                return exception.Message.ToString();
            }
        }

        public List<DonatePhone> GetPhoneTransactionHistory(string Labourid)
        {
            try
            {
                Database database = DatabaseFactory.CreateDatabase("DefaultConnection");
                string storedProcedureName = "pro_LabourNotification_List";
                DbCommand storedProcCommand = database.GetStoredProcCommand(storedProcedureName);
                database.AddInParameter(storedProcCommand, "@LabourId", DbType.String, Labourid);
                List<DonatePhone> source = new List<DonatePhone>();
                using (IDataReader reader = database.ExecuteReader(storedProcCommand))
                {
                    while (reader.Read())
                    {
                        DonatePhone item = new DonatePhone
                        {
                            phoneAssignlabour = new PhoneAsssignedToLabour(),
                            PhoneLabour = new Labour(),
                            PhoneRequest = new RequestPhone()
                        };
                        if (reader["Name"] != DBNull.Value)
                        {
                            item.PhoneLabour.Name = reader["Name"].ToString();
                        }
                        if (reader["EmiratesID"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.LabourID = reader["EmiratesID"].ToString();
                        }
                        if (reader["BrandName"] != DBNull.Value)
                        {
                            item.BrandName = reader["BrandName"].ToString();
                        }
                        if (reader["PhoneColor"] != DBNull.Value)
                        {
                            item.PhoneColor = reader["PhoneColor"].ToString();
                        }
                        if (reader["IMEANumber"] != DBNull.Value)
                        {
                            item.IMEANumber = reader["IMEANumber"].ToString();
                        }
                        if (reader["ModelNo"] != DBNull.Value)
                        {
                            item.ModelNo = reader["ModelNo"].ToString();
                        }
                        if (reader["CourierDetail"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.CourierDetail = reader["CourierDetail"].ToString();
                        }
                        if (reader["AssignedDate"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.AssignedDate = new DateTime?(Convert.ToDateTime(reader["AssignedDate"].ToString()));
                        }
                        if (reader["TransactionID"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.PhoneAssignedID = Convert.ToInt32(reader["TransactionID"].ToString());
                        }
                        if (reader["IsPhoneAccepted"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.IsPhoneAccepted = new bool?(Convert.ToBoolean(reader["IsPhoneAccepted"]));
                        }
                        if (reader["IsLabourReceivedPhone"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.IsLabourReceivedPhone = new bool?(Convert.ToBoolean(reader["IsLabourReceivedPhone"]));
                        }
                        if (reader["Status"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.PhoneExpiryDays = reader["Status"].ToString();
                        }
                        if (reader["RequestedDate"] != DBNull.Value)
                        {
                            item.PhoneRequest.RequestedDate = new DateTime?(Convert.ToDateTime(reader["RequestedDate"]));
                        }
                        if (reader["PhoneNumber"] != DBNull.Value)
                        {
                            item.PhoneRequest.PhoneNumber = reader["PhoneNumber"].ToString();
                        }
                        if (reader["AlternatePhoneNumber"] != DBNull.Value)
                        {
                            item.PhoneRequest.AlternatePhoneNumber = reader["AlternatePhoneNumber"].ToString();
                        }
                        if (reader["MailId"] != DBNull.Value)
                        {
                            item.PhoneRequest.MailId = reader["MailId"].ToString();
                        }
                        if (reader["Address"] != DBNull.Value)
                        {
                            item.PhoneRequest.Address = reader["Address"].ToString();
                        }
                        if (reader["NewAddress"] != DBNull.Value)
                        {
                            item.PhoneRequest.MailId = reader["NewAddress"].ToString();
                        }
                        source.Add(item);
                    }
                }
                return source.ToList<DonatePhone>();
            }
            catch
            {
                return null;
            }
        }

        public List<RequestPhone> GetuserRequestcount()
        {
            bool rEQUESTFAMILYSTATUS = false;
            string str = base.Session["LABOURID"].ToString();
            List<RequestPhone> source = new List<RequestPhone>();
            RequestPhone item = new RequestPhone();
            TBL_REQUESTFAMILYSETTINGS_SMT tbl_requestfamilysettings_smt = new TBL_REQUESTFAMILYSETTINGS_SMT();
            tbl_requestfamilysettings_smt = this.dbEntites.Requestsettings.SingleOrDefault<TBL_REQUESTFAMILYSETTINGS_SMT>(n => n.REQUESTPHONEFAMILID == 1);
            if (tbl_requestfamilysettings_smt != null)
            {
                rEQUESTFAMILYSTATUS = tbl_requestfamilysettings_smt.REQUESTFAMILYSTATUS;
            }
            if (base.Session["LABOURID"] != null)
            {
                Database database = DatabaseFactory.CreateDatabase("DefaultConnection");
                string storedProcedureName = "pro_LabourPhoneRequestcount";
                DbCommand storedProcCommand = database.GetStoredProcCommand(storedProcedureName);
                database.AddInParameter(storedProcCommand, "@Labourid", DbType.String, str);
                using (IDataReader reader = database.ExecuteReader(storedProcCommand))
                {
                    while (reader.Read())
                    {
                        if (reader["count"] != DBNull.Value)
                        {
                            item.RequestCount = Convert.ToInt32(reader["count"].ToString());
                        }
                        if (reader["RequestStatus"] != DBNull.Value)
                        {
                            item.RequestStatus = reader["RequestStatus"].ToString();
                        }
                        item.Requestsettings = rEQUESTFAMILYSTATUS;
                        source.Add(item);
                    }
                }
                return source.ToList<RequestPhone>();
            }
            source.Add(item);
            return source.ToList<RequestPhone>();
        }

        public ActionResult Notification()
        {
            base.TempData["currentgetid"] = "idlabour";
            string str = base.Session["LABOURID"].ToString();
            if (base.Session["LABOURID"] != null)
            {
                Database database = DatabaseFactory.CreateDatabase("DefaultConnection");
                string storedProcedureName = "pro_PhoneAvailable";
                DbCommand storedProcCommand = database.GetStoredProcCommand(storedProcedureName);
                database.AddInParameter(storedProcCommand, "@Labourid", DbType.String, str);
                List<DonatePhone> model = new List<DonatePhone>();
                using (IDataReader reader = database.ExecuteReader(storedProcCommand))
                {
                    while (reader.Read())
                    {
                        DonatePhone item = new DonatePhone
                        {
                            phoneAssignlabour = new PhoneAsssignedToLabour()
                        };
                        if (reader["BrandName"] != DBNull.Value)
                        {
                            item.BrandName = reader["BrandName"].ToString();
                        }
                        if (reader["PhoneColor"] != DBNull.Value)
                        {
                            item.PhoneColor = reader["PhoneColor"].ToString();
                        }
                        if (reader["IMEANumber"] != DBNull.Value)
                        {
                            item.IMEANumber = reader["IMEANumber"].ToString();
                        }
                        if (reader["ModelNo"] != DBNull.Value)
                        {
                            item.ModelNo = reader["ModelNo"].ToString();
                        }
                        if (reader["CourierDetail"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.CourierDetail = reader["CourierDetail"].ToString();
                        }
                        if (reader["DeliveredDate"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.DeliveredDate = new DateTime?(Convert.ToDateTime(reader["DeliveredDate"].ToString()));
                        }
                        if (reader["TransactionID"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.PhoneAssignedID = Convert.ToInt32(reader["TransactionID"].ToString());
                        }
                        if (reader["AssignedDate"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.AssignedDate = new DateTime?(Convert.ToDateTime(reader["AssignedDate"]));
                        }
                        if (reader["DaysLeft"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.PhoneExpiryDays = reader["DaysLeft"].ToString();
                        }
                        model.Add(item);
                    }
                }
                List<DonatePhone> list2 = new List<DonatePhone>();
                ((dynamic)base.ViewBag).labourhistory = this.GetPhoneTransactionHistory(str).ToList<DonatePhone>();
                return base.View(model);
            }
            return base.View();
        }

        [HttpGet]
        public ActionResult PhoneRegister()
        {
            try
            {
                base.TempData["currentgetid"] = "idlabour";
                RequestPhone model = new RequestPhone();
                List<RequestPhone> list = new List<RequestPhone>();
                string LabourId = base.Session["LABOURID"].ToString();
                ((dynamic)base.ViewBag).RequestCount = this.GetuserRequestcount().Count<RequestPhone>();
                Labour labour = this.dbEntites.Labours.SingleOrDefault<Labour>(n => n.LabourID == LabourId);
                if (labour != null)
                {
                    model.Address = labour.Address1;
                    model.MailId = labour.EmailID;
                    model.LabourID = labour.LabourID;
                    model.PhoneNumber = labour.PhoneNumber;
                }
                return base.View(model);
            }
            catch
            {
                return this.Redirect("/Home/index");
            }
        }

        [HttpPost]
        public ActionResult PhoneRegister(RequestPhone objRequestphone)
        {
            try
            {
                string connectionString = ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ToString();
                base.TempData["currentgetid"] = "idlabour";
                if (base.ModelState.IsValid)
                {
                    string str2 = base.Session["LABOURID"].ToString();
                    SqlConnection connection = new SqlConnection(connectionString);
                    SqlCommand selectCommand = new SqlCommand("pro_RequestPending", connection)
                    {
                        CommandType = CommandType.StoredProcedure
                    };
                    selectCommand.Parameters.Add(new SqlParameter("@LabourId", str2));
                    SqlDataAdapter adapter = new SqlDataAdapter(selectCommand);
                    DataSet dataSet = new DataSet();
                    adapter.Fill(dataSet);
                    adapter.Dispose();
                    selectCommand.Dispose();
                    connection.Dispose();
                    if (Convert.ToInt32(dataSet.Tables[0].Rows[0][0]) == 0)
                    {
                        return base.Json("You already have a pending request", JsonRequestBehavior.AllowGet);
                    }
                    RequestPhone entity = new RequestPhone
                    {
                        MailId = objRequestphone.MailId,
                        NewAddress = objRequestphone.NewAddress,
                        PhoneNumber = objRequestphone.PhoneNumber,
                        AlternatePhoneNumber = objRequestphone.AlternatePhoneNumber,
                        LabourID = objRequestphone.LabourID,
                        Address = objRequestphone.Address,
                        RequestStatus = objRequestphone.RequestStatus,
                        RequestedDate = new DateTime?(DateTime.Now)
                    };
                    this.dbEntites.RequestPhones.Add(entity);
                    this.dbEntites.SaveChanges();
                    ((dynamic)base.ViewBag).messagealert = "Phone Request Send Successfully";
                    return base.Json("success", JsonRequestBehavior.AllowGet);
                }
                return base.View(objRequestphone);
            }
            catch
            {
                return base.Json("Request Failure please try again later...");
            }
        }

        public ActionResult PhoneRequestHistory()
        {
            try
            {
                base.TempData["currentgetid"] = "idlabour";
                string str = base.Session["LABOURID"].ToString();
                if (base.Session["LABOURID"] != null)
                {
                    Database database = DatabaseFactory.CreateDatabase("DefaultConnection");
                    string storedProcedureName = "pro_PhoneAcceptedLabourHistory";
                    DbCommand storedProcCommand = database.GetStoredProcCommand(storedProcedureName);
                    database.AddInParameter(storedProcCommand, "@Labourid", DbType.String, str);
                    List<DonatePhone> model = new List<DonatePhone>();
                    using (IDataReader reader = database.ExecuteReader(storedProcCommand))
                    {
                        while (reader.Read())
                        {
                            DonatePhone item = new DonatePhone
                            {
                                phoneAssignlabour = new PhoneAsssignedToLabour()
                            };
                            if (reader["BrandName"] != DBNull.Value)
                            {
                                item.BrandName = reader["BrandName"].ToString();
                            }
                            if (reader["PhoneColor"] != DBNull.Value)
                            {
                                item.PhoneColor = reader["PhoneColor"].ToString();
                            }
                            if (reader["IMEANumber"] != DBNull.Value)
                            {
                                item.IMEANumber = reader["IMEANumber"].ToString();
                            }
                            if (reader["ModelNo"] != DBNull.Value)
                            {
                                item.ModelNo = reader["ModelNo"].ToString();
                            }
                            if (reader["CourierDetail"] != DBNull.Value)
                            {
                                item.phoneAssignlabour.CourierDetail = reader["CourierDetail"].ToString();
                            }
                            if (reader["DeliveredDate"] != DBNull.Value)
                            {
                                item.phoneAssignlabour.DeliveredDate = new DateTime?(Convert.ToDateTime(reader["DeliveredDate"].ToString()));
                            }
                            if (reader["TransactionID"] != DBNull.Value)
                            {
                                item.phoneAssignlabour.PhoneAssignedID = Convert.ToInt32(reader["TransactionID"].ToString());
                            }
                            if (reader["PhoneStatus"] != DBNull.Value)
                            {
                                item.phoneAssignlabour.IsPhoneAccepted = new bool?(Convert.ToBoolean(reader["PhoneStatus"].ToString()));
                            }
                            if (reader["IsLabourReceivedPhone"] != DBNull.Value)
                            {
                                item.phoneAssignlabour.IsLabourReceivedPhone = new bool?(Convert.ToBoolean(reader["IsLabourReceivedPhone"].ToString()));
                            }
                            if (reader["IsTimeExpired"] != DBNull.Value)
                            {
                                item.phoneAssignlabour.IsTimeExpired = Convert.ToBoolean(reader["IsTimeExpired"].ToString());
                            }
                            if (reader["AssignedDate"] != DBNull.Value)
                            {
                                item.phoneAssignlabour.AssignedDate = new DateTime?(Convert.ToDateTime(reader["AssignedDate"].ToString()));
                            }
                            model.Add(item);
                        }
                    }
                    return base.View(model);
                }
                return this.Redirect("/Home/index");
            }
            catch (Exception)
            {
                return null;
            }
        }

        [HttpGet]
        public ActionResult PostTestimonial()
        {
            base.TempData["currentgetid"] = "idlabour";
            string str = base.Session["LABOURID"].ToString();
            if (base.Session["LABOURID"] != null)
            {
            }
            return base.View();
        }

        [HttpPost]
        public ActionResult PostTestimonial(TBL_TESTIMONIAL_SMT objTestimonial, HttpPostedFileBase image)
        {
            base.TempData["currentgetid"] = "idlabour";
            string str = base.Session["LABOURID"].ToString();
            if (base.Session["LABOURID"] != null)
            {
                try
                {
                    string[] strArray;
                    objTestimonial.Status = false;
                    if (base.ModelState.IsValid)
                    {
                        if ((objTestimonial.videoFile != string.Empty) && (objTestimonial.videoFile != null))
                        {
                            strArray = objTestimonial.videoFile.Split(new char[] { '|' });
                            if (strArray.Length == 2)
                            {
                                objTestimonial.Mp4filename = strArray[0];
                                objTestimonial.Webmfilename = strArray[1];
                            }
                        }

                        if ((from n in this.dbEntites.Testimonial
                             where n.Title.ToLower().Trim() == objTestimonial.Title.ToLower().Trim()
                             select n).ToList<TBL_TESTIMONIAL_SMT>().Count > 0)
                        {
                            ((dynamic)base.ViewBag).messagealert = "Testimonial Title Already Exists";
                            return base.View(objTestimonial);
                        }

                        if (image != null)
                        {
                            string fileName = Path.GetFileName(image.FileName);
                            string str3 = "";
                            string str4 = "";
                            string str5 = Path.GetExtension(fileName.ToString()).ToLower();
                            string[] strArray2 = new string[] { ".png", ".jpg", ".gif" };
                            for (int i = 0; i < strArray2.Length; i++)
                            {
                                if (str5 == strArray2[i])
                                {
                                    str3 = strArray2[i].ToString();
                                }
                            }
                            string str6 = DateTime.Now.ToString("ddMMyyhhmmss");
                            string[] strArray3 = fileName.ToString().Split(new char[] { '.' });
                            if (strArray3[0].ToString().Length > 30)
                            {
                                str4 = strArray3[0].ToString().Substring(0, 0x1d) + str6 + str3.ToString();
                            }
                            else
                            {
                                str4 = strArray3[0].ToString() + str6 + str3.ToString();
                            }
                            string filename = Path.Combine(base.Server.MapPath("~/Content/Admin/images/Testimonial/"), str4);
                            image.SaveAs(filename);
                            objTestimonial.Image = str4;
                        }
                        objTestimonial.videoFile = objTestimonial.videoFile;
                        this.dbEntites.Testimonial.Add(objTestimonial);
                        this.dbEntites.SaveChanges();
                        base.TempData["messagealert"] = "Thank you For Posting Testimonial !!";
                        return base.RedirectToAction("ProfileDetails");
                    }

                    if ((objTestimonial.videoFile != string.Empty) && (objTestimonial.videoFile != null))
                    {
                        strArray = objTestimonial.videoFile.Split(new char[] { '|' });
                        if (strArray.Length == 2)
                        {
                            objTestimonial.Mp4filename = strArray[0];
                            objTestimonial.Webmfilename = strArray[1];
                        }
                    }
                    return base.View(objTestimonial);
                }
                catch
                {
                    return this.Redirect("/");
                }
            }
            return base.View();
        }

        [HttpGet]
        public ActionResult ProfileDetails()
        {
            try
            {
                int userId = Convert.ToInt32(base.Session["FUSERID"].ToString());
                ((dynamic)base.ViewBag).sex = this.BindsexType();
                Labour model = this.dbEntites.Labours.SingleOrDefault<Labour>(n => n.UserID == userId);
                string CountryCode = (from n in this.dbEntites.Country where n.CountryName == model.Country select n.CountryCode).SingleOrDefault();
                base.TempData["currentgetid"] = "idlabour";
                if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"].ToString() != ""))
                {
                    ((dynamic)base.ViewBag).Testimonialalert = "Thank you For Posting Testimonial !!";
                }
                model.CountryCode = CountryCode;
                int Orgg = Convert.ToInt32(model.CategoryId);
                ((dynamic)base.ViewBag).CategoryList = objLabour.getCategoryList(model.OrgId);
                ((dynamic)base.ViewBag).SubCategoryList = objLabour.getSubCategoryList(Orgg);
                return base.View(model);
            }
            catch
            {
                return null;
            }
        }

        [HttpPost]
        public ActionResult ProfileDetails(Labour objLabour, IEnumerable<HttpPostedFileBase> UploadImage)
        {
            try
            {
               // string CountryCode = (from n in this.dbEntites.Country where n.CountryName == objLabour.Country select n.CountryCode).SingleOrDefault();
                
                base.TempData["currentgetid"] = "idlabour";
                if(objLabour.CountryCode==null || objLabour.CountryCode==string.Empty)
                {
                    return View(objLabour);
                }

                if (base.ModelState.IsValid)
                {
                    Labour labour = this.dbEntites.Labours.SingleOrDefault<Labour>(n => n.UserID == objLabour.UserID);
                    if (UploadImage != null)
                    {
                        foreach (HttpPostedFileBase base2 in UploadImage)
                        {
                            if (base2 != null)
                            {
                                string fileName = Path.GetFileName(base2.FileName);
                                string str2 = "";
                                string str3 = "";
                                string str4 = Path.GetExtension(fileName.ToString()).ToLower();
                                string[] strArray = new string[] { ".png", ".jpg", ".gif", ".jpeg" };
                                for (int i = 0; i < strArray.Length; i++)
                                {
                                    if (str4 == strArray[i])
                                    {
                                        str2 = strArray[i].ToString();
                                    }
                                }
                                string str5 = DateTime.Now.ToString("ddMMyyhhmmss");
                                fileName = fileName.Replace(" ", "");
                                string[] strArray2 = fileName.ToString().Split(new char[] { '.' });
                                if (fileName.ToString().Length > 30)
                                {
                                    str3 = strArray2[0].ToString().Substring(0, 30) + str5 + str2.ToString();
                                }
                                else
                                {
                                    str3 = strArray2[0].ToString() + str5 + str2.ToString();
                                }
                                string filename = Path.Combine(base.Server.MapPath("~/Content/Front/Images/LabourImage/"), str3);
                                base2.SaveAs(filename);
                                labour.LabourImage = str3;
                            }
                        }
                    }
                    labour.Name = objLabour.Name;
                    labour.DOB = objLabour.DOB;
                    labour.LabourImage = objLabour.LabourImage;
                    labour.EmailID = objLabour.EmailID;
                    labour.LabourID = objLabour.LabourID;
                    labour.Pincode = objLabour.Pincode;
                    labour.Address1 = objLabour.Address1;
                    labour.Address2 = objLabour.Address2;
                    labour.PhoneNumber = objLabour.PhoneNumber;
                    labour.STATUS = objLabour.STATUS;
                    labour.Sex = objLabour.Sex;
                    labour.OrgName = "Dummy";
                    labour.City = objLabour.City;
                    labour.Address2 = objLabour.Address2;
                    labour.State = objLabour.State;
                    labour.Country = objLabour.Country;
                    labour.Password = objLabour.Password;
                    labour.ConfirmPassword = objLabour.Password;
                    labour.IsDisplayNameAccepted = objLabour.IsDisplayNameAccepted;
                    labour.MODIFIEDBY = objLabour.Name;
                    labour.MODIFIEDDATE = new DateTime?(DateTime.Now);
                    this.dbEntites.SaveChanges();
                    return base.RedirectToAction("/ProfileDetails");
                }
                return base.View(objLabour);
            }
            catch (DbEntityValidationException exception)
            {
                Exception innerException = exception;
                foreach (DbEntityValidationResult result in exception.EntityValidationErrors)
                {
                    foreach (DbValidationError error in result.ValidationErrors)
                    {
                        innerException = new InvalidOperationException(string.Format("{0}:{1}", result.Entry.Entity.ToString(), error.ErrorMessage), innerException);
                    }
                }
                return null;
            }
        }
    }
    #endregion

    #region Labour Controller
    public class LabourController : Controller
    {
        // Fields
        private SmartLabourEntities db = new SmartLabourEntities();
        private CommonClass objCommon = new CommonClass();
        private static int pagesize = 9;
        // Methods
        public SelectList BindsexType()
        {
            List<SelectListItem> items = new List<SelectListItem>();
            SelectListItem item = new SelectListItem
            {
                Text = "Select",
                Value = "0"
            };
            items.Add(item);
            SelectListItem item2 = new SelectListItem
            {
                Text = "Male",
                Value = "1"
            };
            items.Add(item2);
            SelectListItem item3 = new SelectListItem
            {
                Text = "Female",
                Value = "2"
            };
            items.Add(item3);
            return new SelectList(items, "Value", "Text");
        }

        public ActionResult CheckEmailId(string EmailId)
        {
            string data = "";
            if ((from n in this.db.Labours
                 where n.EmailID.ToLower().Trim() == EmailId.ToLower().Trim()
                 select n).ToList<Labour>().Count > 0)
            {
                data = "Email Id Already Exists!!";
                return base.Json(data, JsonRequestBehavior.AllowGet);
            }
            return base.Json(data, JsonRequestBehavior.AllowGet);
        }

        public ActionResult CheckLabourId(string LabourId)
        {
            string data = "";
            if ((from n in this.db.Labours
                 where n.LabourID.ToLower().Trim() == LabourId.ToLower().Trim()
                 select n).ToList<Labour>().Count > 0)
            {
                data = "Labour Id Already Exists!!";
                return base.Json(data, JsonRequestBehavior.AllowGet);
            }
            return base.Json(data, JsonRequestBehavior.AllowGet);
        }

        public SelectList getServiceProvider()
        {
            return new SelectList(from m in
                                      (from m in this.db.ServiceProvider
                                       where m.STATUS
                                       select m).AsEnumerable<TBL_SERVICEPROVIDER_SMT>()
                                  select new SelectListItem { Text = m.SERVICEPROVIDER, Value = m.SERVICEPROVIDERID.ToString() }, "Value", "Text");
        }

        public SelectList getOrgServiceProvider(int id)
        {
            return new SelectList(from m in
                                      (from m in this.db.ServiceProvider
                                       where m.STATUS && m.OrgId == id && m.IsTelcomOperator == true
                                       select m).AsEnumerable<TBL_SERVICEPROVIDER_SMT>()
                                  select new SelectListItem { Text = m.SERVICEPROVIDER, Value = m.SERVICEPROVIDERID.ToString() }, "Value", "Text");
        }

        public ActionResult LabourDetails(int? page)
        {
            List<Labour> source = new List<Labour>();
            ((dynamic)base.ViewBag).main = 1;
            int count = 0;
            if (page.HasValue)
            {
                int? nullable2 = page - 1;
                count = nullable2.Value * pagesize;
                base.Session["Cpage"] = page;
            }
            if (!page.HasValue)
            {
                ((dynamic)base.ViewBag).CurrentPage = 1;
                page = 1;
            }
            else
            {
                ((dynamic)base.ViewBag).CurrentPage = page;
            }
            source = (from n in this.db.Labours
                      where n.IsDisplayNameAccepted && n.STATUS
                      select n).ToList<Labour>();
            if ((source.Count<Labour>() % pagesize) == 0)
            {
                ((dynamic)base.ViewBag).TotalPages = source.Count<Labour>() / pagesize;
            }
            else
            {
                ((dynamic)base.ViewBag).TotalPages = (source.Count<Labour>() / pagesize) + 1;
            }
            count = (Convert.ToInt32(page) * 9) - 9;
            ((dynamic)base.ViewBag).Labour = source.Skip<Labour>(count).Take<Labour>(pagesize).ToList<Labour>();
            base.TempData["currentgetid"] = "idLabourDetails";
            return base.View();
        }

        [HttpGet]
        public ActionResult MyAccount()
        {
            return base.View();
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpPost]
        public ActionResult MyAccount(ChangePasswordModel ChangePWD)
        {
            if (base.ModelState.IsValid)
            {
                long iuserid = 3L;
                Labour model = this.db.Labours.SingleOrDefault<Labour>(n => n.UserID == iuserid);
                try
                {
                    if (model.Password == ChangePWD.OldPassword)
                    {
                        model.Password = ChangePWD.NewPassword;
                        if (base.TryUpdateModel<Labour>(model))
                        {
                            this.db.SaveChanges();
                            string str = new Mailing().SendMailforchangepassword(model.EmailID, "You have recently changed your password", model.Name, model.Password);
                            base.ModelState.AddModelError("", "Password Changed successfully");
                        }
                    }
                    else
                    {
                        base.ModelState.AddModelError("OldPassword", "The current password is incorrect");
                    }
                }
                catch
                {
                    base.ModelState.AddModelError("", "The current password is incorrect or the new password is invalid.");
                }
            }
            return base.View(ChangePWD);
        }

        [HttpGet]
        public ActionResult Register(FormCollection c)
        {
            OrganizationSubAdminController objMail = new OrganizationSubAdminController();
            ((dynamic)base.ViewBag).GetOrganizationNamelist = objMail.GetOrganizationNamelist();
            ViewBag.main = 1;
            ((dynamic)base.ViewBag).sex = this.BindsexType();
            Labour model = new Labour();
            ((dynamic)base.ViewBag).serviceprovider = this.getServiceProvider();

            CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
            if (currentCulture.Name == "en-IN")
            {
                model.CountryCode = "+91";
            }
            model.EmailID =string.Empty;
            model.Password = string.Empty;
            return base.View(model);
        }


        [HttpPost]
        public ActionResult Register(Labour objLabour, IEnumerable<HttpPostedFileBase> UploadImage)
        {
            try
            {
                //base.ViewData["ResultImport"] = msg; Thiyagu
                OrganizationSubAdminController objMail = new OrganizationSubAdminController();
                ((dynamic)base.ViewBag).serviceprovider = this.getOrgServiceProvider(1);
                ((dynamic)base.ViewBag).sex = this.BindsexType();
                List<Labour> list = new List<Labour>();
                List<Labour> list2 = new List<Labour>();
                list = (from n in this.db.Labours
                        where n.EmailID.ToLower().Trim() == objLabour.EmailID.ToLower().Trim()
                        select n).ToList<Labour>();
                list2 = (from n in this.db.Labours
                         where n.LabourID == objLabour.LabourID
                         select n).ToList<Labour>();
                if (list.Count > 0)
                {
                    ((dynamic)base.ViewBag).EmailMsg = "Email ID already exist ";
                }
                else
                {
                    ((dynamic)base.ViewBag).EmailMsg = "";
                }
                if (list2.Count > 0)
                {
                    ((dynamic)base.ViewBag).EmiratesMsg = "Emirates ID already exists";
                }
                else
                {
                    ((dynamic)base.ViewBag).EmiratesMsg = "";
                }

                int Orgid = 0;
                if (objLabour.SubCategoryId == 0 || objLabour.SubCategoryId == null)
                {
                    int count = GetSubcategoryCount2(Convert.ToInt16(objLabour.CategoryId));
                    if (count > 0)
                    {
                        ((dynamic)base.ViewBag).SubCategoryMsg = "Please select Sub Category";
                        return this.View(objLabour);
                    }
                    else
                    {
                        ((dynamic)base.ViewBag).SubCategoryMsg = "";
                    }
                }//OrgMsg

               
                Orgid = (from m in this.db.Organisation where m.OrganisationName.ToLower().Trim() == objLabour.OrgName.ToLower().Trim() select m.OrgId).FirstOrDefault();

             //   int CategoryId = (from m in this.db.Category where m.CategoryName.ToLower().Trim() == objLabour.CategoryName.ToLower().Trim() select m.CategoryId).FirstOrDefault();
               // int? SubCategoryId = (from m in this.db.SubCategory where m.SubCategoryName.ToLower().Trim() == objLabour.SubCategoryName.ToLower().Trim() select m.SubCategoryId).FirstOrDefault();
                if (objLabour.OrgName == string.Empty)
                {
                    Orgid = 1;
                    objLabour.OrgName = (from n in this.db.Organisation where n.OrgId == Orgid select n.OrganisationName).SingleOrDefault();
                }

                if (Orgid == 0)
                {
                    ((dynamic)base.ViewBag).OrgMsg = "Organization Name does not Exists";
                    return this.View(objLabour);
                }
              
                if (base.ModelState.IsValid)
                {
                    SmartLabourEntities entities = new SmartLabourEntities();
                    if (UploadImage != null)
                    {
                        foreach (HttpPostedFileBase base2 in UploadImage)
                        {
                            if (base2 != null)
                            {
                                string fileName = Path.GetFileName(base2.FileName);
                                string str2 = "";
                                string str3 = "";
                                string str4 = Path.GetExtension(fileName.ToString()).ToLower();
                                string[] strArray = new string[] { ".png", ".jpg", ".gif", ".jpeg" };
                                for (int i = 0; i < strArray.Length; i++)
                                {
                                    if (str4 == strArray[i])
                                    {
                                        str2 = strArray[i].ToString();
                                    }
                                }
                                string str5 = DateTime.Now.ToString("ddMMyyhhmmss");
                                fileName = fileName.Replace(" ", "");
                                string[] strArray2 = fileName.ToString().Split(new char[] { '.' });
                                if (fileName.ToString().Length > 30)
                                {
                                    str3 = strArray2[0].ToString().Substring(0, 30) + str5 + str2.ToString();
                                }
                                else
                                {
                                    str3 = strArray2[0].ToString() + str5 + str2.ToString();
                                }
                                string filename = Path.Combine(base.Server.MapPath("~/Content/Front/Images/LabourImage/"), str3);
                                base2.SaveAs(filename);
                                objLabour.LabourImage = str3;
                            }
                        }
                    }
                    else
                    {
                        objLabour.LabourImage = "";
                    }
                    int OrgId = (from m in this.db.Organisation where m.OrganisationName == objLabour.OrgName select m.OrgId).FirstOrDefault();
                    if (OrgId == 0)
                    {
                        return this.View(objLabour);
                    }
                    objLabour.CategoryId = objLabour.CategoryId;
                    if(objLabour.SubCategoryId==0)
                    {
                        objLabour.SubCategoryId = null;                   
                    }
                    
                    objLabour.OrgId = OrgId;
                    objLabour.EmailID = objLabour.EmailID;
                    objLabour.STATUS = false;
                    int day = Convert.ToInt16(objLabour.Day);
                    int month = Convert.ToInt16(objLabour.Month);
                    int year = Convert.ToInt16(objLabour.Year);
                    objLabour.DOB = new DateTime(year, month, day);
                    objLabour.CREATEDDATE = new DateTime?(DateTime.Now);
                    objLabour.CREATEDBY = objLabour.Name;
                    objLabour.CreatedFrom = false;
                    objLabour.State = objLabour.State;
                    objLabour.Country = objLabour.Country;
                    objLabour.Address2 = objLabour.Address2;
                    objLabour.City = objLabour.City;                   
                    objLabour.OrgName = "Dummy";
                    entities.Labours.Add(objLabour);
                    entities.SaveChanges();
                    Mailing objMailLogin = new Mailing();
                    base.TempData["Success"] = 1;
                    List<TBL_ADMINLOGIN_SMT> Oid = (from m in this.db.AdminLogin where m.OrgId == objLabour.OrgId select m).ToList<TBL_ADMINLOGIN_SMT>();
                    foreach (TBL_ADMINLOGIN_SMT org in Oid)
                    {//New User with Emirates ID (Emirates ID) has been created successfully in your organisation !.
                        objCommon.SendingMail(org.USEREMAIL, "Smart Labour - New Labour Registered", org.USEREMAIL, "", "", "New User with Emirates ID ( " + objLabour.LabourID + " )  has been created successfully in your organisation !.");
                    }
                    objCommon.SendingMail(objLabour.EmailID, "WELCOME TO Smart Labour", objLabour.EmailID, "", "", "Your account has been created successfully !.");             
                 return this.Redirect("/");
                }
                return base.View(objLabour);
            }
            catch (DbEntityValidationException exception)
            {
                Exception innerException = exception;
                foreach (DbEntityValidationResult result in exception.EntityValidationErrors)
                {
                    foreach (DbValidationError error in result.ValidationErrors)
                    {
                        innerException = new InvalidOperationException(string.Format("{0}:{1}", result.Entry.Entity.ToString(), error.ErrorMessage), innerException);
                    }
                }
                return null;
            }
        }

        public ActionResult SignInforLabour(string EmailID, string Password, string RememberMe)
        {
            try
            {
                Labour objLogin = new Labour
                {
                    EmailID = EmailID.ToString(),
                    Password = Password.ToString()
                };
                if (RememberMe == "true")
                {

                    base.Response.Cookies["LUserName"].Value = EmailID.ToString();
                    base.Response.Cookies["LPassword"].Value = Password.ToString();
                    base.Response.Cookies["LUserName"].Expires = DateTime.Now.AddDays(15.0);
                    base.Response.Cookies["LPassword"].Expires = DateTime.Now.AddDays(15.0);
                }
                else
                {
                    base.Response.Cookies["LUserName"].Expires = DateTime.Now.AddDays(-1.0);
                    base.Response.Cookies["LPassword"].Expires = DateTime.Now.AddDays(-1.0);
                }
                if ((from n in this.db.Labours
                     where n.EmailID == objLogin.EmailID || n.LabourID==objLogin.EmailID 
                     select n).Count<Labour>() > 0)
                {
                    Labour labour = this.db.Labours.SingleOrDefault<Labour>(n =>( (n.EmailID == objLogin.EmailID) ||(n.LabourID==objLogin.EmailID)) && (n.Password == objLogin.Password));
                    if (labour != null)
                    {
                        if (labour.STATUS)
                        {
                            base.Session["FUSERNAME"] = labour.Name.ToString();
                            base.Session["LABOURID"] = labour.LabourID.ToString();
                            base.Session["FUSERID"] = labour.UserID.ToString();
                            base.Session["UserType"] = "Labour";
                            FormsAuthentication.SetAuthCookie(EmailID, true);
                            return base.Json("1", JsonRequestBehavior.AllowGet);
                        }
                        return base.Json("4", JsonRequestBehavior.AllowGet);
                    }
                    return base.Json("2", JsonRequestBehavior.AllowGet);
                }
                return base.Json("3", JsonRequestBehavior.AllowGet);
            }
            catch
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);
            }
        }

        #region Auto Complete

        public JsonResult GetTelecomOperator(string Orgname)
        {
            int OrgId = (from m in this.db.Organisation where m.OrganisationName == Orgname select m.OrgId).FirstOrDefault();
            if (OrgId == 0)
            {
                ((dynamic)base.ViewBag).OrgMsg = "Organization Does Not Exists";
            }
            else if (OrgId > 0)
            {
                ((dynamic)base.ViewBag).OrgMsg = "";
            }
            SelectList ServiceProvider = this.getOrgServiceProvider(OrgId);
            return Json(ServiceProvider, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult OrgNameAutoComplete(string term)
        {
            try
            {
                var OrgNameList = (from m in this.db.Organisation where m.OrganisationName.StartsWith(term) select m.OrganisationName).Take(10);
                return Json(OrgNameList, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                List<string> stateNameList1 = new List<string>();
                return Json(stateNameList1, JsonRequestBehavior.AllowGet);

            }

        }

        [HttpGet]
        public JsonResult CategoryNameAutoComplete(string term, string org)
        {
            int OrgId = 0;
            OrgId = (from n in this.db.Organisation where n.OrganisationName == org select n.OrgId).SingleOrDefault();
            var CategoryNameList = (from m in this.db.Category where m.CategoryName.StartsWith(term) & m.Status == true & m.OrgId == OrgId select m.CategoryName).Take(10);
            return Json(CategoryNameList, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult SubCategoryNameAutoComplete(string term, string Category)
        {
            int CategoryId = 0;
            CategoryId = (from n in this.db.Category where n.CategoryName == Category select n.CategoryId).SingleOrDefault();
            var SubCategoryNameList = (from m in this.db.SubCategory where m.SubCategoryName.StartsWith(term) & m.Status == true & m.CategoryId == CategoryId select m.SubCategoryName).Take(10);
            return Json(SubCategoryNameList, JsonRequestBehavior.AllowGet);
        } 


        [HttpGet]
        public JsonResult GetCountryNameAutoComplete(string term)
        { 
            var CountryNameList = (from n in this.db.Country where n.CountryName.StartsWith(term) select n.CountryName).Take(10);
            return Json(CountryNameList, JsonRequestBehavior.AllowGet);
        }
        //GetCountryCode

        public JsonResult GetCountryCode(string Country)
        {
            string CountryCode = (from m in this.db.Country where m.CountryName.ToLower().Trim() == Country.ToLower().Trim() select m.CountryCode).FirstOrDefault();
            if (CountryCode==null)
            {
                CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
                if (currentCulture.Name == "en-IN")
                {
                    CountryCode = "+91";
                }     
            }
            return Json(CountryCode, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetSubcategoryCount(string Category)
        {
            int count = 0;
            int CategoryId = 0;
            CategoryId = (from m in this.db.Category where m.CategoryName.ToLower().Trim() == Category.ToLower().Trim() select m.CategoryId).FirstOrDefault();

            count = (from n in this.db.SubCategory
                     join m in this.db.Category on n.CategoryId equals m.CategoryId
                     where m.CategoryName.ToLower().Trim() == Category.ToLower().Trim()
                     select n).Count();
            if (CategoryId == 0)
            {
                count = -1;
                ((dynamic)base.ViewBag).CategoryMsg = "Category Name does not Exists";
            }
            else
            {
                ((dynamic)base.ViewBag).CategoryMsg = "";
            }
            return Json(count, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetSubCategory(string SubCategory)
        {
            int SubCategoryId = (from m in this.db.SubCategory where m.SubCategoryName.ToLower().Trim() == SubCategory.ToLower().Trim() select m.SubCategoryId).FirstOrDefault();
            return Json(SubCategoryId, JsonRequestBehavior.AllowGet);
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Orgname"></param>
        /// <returns></returns>
        public JsonResult GetCategory(string Orgname)
        {
            int OrgId = 0;            
           OrgId = (from m in this.db.Organisation where m.OrganisationName.ToLower().Trim() == Orgname.ToLower().Trim() select m.OrgId).FirstOrDefault();         

            SelectList CategoryList = this.getCategoryList(OrgId);
            return Json(CategoryList, JsonRequestBehavior.AllowGet);
        }


        /// <summary>
        /// Category Drop Downlist
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public SelectList getCategoryList(int id)
        {
            return new SelectList(from m in
                                      (from m in this.db.Category
                                       where (m.Status == true) && (m.OrgId == id)
                                       select m).AsEnumerable<TBL_CategoryMaster>()
                                  orderby m.CategoryName ascending
                                  select new SelectListItem { Text = m.CategoryName, Value = m.CategoryId.ToString() }, "Value", "Text");
        }



        /// <summary>
        /// 
        /// </summary>
        /// <param name="Orgname"></param>
        /// <returns></returns>
        public JsonResult GetlabourSubCategory(int CategoryId)
        {
            SelectList SubCategoryList = this.getSubCategoryList(CategoryId);
            return Json(SubCategoryList, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Get The Count Of SubCategory for Selected Category
        /// </summary>
        /// <param name="CategoryId"></param>
        /// <returns></returns>
        public int GetSubcategoryCount2(int CategoryId)
        {
            int count = 0;
            count = (from n in this.db.SubCategory
                     join m in this.db.Category on n.CategoryId equals m.CategoryId
                     where m.CategoryId == CategoryId
                     select n).Count();
            return count;
        }



        /// <summary>
        /// Get List of SubCategory for Selected Category
        /// </summary>
        /// <param name="CategoryId"></param>
        /// <returns></returns>
        public SelectList getSubCategoryList(int CategoryId)
        {
            return new SelectList(from m in
                                      (from m in this.db.SubCategory
                                       where (m.Status == true) && (m.CategoryId == CategoryId)
                                       select m).AsEnumerable<TBL_SubCategoryMaster>()
                                  orderby m.SubCategoryName ascending
                                  select new SelectListItem { Text = m.SubCategoryName, Value = m.SubCategoryId.ToString() }, "Value", "Text");
        }


    }
    #endregion

    #region Phone History
    [AuthorizeUser]
    public class PhoneAcceptedHistoryController : BaseController
    {
        // Fields
        private SmartLabourEntities dbEntites = new SmartLabourEntities();

        // Methods
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpGet]
        public ActionResult AddCourierDetails(int id)
        {
            base.TempData["currentgetidss"] = "PhoneDetails";
            PhoneAsssignedToLabour objPhone = this.dbEntites.phoneAssigntolabour.SingleOrDefault<PhoneAsssignedToLabour>(n => n.PhoneAssignedID == id);
            objPhone.objlabour = this.dbEntites.Labours.SingleOrDefault<Labour>(n => n.LabourID == objPhone.LabourID);
            List<DonatePhone> list = new List<DonatePhone>();
            ((dynamic)base.ViewBag).labourhistory = this.GetPhoneTransactionHistory(id).ToList<DonatePhone>();
            return base.View(objPhone);
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpPost]
        public ActionResult AddCourierDetails(int id, PhoneAsssignedToLabour PhoneHistory)
        {
            try
            {
                base.TempData["currentgetidss"] = "PhoneDetails";
                PhoneAsssignedToLabour labour = this.dbEntites.phoneAssigntolabour.SingleOrDefault<PhoneAsssignedToLabour>(n => n.PhoneAssignedID == id);
                labour.CourierDetail = PhoneHistory.CourierDetail;
                labour.IsPhoneAccepted = PhoneHistory.IsPhoneAccepted;
                labour.IsLabourReceivedPhone = PhoneHistory.IsLabourReceivedPhone;
                this.dbEntites.SaveChanges();
                string notificationMsg = "";
                if (PhoneHistory.IsLabourReceivedPhone == true)
                {
                    labour.DeliveredDate = new DateTime?(DateTime.Now);
                    notificationMsg = "Phone Delivered";
                }
                else
                {
                    notificationMsg = "In Transit";
                }
                string LabourId = labour.LabourID;
                var labourDetails = this.dbEntites.Labours.SingleOrDefault<Labour>(n => n.LabourID == LabourId);
                if ((labourDetails.DeviceToken != null) && (labourDetails.DeviceType == "Android"))
                {
                    string deviceToken = labourDetails.DeviceToken;
                    string str2 = "AIzaSyCDuLpL_40YdjlU7BkBbMc9Cr5n4PuRCig";
                    WebRequest request = WebRequest.Create("https://gcm-http.googleapis.com/gcm/send");
                    request.Method = "post";
                    request.ContentType = " application/x-www-form-urlencoded;charset=UTF-8";
                    request.Headers.Add(string.Format("Authorization: key={0}", str2));
                    string str5 = string.Concat(new object[] { "collapse_key=Updates Available&data.message=", notificationMsg, "&data.title=\"smartLabours\"&data.notId=", DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Millisecond, "&data.time=", DateTime.Now.ToString(), "&to=", deviceToken });
                    Console.WriteLine(str5);
                    byte[] bytes = Encoding.UTF8.GetBytes(str5);
                    request.ContentLength = bytes.Length;
                    Stream requestStream = request.GetRequestStream();
                    requestStream.Write(bytes, 0, bytes.Length);
                    requestStream.Close();
                    WebResponse response = request.GetResponse();
                    requestStream = response.GetResponseStream();
                    StreamReader reader = new StreamReader(requestStream);
                    string str6 = reader.ReadToEnd();
                    reader.Close();
                    requestStream.Close();
                    response.Close();
                    ((dynamic)base.ViewBag).Message = "Msg successfully send";
                }
                else if ((labourDetails.DeviceToken != null) && (labourDetails.DeviceType == "iOS"))
                {
                    string deviceToken = labourDetails.DeviceToken;
                    sendAppleNotification(deviceToken, notificationMsg);
                }
                string userId = Convert.ToString(labour.LabourID);
                Labour labour2 = this.dbEntites.Labours.SingleOrDefault<Labour>(n => n.LabourID == userId);
                string str = "";
                if (PhoneHistory.IsLabourReceivedPhone == true)
                    str = new Mailing().SendMailforLabourcourrier(labour2.EmailID, "Smartlabours-Courrier Details", PhoneHistory.CourierDetail, labour2.Name);
                else
                    str = new Mailing().SentEmail_PhoneDelivered(labour2.EmailID, "Smartlabours-Phone Delivered", labour2.Name);
                base.TempData["messagealert"] = "status updated Successfully";
                return base.RedirectToAction("/PhoneAssignedHistory");
            }
            catch
            {
                return base.RedirectToAction("/PhoneAssignedHistory");
            }
        }

        public List<DonatePhone> GetPhoneHistory()
        {
            try
            {
                int UId = Convert.ToInt32(Session["USERID"].ToString());
                Database database = DatabaseFactory.CreateDatabase("DefaultConnection");
                string storedProcedureName = "pro_PhoneAssigned_Labour";
                DbCommand storedProcCommand = database.GetStoredProcCommand(storedProcedureName);
                database.AddInParameter(storedProcCommand, "@UserId", DbType.Int32, UId);
                List<DonatePhone> source = new List<DonatePhone>();
                using (IDataReader reader = database.ExecuteReader(storedProcCommand))
                {
                    while (reader.Read())
                    {
                        DonatePhone item = new DonatePhone
                        {
                            phoneAssignlabour = new PhoneAsssignedToLabour()
                        };
                        if (reader["Name"] != DBNull.Value)
                        {
                            item.PhoneOwnerName = reader["Name"].ToString();
                        }
                        if (reader["LabourID"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.LabourID = reader["LabourID"].ToString();
                        }
                        if (reader["BrandName"] != DBNull.Value)
                        {
                            item.BrandName = reader["BrandName"].ToString();
                        }
                        if (reader["PhoneColor"] != DBNull.Value)
                        {
                            item.PhoneColor = reader["PhoneColor"].ToString();
                        }
                        if (reader["IMEANumber"] != DBNull.Value)
                        {
                            item.IMEANumber = reader["IMEANumber"].ToString();
                        }
                        if (reader["ModelNo"] != DBNull.Value)
                        {
                            item.ModelNo = reader["ModelNo"].ToString();
                        }
                        if (reader["CourierDetail"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.CourierDetail = reader["CourierDetail"].ToString();
                        }
                        if (reader["DeliveredDate"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.DeliveredDate = new DateTime?(Convert.ToDateTime(reader["DeliveredDate"].ToString()));
                        }
                        if (reader["TransactionID"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.PhoneAssignedID = Convert.ToInt32(reader["TransactionID"].ToString());
                        }
                        if (reader["IsPhoneAccepted"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.IsPhoneAccepted = new bool?(Convert.ToBoolean(reader["IsPhoneAccepted"]));
                        }
                        if (reader["IsLabourReceivedPhone"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.IsLabourReceivedPhone = new bool?(Convert.ToBoolean(reader["IsLabourReceivedPhone"]));
                        }
                        source.Add(item);
                    }
                }
                return source.ToList<DonatePhone>();
            }
            catch
            {
                return null;
            }
        }

        public List<DonatePhone> GetPhoneTransactionHistory(int RequestPhoneId)
        {
            try
            {
                Database database = DatabaseFactory.CreateDatabase("DefaultConnection");
                string storedProcedureName = "pro_RequestPhoneTransaction_List";
                DbCommand storedProcCommand = database.GetStoredProcCommand(storedProcedureName);
                database.AddInParameter(storedProcCommand, "@PhoneAssignId", DbType.Int32, RequestPhoneId);
                List<DonatePhone> source = new List<DonatePhone>();
                using (IDataReader reader = database.ExecuteReader(storedProcCommand))
                {
                    while (reader.Read())
                    {
                        DonatePhone item = new DonatePhone
                        {
                            phoneAssignlabour = new PhoneAsssignedToLabour(),
                            PhoneLabour = new Labour(),
                            PhoneRequest = new RequestPhone()
                        };
                        if (reader["Name"] != DBNull.Value)
                        {
                            item.PhoneLabour.Name = reader["Name"].ToString();
                        }
                        if (reader["EmiratesID"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.LabourID = reader["EmiratesID"].ToString();
                        }
                        if (reader["BrandName"] != DBNull.Value)
                        {
                            item.BrandName = reader["BrandName"].ToString();
                        }
                        if (reader["PhoneColor"] != DBNull.Value)
                        {
                            item.PhoneColor = reader["PhoneColor"].ToString();
                        }
                        if (reader["IMEANumber"] != DBNull.Value)
                        {
                            item.IMEANumber = reader["IMEANumber"].ToString();
                        }
                        if (reader["ModelNo"] != DBNull.Value)
                        {
                            item.ModelNo = reader["ModelNo"].ToString();
                        }
                        if (reader["CourierDetail"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.CourierDetail = reader["CourierDetail"].ToString();
                        }
                        if (reader["DeliveredDate"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.DeliveredDate = new DateTime?(Convert.ToDateTime(reader["DeliveredDate"].ToString()));
                        }
                        if (reader["TransactionID"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.PhoneAssignedID = Convert.ToInt32(reader["TransactionID"].ToString());
                        }
                        if (reader["IsPhoneAccepted"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.IsPhoneAccepted = new bool?(Convert.ToBoolean(reader["IsPhoneAccepted"]));
                        }
                        if (reader["IsLabourReceivedPhone"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.IsLabourReceivedPhone = new bool?(Convert.ToBoolean(reader["IsLabourReceivedPhone"]));
                        }
                        if (reader["Status"] != DBNull.Value)
                        {
                            item.phoneAssignlabour.PhoneExpiryDays = reader["Status"].ToString();
                        }
                        if (reader["RequestedDate"] != DBNull.Value)
                        {
                            item.PhoneRequest.RequestedDate = new DateTime?(Convert.ToDateTime(reader["RequestedDate"]));
                        }
                        if (reader["PhoneNumber"] != DBNull.Value)
                        {
                            item.PhoneRequest.PhoneNumber = reader["PhoneNumber"].ToString();
                        }
                        if (reader["AlternatePhoneNumber"] != DBNull.Value)
                        {
                            item.PhoneRequest.AlternatePhoneNumber = reader["AlternatePhoneNumber"].ToString();
                        }
                        if (reader["MailId"] != DBNull.Value)
                        {
                            item.PhoneRequest.MailId = reader["MailId"].ToString();
                        }
                        if (reader["Address"] != DBNull.Value)
                        {
                            item.PhoneRequest.Address = reader["Address"].ToString();
                        }
                        if (reader["NewAddress"] != DBNull.Value)
                        {
                            item.PhoneRequest.MailId = reader["NewAddress"].ToString();
                        }
                        source.Add(item);
                    }
                }
                return source.ToList<DonatePhone>();
            }
            catch
            {
                return null;
            }
        }

        //public ActionResult Index()
        //{
        //    return base.View();
        //}

        /// <summary>
        ///  named as PhoneTransactionHistory 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        public ActionResult PhoneAssignedHistory(int? id, string search)// View Name PhoneTransactionHistory
        {
            base.TempData["currentgetidss"] = "PhoneDetails";
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<DonatePhone> source = new List<DonatePhone>();
            source = this.GetPhoneHistory();
            if ((search != null) && (search != string.Empty))
            {
                Func<DonatePhone, bool> predicate = null;
                Func<DonatePhone, bool> func2 = null;
                Func<DonatePhone, bool> func3 = null;
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        if (predicate == null)
                        {
                            predicate = n => n.BrandName.ToLower().StartsWith(searchText);
                        }
                        source = source.Where<DonatePhone>(predicate).ToList<DonatePhone>();
                        break;

                    case "2":
                        if (func2 == null)
                        {
                            func2 = n => n.BrandName.Trim().ToLower() == searchText;
                        }
                        source = source.Where<DonatePhone>(func2).ToList<DonatePhone>();
                        break;

                    case "3":
                        if (func3 == null)
                        {
                            func3 = n => n.BrandName.ToLower().Contains(searchText);
                        }
                        source = source.Where<DonatePhone>(func3).ToList<DonatePhone>();
                        break;
                }
            }
            else
            {
                source = source.ToList<DonatePhone>();
            }
            int num = source.Count<DonatePhone>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.phoneAssignlabour.PhoneAssignedID descending
                              select n).Skip<DonatePhone>(count).Take<DonatePhone>(10).ToList<DonatePhone>());
        }

        public string UpdateStatus(string status, int bannerid)
        {
            PhoneAsssignedToLabour labour = this.dbEntites.phoneAssigntolabour.SingleOrDefault<PhoneAsssignedToLabour>(n => n.PhoneAssignedID == bannerid);
            if (status == "true")
            {
                labour.IsPhoneAccepted = false;
            }
            else
            {
                labour.IsPhoneAccepted = true;
            }
            this.dbEntites.SaveChanges();
            return "sucess";
        }
    }
    #endregion

    #region PhoneRequestHistoryController

    [AuthorizeUser]
    [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
    public class PhoneRequestHistoryController : BaseController
    {
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        /// <summary>
        /// Phone Request History List
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        public ActionResult PhoneRequestHistory(int? id, string search)
        {
            base.TempData["currentgetidss"] = "PhoneDetails";
               
            if (!id.HasValue)
            {
                id = 1;
            }
            List<DonatePhone> source = new List<DonatePhone>();      
            source = this.RequestHistory(search);
            if ((search != null) && (search != string.Empty))
            {
                var query = source.ToList();
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(query, "Awaiting for Phone", searchText);
                        break;

                    case "51":
                        source = Startswith(query, "Received", searchText);
                        break;

                    case "52":
                        source = Startswith(query, "Awaiting for admin approval", searchText);
                        break;

                    case "53":
                        source = Startswith(query, "Awaiting Labour’s Approval", searchText);
                        break;

                    case "54":
                        source = Startswith(query, "Rejected by Labour", searchText);
                        break;
                    case "55":
                        source = Startswith(query, "In Transit", searchText);
                        break;
                }
            }
            else
            {
                source = source.ToList<DonatePhone>();
            }
            int num = source.Count<DonatePhone>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.phoneAssignlabour.PhoneAssignedID descending
                              select n).Skip<DonatePhone>(count).Take<DonatePhone>(10).ToList<DonatePhone>());
        }

        #region Search Options

        /// <summary>
        /// Search Starts with Values
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<DonatePhone> Startswith(List<DonatePhone> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {              
                query = query.Where(n => Convert.ToString(n.phoneAssignlabour.PhoneAssignedID).ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.PhoneOwnerName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.phoneAssignlabour.CourierDetail.ToLower().StartsWith(searchText)).ToList();                
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneColor.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => Convert.ToString(n.phoneAssignlabour.DeliveredDate).ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => n.phoneAssignlabour.RequestStatus.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "Awaiting for Phone")
            {
                query = query.Where(n => n.BrandName == SearchBy).ToList();
            }
            else if (SearchBy == "Received")
            {
                query = query.Where(n => n.BrandName == SearchBy).ToList();
            }
            else if (SearchBy == "Awaiting for admin approval")
            {
                query = query.Where(n => n.BrandName == SearchBy).ToList();
            }
            else if (SearchBy == "Awaiting Labour’s Approval")
            {
                query = query.Where(n => n.BrandName == SearchBy).ToList();
            }
            else if (SearchBy == "Rejected by Labour")
            {
                query = query.Where(n => n.BrandName == SearchBy).ToList();
            }
            else if (SearchBy == "In Transit")
            {
                query = query.Where(n => n.BrandName == SearchBy).ToList();
            }
            List<DonatePhone> source = query.Select(x => x).ToList<DonatePhone>();
            return source;
        }

        /// <summary>
        /// Search by equal to Search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<DonatePhone> EqualTo(List<DonatePhone> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {               
                query = query.Where(n => Convert.ToString(n.phoneAssignlabour.PhoneAssignedID).ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.PhoneOwnerName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.phoneAssignlabour.CourierDetail.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneColor.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => Convert.ToString(n.phoneAssignlabour.DeliveredDate).ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => n.phoneAssignlabour.RequestStatus.ToLower() == searchText).ToList();
            }


            List<DonatePhone> source = query.Select(x => x).ToList<DonatePhone>();
            return source;
        }

        /// <summary>
        /// Search by Contains a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<DonatePhone> Contains(List<DonatePhone> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => Convert.ToString(n.phoneAssignlabour.PhoneAssignedID).ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.PhoneOwnerName.ToLower().Contains(searchText)).ToList(); 
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.phoneAssignlabour.CourierDetail.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneColor.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => Convert.ToString(n.phoneAssignlabour.DeliveredDate).ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => n.phoneAssignlabour.RequestStatus.ToLower().Contains(searchText)).ToList();
            }
            List<DonatePhone> source = query.Select(x => x).ToList<DonatePhone>();
            return source;
        }

        #endregion

        /// <summary>
        /// Get Data LIst From DB
        /// </summary>
        /// <param name="search"></param>
        /// <returns></returns>
        public List<DonatePhone> RequestHistory(string search)
        {
            int UId = Convert.ToInt32(Session["USERID"].ToString());
            Database database = DatabaseFactory.CreateDatabase("DefaultConnection");
            string storedProcedureName = "pro_RequestPhone_List";
            DbCommand storedProcCommand = database.GetStoredProcCommand(storedProcedureName);
            database.AddInParameter(storedProcCommand, "@UserId", DbType.Int32, UId);
            List<DonatePhone> list = new List<DonatePhone>();
            using (IDataReader reader = database.ExecuteReader(storedProcCommand))
            {
                while (reader.Read())
                {
                    DonatePhone item = new DonatePhone
                    {
                        phoneAssignlabour = new PhoneAsssignedToLabour()
                    };
                    if (reader["Name"] != DBNull.Value)
                    {
                        item.PhoneOwnerName = reader["Name"].ToString();
                    }
                    if (reader["PhoneNumber"] != DBNull.Value)
                    {
                        item.PhoneColor = reader["PhoneNumber"].ToString();
                    }
                    if (reader["EmiratesID"] != DBNull.Value)
                    {
                        item.phoneAssignlabour.CourierDetail = reader["EmiratesID"].ToString();
                    }
                    if (reader["RequestedDate"] != DBNull.Value)
                    {
                        item.phoneAssignlabour.DeliveredDate = new DateTime?(Convert.ToDateTime(reader["RequestedDate"].ToString()));
                    }
                    if (reader["RequestStatus"] != DBNull.Value)
                    {
                        item.phoneAssignlabour.RequestStatus = reader["RequestStatus"].ToString();
                    }
                    if (reader["RequestPhoneID"] != DBNull.Value)
                    {
                        item.phoneAssignlabour.PhoneAssignedID = Convert.ToInt32(reader["RequestPhoneID"].ToString());
                    }
                    if (reader["Status"] != DBNull.Value)
                    {
                        item.BrandName = reader["Status"].ToString();
                    }
                    list.Add(item);
                }
            }
            return list;
        }
    }

    #endregion
   
    #region PlanController
    public class PlanController : Controller
    {
        // Methods
        public ActionResult Plan()
        {
            return base.View();
        }
    }
    #endregion

    #region QuestionAndAnswerController

    [AuthorizeUser]
    public class QuestionAndAnswerController : BaseController
    {
       
        OrganizationSubAdminController objOrg = new OrganizationSubAdminController();
        // Fields
        private SmartLabourEntities dbEntites = new SmartLabourEntities();

        // Methods
        public SelectList getCourseType(int id)
        {
            if (id == 1)
            {
                return new SelectList(from m in
                                          (from m in this.dbEntites.Courses
                                           where m.STATUS == true
                                           select m).AsEnumerable<Course>()
                                      orderby m.CourseID
                                      select new SelectListItem { Text = m.CourseName, Value = m.CourseID.ToString() }, "Value", "Text");
            }
            else
            {

                int OrgId = (from m in this.dbEntites.AdminLogin where m.USERID == id select m.OrgId).FirstOrDefault();
                return new SelectList(from m in
                                          (from m in this.dbEntites.Courses
                                           where m.STATUS == true && m.OrgId == OrgId
                                           select m).AsEnumerable<Course>()
                                      orderby m.CourseID
                                      select new SelectListItem { Text = m.CourseName, Value = m.CourseID.ToString() }, "Value", "Text");

            }
        }

        [HttpGet]
        public ActionResult QuestionAndAnswer_Add()
        {
            TBL_QUESTION_SMT objCourse = new TBL_QUESTION_SMT();
            int UId = Convert.ToInt32(Session["USERID"].ToString());
            // ((dynamic)base.ViewBag).GetOrganizationNamelist = objOrg.GetOrganizationNamelist();
           if (UId != 1)
            {
                int OrgId = (from n in this.dbEntites.AdminLogin where n.USERID == UId && n.STATUS == true select n.OrgId).FirstOrDefault();
                string OrgName = (from m in this.dbEntites.Organisation where m.OrgId == OrgId && m.IsActive == true select m.OrganisationName).FirstOrDefault();
                base.TempData["currentgetidss"] = "LearnEarn";
                objCourse.OrganisationName = OrgName;
            }
            ((dynamic)base.ViewBag).Courselst = this.getCourseType(UId);
            return base.View(objCourse);
        }

        [HttpPost]
        public ActionResult QuestionAndAnswer_Add(TBL_QUESTION_SMT objquestion)
        {
            try
            {
                int CourseId = 0;
                int UId = Convert.ToInt32(Session["USERID"].ToString());
                int orgId = 0;//= (from m in this.dbEntites.Courses where m.CourseID == objquestion.CourseID select m.OrgId).FirstOrDefault();
                ((dynamic)base.ViewBag).Courselst = this.getCourseType(UId);

                if (UId == 1)
                {
                    orgId = (from m in this.dbEntites.Organisation where m.OrganisationName == objquestion.OrganisationName select m.OrgId).FirstOrDefault();
                    CourseId = (from m in this.dbEntites.Courses where m.CourseName == objquestion.CourseName && m.OrgId == orgId select m.CourseID).FirstOrDefault();
                    if (CourseId == 0)
                    {
                        ((dynamic)base.ViewBag).messagealert = "Course Name does not exists";
                        return base.View(objquestion);
                    }
                }
                else
                {
                    orgId = (from n in this.dbEntites.AdminLogin where n.USERID == UId select n.OrgId).FirstOrDefault();
                    CourseId = (from m in this.dbEntites.Courses where m.CourseName == objquestion.CourseName && m.OrgId == orgId select m.CourseID).FirstOrDefault();
                    if (CourseId == 0)
                    {
                        ((dynamic)base.ViewBag).messagealert = "Course Name does not exists";
                        return base.View(objquestion);
                    }
                }

                if (base.ModelState.IsValid)
                {
                    if ((from n in this.dbEntites.Question
                         where n.QuestionDesc == objquestion.QuestionDesc
                         select n).ToList<TBL_QUESTION_SMT>().Count > 0)
                    {
                        ((dynamic)base.ViewBag).messagealert = "Question Already exists for this Course";
                        return base.View(objquestion);
                    }
                    //int OrganizationId = (from m in this.dbEntites.Organisation where m.OrganisationName == objquestion.OrganisationName select m.OrgId).FirstOrDefault();
                    if ((objquestion.hdnQuestions != "") && (objquestion.hdnQuestions != null))
                    {

                        string[] strArray = objquestion.hdnQuestions.Split(new char[] { '#' });
                        for (int i = 0; i < strArray.Length; i++)
                        {
                            if (strArray[i] != "")
                            {
                                string[] strArray2 = strArray[i].Split(new char[] { '~' });
                                TBL_QUESTION_SMT entity = new TBL_QUESTION_SMT();
                                string[] strArray3 = strArray2[0].Split(new char[] { '}' });
                                entity.CourseID = CourseId;
                                if (strArray3[1] == "2")
                                {
                                    string FileName = Path.GetFileName(strArray3[2].ToString());
                                    entity.QuestionDesc = orgId + "_" + objquestion.CourseName + "_" + FileName;
                                }
                                else
                                {
                                    entity.QuestionDesc = strArray3[0];  //Question 
                                }

                                entity.QuestionType = strArray3[1] == "1" ? true : false;
                                entity.CreditPoints = Convert.ToInt32(strArray3[3]);
                                this.dbEntites.Question.Add(entity);
                                this.dbEntites.SaveChanges();
                                int questionID = entity.QuestionID;
                                string[] strArray4 = strArray2[1].Split(new char[] { '^' });
                                string[] strArray5 = strArray4[0].Split(new char[] { '$' });
                                TBL_ANSWER_SMT tbl_answer_smt = new TBL_ANSWER_SMT();
                                for (int j = 0; j < strArray5.Length; j++)
                                {
                                    tbl_answer_smt.QuestionID = questionID;
                                    tbl_answer_smt.AnswerDesc = strArray5[j];
                                    if (Convert.ToInt32(strArray4[1]) == j)
                                    {
                                        tbl_answer_smt.IsCorrect = true;
                                    }
                                    else
                                    {
                                        tbl_answer_smt.IsCorrect = false;
                                    }
                                    this.dbEntites.Answer.Add(tbl_answer_smt);
                                    this.dbEntites.SaveChanges();
                                }
                            }
                        }
                        base.TempData["messagealert"] = "Record Added Successfully";
                    }
                    // Add
                    foreach (string file in Request.Files)
                    {
                        HttpPostedFileBase hpf = Request.Files[file] as HttpPostedFileBase;
                        if (hpf.ContentLength == 0)
                            continue;
                        string FileName = Path.GetFileName(hpf.FileName.ToString());
                        bool exists = System.IO.Directory.Exists(Server.MapPath("/Uplodify/QuestionVideos"));
                        if (!exists)
                        {
                            System.IO.Directory.CreateDirectory(Server.MapPath("/Uplodify/QuestionVideos"));
                        }
                        string savedFileName = System.Web.HttpContext.Current.Server.MapPath("/Uplodify/QuestionVideos/" + orgId + "_" + objquestion.CourseName + "_" + FileName);
                        hpf.SaveAs(savedFileName);
                    }
                }
                base.TempData["currentgetidss"] = "LearnEarn";
                return base.RedirectToAction("QuestionAndAnswerList");
            }
            catch
            {
                return View(objquestion);
            }
        }

        public string QuestionAndAnswer_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                List<TBL_QUESTION_SMT> list = new List<TBL_QUESTION_SMT>();
                list = (from n in this.dbEntites.Question
                        where n.CourseID == bannerid
                        select n).ToList<TBL_QUESTION_SMT>();
                if (list.Count > 0)
                {
                    List<TBL_QUESTION_SMT> listRemove = new List<TBL_QUESTION_SMT>();
                    listRemove = (from n in this.dbEntites.Question
                                  where n.CourseID == bannerid && n.QuestionType == false
                                  select n).ToList<TBL_QUESTION_SMT>();

                    foreach (TBL_QUESTION_SMT items in listRemove)
                    {
                        string fullPath = Request.MapPath("~/Uplodify/QuestionVideos/" + items.QuestionDesc);
                        if (System.IO.File.Exists(fullPath))
                        {
                            System.IO.File.Delete(fullPath);
                        }
                    }
                    for (int j = 0; j < list.Count; j++)
                    {
                        int questionid = list[j].QuestionID;
                        TBL_QUESTION_SMT entity = this.dbEntites.Question.SingleOrDefault<TBL_QUESTION_SMT>(n => n.QuestionID == questionid);
                        this.dbEntites.Question.Remove(entity);
                        List<TBL_ANSWER_SMT> list2 = new List<TBL_ANSWER_SMT>();
                        list2 = (from n in this.dbEntites.Answer
                                 where n.QuestionID == questionid
                                 orderby n.QuestionID
                                 select n).ToList<TBL_ANSWER_SMT>();
                        if (list2.Count > 0)
                        {
                            for (int k = 0; k < list2.Count; k++)
                            {
                                int answerid = list2[k].AnswerID;
                                TBL_ANSWER_SMT tbl_answer_smt = this.dbEntites.Answer.SingleOrDefault<TBL_ANSWER_SMT>(n => n.AnswerID == answerid);
                                this.dbEntites.Answer.Remove(tbl_answer_smt);
                                this.dbEntites.SaveChanges();
                            }
                        }
                        this.dbEntites.SaveChanges();
                    }
                }
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        public ActionResult QuestionAndAnswer_Delete(int id)
        {
            List<TBL_QUESTION_SMT> list = new List<TBL_QUESTION_SMT>();

           
            list = (from n in this.dbEntites.Question
                    where n.CourseID == id
                    select n).ToList<TBL_QUESTION_SMT>();
            if (list.Count > 0)
            {
                List<TBL_QUESTION_SMT> listRemove = new List<TBL_QUESTION_SMT>();
                listRemove= (from n in this.dbEntites.Question
                                     where n.CourseID == id && n.QuestionType==false
                                     select n).ToList<TBL_QUESTION_SMT>();              

                foreach (TBL_QUESTION_SMT items in listRemove)
                {
                    string fullPath = Request.MapPath("~/Uplodify/QuestionVideos/" + items.QuestionDesc);
                    if (System.IO.File.Exists(fullPath))
                    {
                        System.IO.File.Delete(fullPath);
                    }
                }

                for (int i = 0; i < list.Count; i++)
                {
                    int questionid = list[i].QuestionID;
                    TBL_QUESTION_SMT entity = this.dbEntites.Question.SingleOrDefault<TBL_QUESTION_SMT>(n => n.QuestionID == questionid);
                    this.dbEntites.Question.Remove(entity);
                    List<TBL_ANSWER_SMT> list2 = new List<TBL_ANSWER_SMT>();
                    list2 = (from n in this.dbEntites.Answer
                             where n.QuestionID == questionid
                             orderby n.QuestionID
                             select n).ToList<TBL_ANSWER_SMT>();
                    if (list2.Count > 0)
                    {
                        for (int j = 0; j < list2.Count; j++)
                        {
                            int answerid = list2[j].AnswerID;
                            TBL_ANSWER_SMT tbl_answer_smt = this.dbEntites.Answer.SingleOrDefault<TBL_ANSWER_SMT>(n => n.AnswerID == answerid);
                            this.dbEntites.Answer.Remove(tbl_answer_smt);
                            this.dbEntites.SaveChanges();
                        }
                    }
                    this.dbEntites.SaveChanges();
                }
            }
            base.TempData["messagealert"] = "Question Deleted Successfully";
            return base.RedirectToAction("QuestionAndAnswerList");
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpGet]
        public ActionResult QuestionAndAnswerEdit(int id)
        {
            int OrgId = 0;
            TBL_QUESTION_SMT model = new TBL_QUESTION_SMT
            {
                CourseID = id
            };
            int UId = Convert.ToInt32(Session["USERID"].ToString());

           if (UId != 1)
            {
                OrgId = (from n in this.dbEntites.AdminLogin where n.USERID == UId && n.STATUS == true select n.OrgId).FirstOrDefault();
                string OrgName = (from m in this.dbEntites.Organisation where m.OrgId == OrgId && m.IsActive == true select m.OrganisationName).FirstOrDefault();
                base.TempData["currentgetidss"] = "LearnEarn";
                model.OrganisationName = OrgName;
                model.CourseName = (from m in this.dbEntites.Courses where m.CourseID == id select m.CourseName).FirstOrDefault();
            }
            else
            {

                // OrgId = (from n in this.dbEntites.AdminLogin where n.USERID == UId && n.STATUS == true select n.OrgId).FirstOrDefault();
                model.CourseName = (from m in this.dbEntites.Courses where m.CourseID == id select m.CourseName).FirstOrDefault();
                model.OrganisationName = (from n in this.dbEntites.Courses
                                          join m in this.dbEntites.Organisation on n.OrgId equals m.OrgId
                                          where n.CourseID == id
                                          select m.OrganisationName).SingleOrDefault();

            }
            base.TempData["currentgetidss"] = "LearnEarn";
            List<TBL_QUESTION_SMT> list = new List<TBL_QUESTION_SMT>();
            list = (from n in this.dbEntites.Question
                    where n.CourseID == id
                    select n).ToList<TBL_QUESTION_SMT>();
            ((dynamic)base.ViewBag).Questionlist = list;
            List<TBL_ANSWER_SMT> list2 = new List<TBL_ANSWER_SMT>();
            list2 = (from n in this.dbEntites.Answer
                     orderby n.QuestionID
                     select n).ToList<TBL_ANSWER_SMT>();
            ((dynamic)base.ViewBag).Answerlist = list2;
            return base.View(model);
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpPost]
        public ActionResult QuestionAndAnswerEdit(int id, TBL_QUESTION_SMT objquestion)
        {
            // var orgId = (from n in this.dbEntites.Question where n.CourseID  == id  select n.OrgId).SingleOrDefault();
            try
            {
                int orgId = 0;
                int CourseId = 0;
                int UId = Convert.ToInt32(Session["USERID"].ToString());
                if (UId == 1)
                {
                    orgId = (from m in this.dbEntites.Organisation where m.OrganisationName == objquestion.OrganisationName && m.IsActive==true select m.OrgId).FirstOrDefault();
                    CourseId = (from m in this.dbEntites.Courses where m.CourseName == objquestion.CourseName && m.OrgId == orgId && m.STATUS==true select m.CourseID).FirstOrDefault();
                }
                else
                {
                    orgId = (from n in this.dbEntites.AdminLogin where n.USERID == UId && n.STATUS==true select n.OrgId).FirstOrDefault();
                    CourseId = (from m in this.dbEntites.Courses where m.CourseName == objquestion.CourseName && m.STATUS==true && m.OrgId == orgId select m.CourseID).FirstOrDefault();
                }
                //int orgId = (from m in this.dbEntites.Courses where m.CourseID == id select m.OrgId).FirstOrDefault();
                ((dynamic)base.ViewBag).Courselst = this.getCourseType(UId);
                base.TempData["currentgetidss"] = "LearnEarn";
                if (base.ModelState.IsValid)
                {
                    int num;
                    int num2;
                    if ((from n in this.dbEntites.Question
                         where n.QuestionDesc == objquestion.QuestionDesc 
                         select n).ToList<TBL_QUESTION_SMT>().Count > 0)
                    {
                        ((dynamic)base.ViewBag).messagealert = "Question Already exists for this Course";
                        return base.View(objquestion);
                    }
                    List<TBL_QUESTION_SMT> list2 = new List<TBL_QUESTION_SMT>();
                    List<TBL_QUESTION_SMT> list = new List<TBL_QUESTION_SMT>();
                    List<TBL_QUESTION_SMT> listAfterUpdate = new List<TBL_QUESTION_SMT>();
                    List<TBL_QUESTION_SMT> listBeforeUpdate = new List<TBL_QUESTION_SMT>();//listAfterUpdate
                    list2 = (from n in this.dbEntites.Question
                             where n.CourseID == id 
                             select n).ToList<TBL_QUESTION_SMT>();

                    if (list2.Count > 0)
                    {
                        listBeforeUpdate = (from n in this.dbEntites.Question
                                            where n.CourseID == id && n.QuestionType==false
                                            select n).ToList<TBL_QUESTION_SMT>();
                        num = 0;
                        while (num < list2.Count)
                        {
                            int questionid = list2[num].QuestionID;
                            TBL_QUESTION_SMT entity = this.dbEntites.Question.SingleOrDefault<TBL_QUESTION_SMT>(n => n.QuestionID == questionid);
                            this.dbEntites.Question.Remove(entity);
                            List<TBL_ANSWER_SMT> list3 = new List<TBL_ANSWER_SMT>();
                            list3 = (from n in this.dbEntites.Answer
                                     where n.QuestionID == questionid
                                     orderby n.QuestionID
                                     select n).ToList<TBL_ANSWER_SMT>();
                            if (list3.Count > 0)
                            {
                                num2 = 0;
                                while (num2 < list3.Count)
                                {
                                    int answerid = list3[num2].AnswerID;
                                    TBL_ANSWER_SMT tbl_answer_smt = this.dbEntites.Answer.SingleOrDefault<TBL_ANSWER_SMT>(n => n.AnswerID == answerid);
                                    this.dbEntites.Answer.Remove(tbl_answer_smt);
                                    this.dbEntites.SaveChanges();
                                    num2++;
                                }
                            }
                            this.dbEntites.SaveChanges();
                            base.TempData["messagealert"] = "Record updated Successfully";
                            num++;
                        }
                    }
                    if ((objquestion.hdnQuestions != "") && (objquestion.hdnQuestions != null))
                    {
                        string[] strArray = objquestion.hdnQuestions.Split(new char[] { '#' });
                        for (num2 = 0; num2 < strArray.Length; num2++)
                        {
                            if (strArray[num2] != "")
                            {
                                string[] strArray2 = strArray[num2].Split(new char[] { '~' });
                                TBL_QUESTION_SMT tbl_question_smt2 = new TBL_QUESTION_SMT();
                                string[] strArray3 = strArray2[0].Split(new char[] { '}' });
                                if (strArray3[0] == "undefined" )
                                {
                                    continue;
                                }
                                if (strArray3[1] == "2")
                                {
                                    if (strArray3[3] == "Not Changed")
                                    {
                                        tbl_question_smt2.QuestionDesc = strArray3[0].ToString();
                                    }
                                    else
                                    {
                                        string FileName = Path.GetFileName(strArray3[0].ToString());
                                        tbl_question_smt2.QuestionDesc = orgId + "_" + objquestion.CourseName + "_" + FileName;
                                    }
                                   
                                }
                                else
                                {
                                    tbl_question_smt2.QuestionDesc = strArray3[0];  //Question 
                                }

                                tbl_question_smt2.CourseID = CourseId;
                                // tbl_question_smt2.QuestionDesc = strArray3[0];
                                tbl_question_smt2.QuestionType = strArray3[1] == "1" ? true : false;
                                tbl_question_smt2.CreditPoints = Convert.ToInt32(strArray3[2]);
                                this.dbEntites.Question.Add(tbl_question_smt2);
                                this.dbEntites.SaveChanges();
                                int questionID = tbl_question_smt2.QuestionID;
                                string[] strArray4 = strArray2[1].Split(new char[] { '^' });
                                string[] strArray5 = strArray4[0].Split(new char[] { '$' });
                                TBL_ANSWER_SMT tbl_answer_smt2 = new TBL_ANSWER_SMT();
                                for (num = 0; num < strArray5.Length; num++)
                                {
                                    tbl_answer_smt2.QuestionID = questionID;
                                    tbl_answer_smt2.AnswerDesc = strArray5[num];
                                    if (strArray4[1] == "undefined")
                                    {
                                        continue;
                                    }
                                    if (Convert.ToInt32(strArray4[1]) == num)
                                    {
                                        tbl_answer_smt2.IsCorrect = true;
                                    }
                                    else
                                    {
                                        tbl_answer_smt2.IsCorrect = false;
                                    }
                                    this.dbEntites.Answer.Add(tbl_answer_smt2);
                                    this.dbEntites.SaveChanges();
                                }
                            }
                        }
                    }


                    listAfterUpdate = (from n in this.dbEntites.Question
                                       where n.CourseID == id && n.QuestionType == false
                                       select n).ToList<TBL_QUESTION_SMT>();

                    List<TBL_QUESTION_SMT> listRemove = new List<TBL_QUESTION_SMT>();


                    HashSet<string> diffids = new HashSet<string>(listAfterUpdate.Select(s => s.QuestionDesc));
                    //You will have the difference here
                    listRemove = listBeforeUpdate.Where(m => !diffids.Contains(m.QuestionDesc)).ToList();

                   // listRemove = (from n in listBeforeUpdate join m in listAfterUpdate on n.CourseID equals m.CourseID where n.QuestionDesc.ToLower().Trim() != m.QuestionDesc.ToLower().Trim() select n).ToList();

                    foreach (TBL_QUESTION_SMT items in listRemove)
                    {
                        string fullPath = Request.MapPath("~/Uplodify/QuestionVideos/" + items.QuestionDesc);
                        if (System.IO.File.Exists(fullPath))
                        {
                            System.IO.File.Delete(fullPath);
                        }
                    }

                    // Upload a selected Video files
                    foreach (string file in Request.Files)
                    {
                        HttpPostedFileBase hpf = Request.Files[file] as HttpPostedFileBase;
                        if (hpf.ContentLength == 0)
                            continue;
                        string FileName = Path.GetFileName(hpf.FileName.ToString());
                        bool exists = System.IO.Directory.Exists(Server.MapPath("/Uplodify/QuestionVideos"));
                        if (!exists)
                        {
                            System.IO.Directory.CreateDirectory(Server.MapPath("/Uplodify/QuestionVideos"));
                        }
                        string savedFileName = System.Web.HttpContext.Current.Server.MapPath("/Uplodify/QuestionVideos/" + orgId + "_" + objquestion.CourseName + "_" + FileName);
                        hpf.SaveAs(savedFileName);
                    }

                }
                return base.RedirectToAction("QuestionAndAnswerList");
            }
            catch
            {
                return View("QuestionAndAnswerList");
            }
        }

        public ActionResult QuestionAndAnswerList(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "LearnEarn";
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<Course> source = new List<Course>();
            DataAccess ObjDa = new DataAccess();
            DataTable dt = ObjDa.GetQuestionList(UserId);
            foreach (DataRow reader in dt.Rows)
            {
                Course item = new Course();
                if (reader["CourseID"] != DBNull.Value)
                {
                    item.CourseID = Convert.ToInt32(reader["CourseID"].ToString());
                }
                if (reader["CourseName"] != DBNull.Value)
                {
                    item.CourseName = reader["CourseName"].ToString();
                }
                if (reader["OrganisationName"] != DBNull.Value)
                {
                    item.OrganisationName = reader["OrganisationName"].ToString();
                }
                source.Add(item);
            }
            if ((search != null) && (search != string.Empty))
            {
                var query = source.ToList();
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":

                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                }
            }
            else
            {
                source = source.ToList<Course>();
            }
            int num = source.Count<Course>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View(source.Skip<Course>(count).Take<Course>(10).ToList<Course>());

        }

        #region Search Options

        public List<Course> Startswith(List<Course> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.CourseName.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.OrganisationName.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {
                //query = query.Where(n => n.STATUS .ToLower().StartsWith(searchText));
            }
            List<Course> source = query.Select(x => x).ToList<Course>();
            return source;
        }
        public List<Course> EqualTo(List<Course> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.CourseName.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.OrganisationName.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "3")
            {
                // query = query.Where(n => n.STATUS .ToLower() == searchText);
            }

            List<Course> source = query.Select(x => x).ToList<Course>();
            return source;
        }
        public List<Course> Contains(List<Course> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.CourseName.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.OrganisationName.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {
                // query = query.Where(n => n.STATUS.ToLower().Contains(searchText));
            }

            List<Course> source = query.Select(x => x).ToList<Course>();
            return source;
        }

        #endregion

        public ActionResult QuestionAndAnswerView(int id)
        {
            int UId = Convert.ToInt32(Session["USERID"].ToString());
            base.TempData["currentgetidss"] = "LearnEarn";
            Course model = new Course();
            model = this.dbEntites.Courses.SingleOrDefault<Course>(n => n.CourseID == id);
            ((dynamic)base.ViewBag).Courselst = this.getCourseType(UId);
            List<TBL_QUESTION_SMT> list = new List<TBL_QUESTION_SMT>();
            list = (from n in this.dbEntites.Question
                    where n.CourseID == id
                    select n).ToList<TBL_QUESTION_SMT>();
            ((dynamic)base.ViewBag).Questionlist = list;
            List<TBL_ANSWER_SMT> list2 = new List<TBL_ANSWER_SMT>();
            list2 = (from n in this.dbEntites.Answer
                     orderby n.QuestionID
                     select n).ToList<TBL_ANSWER_SMT>();
            ((dynamic)base.ViewBag).Answerlist = list2;
            return base.View(model);
        }

        public void RemoveKeywords(int courseid)
        {
        }

        public void SaveMultipleQuestionandAnswer(string hdnKeywords, int Productid)
        {
            try
            {
            }
            catch (DbEntityValidationException exception)
            {
                Exception innerException = exception;
                foreach (DbEntityValidationResult result in exception.EntityValidationErrors)
                {
                    foreach (DbValidationError error in result.ValidationErrors)
                    {
                        innerException = new InvalidOperationException(string.Format("{0}:{1}", result.Entry.Entity.ToString(), error.ErrorMessage), innerException);
                    }
                }
            }
        }

        public string UpdateStatus(string status, int bannerid)
        {
            Course course = this.dbEntites.Courses.SingleOrDefault<Course>(n => n.CourseID == bannerid);
            if (status == "true")
            {
                course.STATUS = false;
            }
            else
            {
                course.STATUS = true;
            }
            this.dbEntites.SaveChanges();
            return "sucess";
        }

        /// <summary>
        /// To Check a Course it Available or not
        /// </summary>
        /// <param name="Course"></param>
        /// <param name="Org"></param>
        /// <returns></returns>
        public int CheckCourse(string Course, string Org)
        {
            int UId = Convert.ToInt32(Session["USERID"].ToString());
            int CourseId = 0;
            int orgId = 0;
            if (UId == 1)
            {
                orgId = (from m in this.dbEntites.Organisation where m.OrganisationName == Org && m.IsActive==true  select m.OrgId).FirstOrDefault();
            }
            else
            {
                orgId = (from n in this.dbEntites.AdminLogin where n.USERID == UId && n.STATUS==true  select n.OrgId).SingleOrDefault();
            }
            CourseId = (from n in this.dbEntites.Courses where n.CourseName.ToLower().Trim() == Course.ToLower().Trim()&&n.STATUS==true && n.OrgId == orgId select n.CourseID).SingleOrDefault();      //.SingleOrDefault<Course>(n => n.CourseID == bannerid);
            if (CourseId > 0)
            {
                return CourseId;
            }
            else
            {
                return 0;
            }
        }

        /// <summary>
        /// AutoComplete Method for Course Name
        /// </summary>
        /// <param name="term"></param>
        /// <param name="org"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult CourseNameAutoComplete(string term, string org)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;
             if (UserId==1)
            {
                OrgId = (from n in this.dbEntites.Organisation where n.OrganisationName == org && n.IsActive==true select n.OrgId).SingleOrDefault();
            }
            else
            {
                OrgId = (from n in this.dbEntites.AdminLogin where n.USERID == UserId && n.STATUS==true select n.OrgId).SingleOrDefault();
            }
            var CourseNameList = (from m in this.dbEntites.Courses where m.CourseName.StartsWith(term) & m.STATUS == true & m.OrgId == OrgId select m.CourseName).Take(10);
            return Json(CourseNameList, JsonRequestBehavior.AllowGet);
        }

    }
    #endregion

    #region ServiceController
    [AuthorizeUser]
    public class ServiceController : BaseController
    {
        // Fields
        OrganizationSubAdminController objOrg = new OrganizationSubAdminController();
        CommonClass objCommon = new CommonClass();
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        // Methods
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpGet]
        public ActionResult ServiceProvider_Add()
        {
            TBL_SERVICEPROVIDER_SMT ObjServiceprovider = new TBL_SERVICEPROVIDER_SMT();
            int Orgid = 0;
            int UId = Convert.ToInt32(Session["USERID"].ToString());
           if (UId != 1)
            {         
                Orgid = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UId select m.OrgId).FirstOrDefault();
                ObjServiceprovider.OrganisationName = objCommon.GetOrganizartionNameFromID(Orgid); ;// objOrg.GetOrganizationName(Orgid);
            }
            ObjServiceprovider.STATUS = true;
            ObjServiceprovider.IsTelcomOperator = true;
            base.TempData["currentgetidss"] = "Service";
            return base.View(ObjServiceprovider);
        }

        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult ServiceProvider_Add(TBL_SERVICEPROVIDER_SMT ObjServiceprovider)
        {
            try
            {
                int Orgid = 0;
                int UId = Convert.ToInt32(Session["USERID"].ToString());
                
                if (UId == 1)
                {
                    if (ObjServiceprovider.OrganisationName == string.Empty || ObjServiceprovider.OrganisationName == null)
                    {
                        Orgid = 1;
                        ObjServiceprovider.OrganisationName = (from n in this.SmtDbEntites.Organisation where n.OrgId == Orgid select n.OrganisationName).SingleOrDefault();
                    }
                    else
                    {
                        Orgid = (from m in this.SmtDbEntites.Organisation where m.OrganisationName.ToLower().Trim() == ObjServiceprovider.OrganisationName.ToLower().Trim() select m.OrgId).FirstOrDefault();
                    }
                   
                }
                else
                {
                    ((dynamic)base.ViewBag).OrgNameType = "Text";
                    Orgid = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UId select m.OrgId).FirstOrDefault();
                    ObjServiceprovider.OrganisationName = (from n in this.SmtDbEntites.Organisation where n.OrgId == Orgid select n.OrganisationName).SingleOrDefault();
                }
            if (base.ModelState.IsValid)
            {

                if ((from n in this.SmtDbEntites.ServiceProvider
                     where n.SERVICEPROVIDER.ToLower().Trim() == ObjServiceprovider.SERVICEPROVIDER.ToLower().Trim() && n.OrgId == Orgid
                     select n).ToList<TBL_SERVICEPROVIDER_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Service Provider Already Exists";
                    return base.View(ObjServiceprovider);
                }
               
               
                ObjServiceprovider.OrgId = Orgid;
                ObjServiceprovider.CREATEDDATE = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString()));
                ObjServiceprovider.CREATEDBY = base.Session["USERNAME"].ToString();
                this.SmtDbEntites.ServiceProvider.Add(ObjServiceprovider);
                this.SmtDbEntites.SaveChanges();
                base.TempData["messagealert"] = "Service Provider Added Successfully";
                return base.RedirectToAction("ServiceProvider_List");
            }
            return base.View(ObjServiceprovider);
           }
            catch (DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                //string str = ex.ToString() + "|||";
                return base.View();
            }
        }

        public string ServiceProvider_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                TBL_SERVICEPROVIDER_SMT entity = this.SmtDbEntites.ServiceProvider.SingleOrDefault<TBL_SERVICEPROVIDER_SMT>(n => n.SERVICEPROVIDERID == bannerid);
                this.SmtDbEntites.ServiceProvider.Remove(entity);
                this.SmtDbEntites.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        public ActionResult ServiceProvider_Delete(int id)
        {
            TBL_SERVICEPROVIDER_SMT entity = this.SmtDbEntites.ServiceProvider.SingleOrDefault<TBL_SERVICEPROVIDER_SMT>(n => n.SERVICEPROVIDERID == id);
            this.SmtDbEntites.ServiceProvider.Remove(entity);
            this.SmtDbEntites.SaveChanges();
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return base.RedirectToAction("ServiceProvider_List");
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpGet]
        public ActionResult ServiceProvider_Edit(int id)
        {
            base.TempData["currentgetidss"] = "Service";
            TBL_SERVICEPROVIDER_SMT model = this.SmtDbEntites.ServiceProvider.SingleOrDefault<TBL_SERVICEPROVIDER_SMT>(n => n.SERVICEPROVIDERID == id);
            model.OrganisationName = (from n in this.SmtDbEntites.Organisation where n.OrgId==model.OrgId select n.OrganisationName).SingleOrDefault();
            return base.View(model);
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpPost]
        public ActionResult ServiceProvider_Edit(int id, TBL_SERVICEPROVIDER_SMT objService)
        {
            if (base.ModelState.IsValid)
            {
                int Orgid = 0;
                int UId = Convert.ToInt32(Session["USERID"].ToString());
                if (UId == 1)
                {
                    if (objService.OrganisationName == string.Empty || objService.OrganisationName == null)
                    {
                        Orgid = 1;
                        objService.OrganisationName=(from n in this.SmtDbEntites.Organisation where n.OrgId==Orgid select n.OrganisationName).SingleOrDefault();
                    }
                    else 
                    {
                        Orgid = (from m in this.SmtDbEntites.Organisation where m.OrganisationName.ToLower().Trim() == objService.OrganisationName.ToLower().Trim() select m.OrgId).FirstOrDefault();
                    }
                    
                }
                else
                {
                    ((dynamic)base.ViewBag).OrgNameType = "Text";
                    Orgid = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UId select m.OrgId).FirstOrDefault();
                   
                    objService.OrgId = Orgid;
                    objService.OrganisationName = (from n in this.SmtDbEntites.Organisation where n.OrgId == Orgid select n.OrganisationName).SingleOrDefault();
                }
                if ((from n in this.SmtDbEntites.ServiceProvider
                     where (n.SERVICEPROVIDERID != id) && (n.SERVICEPROVIDER.ToLower().Trim() == objService.SERVICEPROVIDER.ToLower().Trim() && n.OrgId == Orgid) 
                     select n).ToList<TBL_SERVICEPROVIDER_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "ServiceProvider Already Exists";
                    return base.View(objService);
                }
             
                TBL_SERVICEPROVIDER_SMT tbl_serviceprovider_smt = this.SmtDbEntites.ServiceProvider.SingleOrDefault<TBL_SERVICEPROVIDER_SMT>(n => n.SERVICEPROVIDERID == id);
                tbl_serviceprovider_smt.OrgId  = Orgid;
                tbl_serviceprovider_smt.SERVICEPROVIDER = objService.SERVICEPROVIDER;
                tbl_serviceprovider_smt.STATUS = objService.STATUS;
                tbl_serviceprovider_smt.MODIFIEDBY = base.Session["USERNAME"].ToString();
                tbl_serviceprovider_smt.MODIFIEDDATE = new DateTime?(DateTime.Now);
                tbl_serviceprovider_smt.IsTelcomOperator = objService.IsTelcomOperator;
                this.SmtDbEntites.SaveChanges();
                base.TempData["messagealert"] = "Service Provider Updated Successfully";
                return base.RedirectToAction("ServiceProvider_List");
            }
            return base.View(objService);
        }

        /// <summary>
        /// Service Provider List
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        public ActionResult ServiceProvider_List(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int Oid = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "Service";
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"].ToString() != string.Empty))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<TBL_SERVICEPROVIDER_SMT> source = new List<TBL_SERVICEPROVIDER_SMT>();
            if (UserId == 1)
            {
                source = (from n in this.SmtDbEntites.ServiceProvider
                         select n).ToList();
            }
            else
            {
                source = (from n in this.SmtDbEntites.ServiceProvider
                         where n.OrgId == Oid
                         select n).ToList();
            }
            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();                    
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(source, searchBy, searchText);
                        break;
                    case "2":
                        source = EqualTo(source, searchBy, searchText);
                        break;
                    case "3":
                        source = Contains(source, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(source, "active", searchText);
                        break;
                    case "51":
                        source = Startswith(source, "inactive", searchText);
                        break;
                    case "52":
                        source = Startswith(source, "Yes", searchText);
                        break;
                    case "53":
                        source = Startswith(source, "No", searchText);
                        break;
                }
            }
          
            int num = source.Count<TBL_SERVICEPROVIDER_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).CurrentPage = id;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CREATEDDATE descending
                              select n).Skip<TBL_SERVICEPROVIDER_SMT>(count).Take<TBL_SERVICEPROVIDER_SMT>(10).ToList<TBL_SERVICEPROVIDER_SMT>());
        }

        #region Search Options

        public List<TBL_SERVICEPROVIDER_SMT> Startswith(List<TBL_SERVICEPROVIDER_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.SERVICEPROVIDER.ToLower().StartsWith(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().StartsWith(searchText.ToLower())).ToList();
            }      
            else if (SearchBy == "4")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower().StartsWith(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "active")
            {
                query = query.Where(n => n.STATUS == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.STATUS == false).ToList();
            }
            else if (SearchBy == "Yes")
            {
                query = query.Where(n => n.IsTelcomOperator == true).ToList();
            }
            else if (SearchBy == "No")
            {
                query = query.Where(n => n.IsTelcomOperator == false).ToList();
            }

            List<TBL_SERVICEPROVIDER_SMT> source = query.Select(x => x).ToList<TBL_SERVICEPROVIDER_SMT>();
            return source;
        }

        public List<TBL_SERVICEPROVIDER_SMT> EqualTo(List<TBL_SERVICEPROVIDER_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.SERVICEPROVIDER.ToLower().Trim() == searchText.ToLower().Trim()).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Trim() == searchText.ToLower().Trim()).ToList();
            }
        
            else if (SearchBy == "4")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower()==(searchText.ToLower())).ToList();
            }

            List<TBL_SERVICEPROVIDER_SMT> source = query.Select(x => x).ToList<TBL_SERVICEPROVIDER_SMT>();
            return source;
        }

        public List<TBL_SERVICEPROVIDER_SMT> Contains(List<TBL_SERVICEPROVIDER_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.SERVICEPROVIDER.ToLower().Contains(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Contains(searchText.ToLower())).ToList();
            }
        
            else if (SearchBy == "4")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower().Contains(searchText.ToLower())).ToList();
            }   
            List<TBL_SERVICEPROVIDER_SMT> source = query.Select(x => x).ToList<TBL_SERVICEPROVIDER_SMT>();
            return source;
        }

        #endregion

        public ActionResult ServiceProvider_View(int id)
        {
            base.TempData["currentgetidss"] = "Service";
            TBL_SERVICEPROVIDER_SMT model = this.SmtDbEntites.ServiceProvider.SingleOrDefault<TBL_SERVICEPROVIDER_SMT>(n => n.SERVICEPROVIDERID == id);
            return base.View(model);
        }

        public string UpdateStatus(string status, int bannerid)
        {
            TBL_SERVICEPROVIDER_SMT tbl_serviceprovider_smt = this.SmtDbEntites.ServiceProvider.SingleOrDefault<TBL_SERVICEPROVIDER_SMT>(n => n.SERVICEPROVIDERID == bannerid);
            if (status == "true")
            {
                tbl_serviceprovider_smt.STATUS = false;
            }
            else
            {
                tbl_serviceprovider_smt.STATUS = true;
            }
            this.SmtDbEntites.SaveChanges();
            return "sucess";
        }


        public JsonResult GetNonTelecomOperator(string Orgname)
        {
            int OrgId = 0;
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            if (UserId == 1)
            {
                OrgId = (from m in this.SmtDbEntites.Organisation where m.OrganisationName.ToLower().Trim() == Orgname.ToLower().Trim() select m.OrgId).FirstOrDefault();
            }
            else
            {
                OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).SingleOrDefault();
            }
            SelectList ServiceProvider = this.GetNonTelecomServiceProvider(OrgId);
            return Json(ServiceProvider, JsonRequestBehavior.AllowGet);
        }

       

        public SelectList GetNonTelecomServiceProvider(int id)
        {
            return new SelectList(from m in
                                      (from m in this.SmtDbEntites.ServiceProvider
                                       where m.STATUS && m.OrgId == id && m.IsTelcomOperator == false
                                       select m).AsEnumerable<TBL_SERVICEPROVIDER_SMT>()
                                  select new SelectListItem { Text = m.SERVICEPROVIDER, Value = m.SERVICEPROVIDERID.ToString() }, "Value", "Text");
        }


        public JsonResult GetTelecomOperator(string Orgname)
        {
                int OrgId = 0;
                int UserId = Convert.ToInt32(Session["USERID"].ToString());
                if (UserId == 1)
                {
                    OrgId = (from m in this.SmtDbEntites.Organisation where m.OrganisationName.ToLower().Trim() == Orgname.ToLower().Trim() select m.OrgId).FirstOrDefault();
                }
                else
                {
                    OrgId=(from m in this.SmtDbEntites.AdminLogin where m.USERID==UserId select m.OrgId).SingleOrDefault();
                }
                  
            SelectList ServiceProvider = this.GetTelecomServiceProvider(OrgId);
            return Json(ServiceProvider, JsonRequestBehavior.AllowGet);
        }

        public SelectList GetTelecomServiceProvider(int id)
        {
            return new SelectList(from m in
                                      (from m in this.SmtDbEntites.ServiceProvider
                                       where m.STATUS && m.OrgId == id && m.IsTelcomOperator == true
                                       select m).AsEnumerable<TBL_SERVICEPROVIDER_SMT>()
                                  select new SelectListItem { Text = m.SERVICEPROVIDER, Value = m.SERVICEPROVIDERID.ToString() }, "Value", "Text");
        }

    }
    #endregion

    #region ServicePlanController

    [AuthorizeUser]
    [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
    public class ServicePlanController : BaseController
    {
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();
        private CommonClass objCommon = new CommonClass();

        // Methods
        public SelectList getServiceProvider(bool IsTelecom)
        {
           int UserId = Convert.ToInt32(Session["USERID"].ToString());
           if(UserId==1)
           {
            return new SelectList(from m in
                                      (from m in this.SmtDbEntites.ServiceProvider
                                       where m.STATUS && m.IsTelcomOperator == IsTelecom
                                       select m).AsEnumerable<TBL_SERVICEPROVIDER_SMT>()
                                  orderby m.CREATEDDATE
                                  select new SelectListItem { Text = m.SERVICEPROVIDER, Value = m.SERVICEPROVIDERID.ToString() }, "Value", "Text");
           }
           else
           {
                int OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
                return new SelectList(from m in
                                      (from m in this.SmtDbEntites.ServiceProvider
                                       where m.STATUS && m.OrgId == OrgId && m.IsTelcomOperator == IsTelecom
                                       select m).AsEnumerable<TBL_SERVICEPROVIDER_SMT>()
                                  orderby m.CREATEDDATE
                                  select new SelectListItem { Text = m.SERVICEPROVIDER, Value = m.SERVICEPROVIDERID.ToString() }, "Value", "Text");

           }
        }


        public SelectList getServiceProvider1(int ServiceProvider)
        {
              int OrgId=(from n in this.SmtDbEntites.ServiceProvider where n.SERVICEPROVIDERID==ServiceProvider select n.OrgId).SingleOrDefault();
              bool IsTelecomOperator = (from n in this.SmtDbEntites.ServiceProvider where n.SERVICEPROVIDERID == ServiceProvider select n.IsTelcomOperator).SingleOrDefault();
                return new SelectList(from m in
                                          (from m in this.SmtDbEntites.ServiceProvider
                                           where m.STATUS && m.OrgId == OrgId && m.IsTelcomOperator == IsTelecomOperator
                                           select m).AsEnumerable<TBL_SERVICEPROVIDER_SMT>()
                                      orderby m.CREATEDDATE
                                      select new SelectListItem { Text = m.SERVICEPROVIDER, Value = m.SERVICEPROVIDERID.ToString() }, "Value", "Text");
          
        }


        public SelectList getServiceType()
        {
          
               return new SelectList(from m in
                                         (from m in this.SmtDbEntites.ServiceType
                                          where m.STATUS == true
                                          select m).AsEnumerable<TBL_SERVICETYPE_SMT>()
                                     orderby m.CREATEDDATE
                                     select new SelectListItem { Text = m.SERVICETYPENAME, Value = m.SERVICETYPEID.ToString() }, "Value", "Text");
           
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpGet]
        public ActionResult ServicePlan_Add()
        {
            base.TempData["currentgetidss"] = "Service";
            ((dynamic)base.ViewBag).ServiceProviderlst = this.getServiceProvider(true);
            ((dynamic)base.ViewBag).ServiceTypelst = this.getServiceType();
            return base.View();
        }

        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult ServicePlan_Add(TBL_SERVICEPLAN_SMT ObjServicePlan)
        {
            ((dynamic)base.ViewBag).ServiceProviderlst = this.getServiceProvider(ObjServicePlan.IsTelcomOperator);
            ((dynamic)base.ViewBag).ServiceTypelst = this.getServiceType();
            if (base.ModelState.IsValid)
            {
                if ((from n in this.SmtDbEntites.ServicePlan
                     where ((n.SERVICETYPEID == ObjServicePlan.SERVICETYPEID) && (n.SERVICEPROVIDERID == ObjServicePlan.SERVICEPROVIDERID)) && (n.PLANNAEME.ToLower().Trim() == ObjServicePlan.PLANNAEME.ToLower().Trim())
                     select n).ToList<TBL_SERVICEPLAN_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Service Plan Already Exists";
                    return base.View(ObjServicePlan);
                }
                ObjServicePlan.CREATEDDATE = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString()));
                ObjServicePlan.CREATEDBY = base.Session["USERNAME"].ToString();
                this.SmtDbEntites.ServicePlan.Add(ObjServicePlan);
                this.SmtDbEntites.SaveChanges();
                base.TempData["messagealert"] = "Service Plan Added Successfully";
                return base.RedirectToAction("ServicePlan_List");
            }
            return base.View(ObjServicePlan);
        }

        public string ServicePlan_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                TBL_SERVICEPLAN_SMT entity = this.SmtDbEntites.ServicePlan.SingleOrDefault<TBL_SERVICEPLAN_SMT>(n => n.SERVICEPLANID == bannerid);
                this.SmtDbEntites.ServicePlan.Remove(entity);
                this.SmtDbEntites.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        public ActionResult ServicePlan_Delete(int id)
        {
            TBL_SERVICEPLAN_SMT entity = this.SmtDbEntites.ServicePlan.SingleOrDefault<TBL_SERVICEPLAN_SMT>(n => n.SERVICEPLANID == id);
            this.SmtDbEntites.ServicePlan.Remove(entity);
            this.SmtDbEntites.SaveChanges();
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return base.RedirectToAction("ServicePlan_List");
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpGet]
        public ActionResult ServicePlan_Edit(int id)
        {
            base.TempData["currentgetidss"] = "Service";
            TBL_SERVICEPLAN_SMT model = this.SmtDbEntites.ServicePlan.SingleOrDefault<TBL_SERVICEPLAN_SMT>(n => n.SERVICEPLANID == id);
            model.IsTelcomOperator= (from n in this.SmtDbEntites.ServiceProvider where n.SERVICEPROVIDERID == model.SERVICEPROVIDERID select n.IsTelcomOperator).SingleOrDefault();
            int OrgId=(from n in this.SmtDbEntites.ServiceProvider where n.SERVICEPROVIDERID==model.SERVICEPROVIDERID select n.OrgId).SingleOrDefault();
            model.OrgName=(from n in this.SmtDbEntites.Organisation where n.OrgId==OrgId select n.OrganisationName).SingleOrDefault();
            ((dynamic)base.ViewBag).ServiseProviderList = this.getServiceProvider1(model.SERVICEPROVIDERID);
            ((dynamic)base.ViewBag).ServiceTypelst = this.getServiceType();
            return base.View(model);
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpPost]
        public ActionResult ServicePlan_Edit(int id, TBL_SERVICEPLAN_SMT objService)
        {
            ((dynamic)base.ViewBag).ServiseProviderList = this.getServiceProvider1(objService.SERVICEPROVIDERID);
            ((dynamic)base.ViewBag).ServiceTypelst = this.getServiceType();
            if (base.ModelState.IsValid)
            {
                if ((from n in this.SmtDbEntites.ServicePlan
                     where (((n.SERVICEPLANID != id) && (n.SERVICETYPEID == objService.SERVICETYPEID)) && (n.SERVICEPROVIDERID == objService.SERVICEPROVIDERID)) && (n.PLANNAEME.ToLower().Trim() == objService.PLANNAEME.ToLower().Trim())
                     select n).ToList<TBL_SERVICEPLAN_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Service Plan Already Exists";
                    return base.View(objService);
                }
                TBL_SERVICEPLAN_SMT tbl_serviceplan_smt = this.SmtDbEntites.ServicePlan.SingleOrDefault<TBL_SERVICEPLAN_SMT>(n => n.SERVICEPLANID == id);
                tbl_serviceplan_smt.SERVICEPROVIDERID = objService.SERVICEPROVIDERID;
                tbl_serviceplan_smt.SERVICETYPEID = objService.SERVICETYPEID;
                tbl_serviceplan_smt.PLANNAEME = objService.PLANNAEME;
                tbl_serviceplan_smt.VALUEOFPLAN = objService.VALUEOFPLAN;
                tbl_serviceplan_smt.CREDITPOINTS = objService.CREDITPOINTS;
                tbl_serviceplan_smt.VALIDITY = objService.VALIDITY;
                tbl_serviceplan_smt.STATUS = objService.STATUS;
                tbl_serviceplan_smt.MODIFIEDBY = base.Session["USERNAME"].ToString();
                tbl_serviceplan_smt.MODIFIEDDATE = new DateTime?(DateTime.Now);
                this.SmtDbEntites.SaveChanges();
                base.TempData["messagealert"] = "Service Plan Updated Successfully";
                return base.RedirectToAction("ServicePlan_List");
            }
            return base.View(objService);
        }

        public ActionResult ServicePlan_List(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "Service";
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"].ToString() != string.Empty))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<TBL_SERVICEPLAN_SMT> source = new List<TBL_SERVICEPLAN_SMT>();
            if (UserId == 1)
            {
                source = this.SmtDbEntites.ServicePlan.ToList<TBL_SERVICEPLAN_SMT>();
            }
            else
            {
                source = (from n in this.SmtDbEntites.ServicePlan where n.serviceprovider.OrgId == OrgId select n).ToList<TBL_SERVICEPLAN_SMT>();
            }
            if ((search != null) && (search != string.Empty))
            {             
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(source, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(source, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(source, searchBy, searchText);
                        break;

                    case "50":
                        source = Startswith(source, "active", searchText);
                        break;

                    case "51":
                        source = Startswith(source, "inactive", searchText);
                        break;

                    case "52":
                        source = Startswith(source, "Greater", searchText);
                        break;

                    case "53":
                        source = Startswith(source, "Less", searchText);
                        break;

                    case "54":
                        source = Startswith(source, "Equal", searchText);
                        break;

                    case "55":
                        source = Contains(source, "Greater", searchText);
                        break;

                    case "56":
                        source = Contains(source, "Less", searchText);
                        break;

                    case "57":
                        source = Contains(source, "Equal", searchText);
                        break; 

                }
            }
        
            int num = source.Count<TBL_SERVICEPLAN_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CREATEDDATE descending
                              select n).Skip<TBL_SERVICEPLAN_SMT>(count).Take<TBL_SERVICEPLAN_SMT>(10).ToList<TBL_SERVICEPLAN_SMT>());
        }

        #region Search Options

        public List<TBL_SERVICEPLAN_SMT> Startswith(List<TBL_SERVICEPLAN_SMT> query, string SearchBy, string searchText)
        {

            if (SearchBy == "1")
            {
                query = query.Where(n => n.PLANNAEME.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.servicetype.SERVICETYPENAME.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.serviceprovider.SERVICEPROVIDER.ToLower().StartsWith(searchText)).ToList();
            }           
            else if (SearchBy == "6")
            {
                query = query.Where(n => n.VALIDITY.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "7")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "active")
            {
                query = query.Where(n => n.STATUS == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.STATUS == false).ToList();
            }
            else if (SearchBy == "Greater")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => n.VALUEOFPLAN > Convert.ToInt32(searchText)).ToList();
                }               
            }
            else if (SearchBy == "Less")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => n.VALUEOFPLAN < Convert.ToInt32(searchText)).ToList();
                }
            }
            else if (SearchBy == "Equal")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => n.VALUEOFPLAN == Convert.ToInt32(searchText)).ToList();
                }
            }  
            List<TBL_SERVICEPLAN_SMT> source = query.Select(x => x).ToList<TBL_SERVICEPLAN_SMT>();
            return source;
        }

        public List<TBL_SERVICEPLAN_SMT> EqualTo(List<TBL_SERVICEPLAN_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.PLANNAEME.ToLower() == (searchText)).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.servicetype.SERVICETYPENAME.ToLower() == searchText).ToList();
            }

            else if (SearchBy == "3")
            {
                query = query.Where(n => n.serviceprovider.SERVICEPROVIDER.ToLower() == searchText).ToList();
            }    
            else if (SearchBy == "6")
            {
                query = query.Where(n => n.VALIDITY.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "7")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower()==(searchText)).ToList();
            }

            List<TBL_SERVICEPLAN_SMT> source = query.Select(x => x).ToList<TBL_SERVICEPLAN_SMT>();
            return source;
        }

        public List<TBL_SERVICEPLAN_SMT> Contains(List<TBL_SERVICEPLAN_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.PLANNAEME.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.servicetype.SERVICETYPENAME.ToLower().Contains(searchText)).ToList();
            }

            else if (SearchBy == "3")
            {
                query = query.Where(n => n.serviceprovider.SERVICEPROVIDER.ToLower().Contains(searchText)).ToList();
            }      
          
            else if (SearchBy == "6")
            {
                query = query.Where(n => n.VALIDITY.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "7")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "Greater")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => n.CREDITPOINTS > Convert.ToInt32(searchText)).ToList();
                }
            }
            else if (SearchBy == "Less")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => n.CREDITPOINTS < Convert.ToInt32(searchText)).ToList();
                }
            }
            else if (SearchBy == "Equal")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => n.CREDITPOINTS == Convert.ToInt32(searchText)).ToList();
                }
            }  

            List<TBL_SERVICEPLAN_SMT> source = query.Select(x => x).ToList<TBL_SERVICEPLAN_SMT>();
            return source;
        }

        #endregion


        public ActionResult ServicePlan_View(int id)
        {
            base.TempData["currentgetidss"] = "Service";
            TBL_SERVICEPLAN_SMT model = this.SmtDbEntites.ServicePlan.SingleOrDefault<TBL_SERVICEPLAN_SMT>(n => n.SERVICEPLANID == id);
            return base.View(model);
        }

        public string UpdateStatus(string status, int bannerid)
        {
            TBL_SERVICEPLAN_SMT tbl_serviceplan_smt = this.SmtDbEntites.ServicePlan.SingleOrDefault<TBL_SERVICEPLAN_SMT>(n => n.SERVICEPLANID == bannerid);
            if (status == "true")
            {
                tbl_serviceplan_smt.STATUS = false;
            }
            else
            {
                tbl_serviceplan_smt.STATUS = true;
            }
            this.SmtDbEntites.SaveChanges();
            return "sucess";
        }
    }
    #endregion

    #region SmartController

    
    [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
    public class SmartController : BaseController
    {
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();
 
        // Methods
        [AuthorizeUser]
        [HttpGet]
        public ActionResult AssignNotification()
        {
            ((dynamic)base.ViewBag).ServiceProviderlst = this.getServiceProvider();
            return base.View();
        }

        [AuthorizeUser]
        [HttpPost]
        public ActionResult AssignNotification(Labour objlabour)
        {
            ((dynamic)base.ViewBag).ServiceProviderlst = this.getServiceProvider();
            if (objlabour != null)
            {
                Labour labour = new Labour();
                string LabourId = objlabour.LabourID;
                labour = this.SmtDbEntites.Labours.SingleOrDefault<Labour>(n => n.LabourID == LabourId);
                string notificationMsg = objlabour.NotificationMsg;
                if ((labour.DeviceToken != null) && (labour.DeviceType == "Android"))
                {
                    string deviceToken = labour.DeviceToken;
                    string str2 = "AIzaSyCDuLpL_40YdjlU7BkBbMc9Cr5n4PuRCig";

                    WebRequest request = WebRequest.Create("https://gcm-http.googleapis.com/gcm/send");
                    request.Method = "post";
                    request.ContentType = " application/x-www-form-urlencoded;charset=UTF-8";
                    request.Headers.Add(string.Format("Authorization: key={0}", str2));
                    string str5 = string.Concat(new object[] { "collapse_key=Updates Available&data.message=", notificationMsg, "&data.title=\"smartLabours\"&data.notId=", DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Millisecond, "&data.time=", DateTime.Now.ToString(), "&to=", deviceToken });
                    Console.WriteLine(str5);
                    byte[] bytes = Encoding.UTF8.GetBytes(str5);
                    request.ContentLength = bytes.Length;
                    Stream requestStream = request.GetRequestStream();
                    requestStream.Write(bytes, 0, bytes.Length);
                    requestStream.Close();
                    WebResponse response = request.GetResponse();
                    requestStream = response.GetResponseStream();
                    StreamReader reader = new StreamReader(requestStream);
                    string str6 = reader.ReadToEnd();
                    reader.Close();
                    requestStream.Close();
                    response.Close();
                    ((dynamic)base.ViewBag).Message = "Msg successfully send";
                }
                else if ((labour.DeviceToken != null) && (labour.DeviceType == "iOS"))
                {
                    string deviceToken = labour.DeviceToken;
                    sendAppleNotification(deviceToken, notificationMsg);
                }
                return base.View();
            }
            return base.View();
        }

        [AuthorizeUser]
        public ActionResult Dashboard()
        {
            ((dynamic)base.ViewBag).lastweakcount = this.GetLabourCount();
            base.TempData["currentgetidss"] = "Others";
            ((dynamic)base.ViewBag).lastweaksponsorcount = this.GetsponsorCount();
            return base.View();
        }

        public long GetLabourCount()
        {
            try
            {
                Database database = DatabaseFactory.CreateDatabase("DefaultConnection");
                string storedProcedureName = "PROC_DASHBOADLATESTCOUNT";
                DbCommand storedProcCommand = database.GetStoredProcCommand(storedProcedureName);
                database.AddInParameter(storedProcCommand, "@Type", DbType.String, "Labour");
                long num = 0L;
                using (IDataReader reader = database.ExecuteReader(storedProcCommand))
                {
                    while (reader.Read())
                    {
                        if (reader["Lastlabourcount"] != DBNull.Value)
                        {
                            num = Convert.ToInt32(reader["Lastlabourcount"].ToString());
                        }
                    }
                }
                return num;
            }
            catch
            {
                return 0L;
            }
        }

        public SelectList getServiceProvider()
        {
            return new SelectList(from m in
                                      (from m in this.SmtDbEntites.Labours
                                       where m.STATUS
                                       select m).AsEnumerable<Labour>()
                                  orderby m.CREATEDDATE
                                  select new SelectListItem { Text = m.Name, Value = m.LabourID.ToString() }, "Value", "Text");
        }

        public long GetsponsorCount()
        {
            try
            {
                Database database = DatabaseFactory.CreateDatabase("DefaultConnection");
                string storedProcedureName = "PROC_DASHBOADLATESTCOUNT";
                DbCommand storedProcCommand = database.GetStoredProcCommand(storedProcedureName);
                database.AddInParameter(storedProcCommand, "@Type", DbType.String, "sponsor");
                long num = 0L;
                using (IDataReader reader = database.ExecuteReader(storedProcCommand))
                {
                    while (reader.Read())
                    {
                        if (reader["Sponsorcount"] != DBNull.Value)
                        {
                            num = Convert.ToInt32(reader["Sponsorcount"].ToString());
                        }
                    }
                }
                return num;
            }
            catch
            {
                return 0L;
            }
        }

        [HttpGet]
        public ActionResult RequestPhoneSettings(int? id, string search)
        {
            base.TempData["currentgetidss"] = "Others";

            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }

            List<TBL_REQUESTFAMILYSETTINGS_SMT> source = new List<TBL_REQUESTFAMILYSETTINGS_SMT>();
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
               int OrgId =0;
            if(UserId==1)
            {
                source = (from n in this.SmtDbEntites.Requestsettings select n).ToList<TBL_REQUESTFAMILYSETTINGS_SMT>();
            }  
            else{
                 OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
                 source = (from n in this.SmtDbEntites.Requestsettings where n.OrgId == OrgId select n).ToList<TBL_REQUESTFAMILYSETTINGS_SMT>();
            }
           // return base.View(source);


            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();

                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(source, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(source, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(source, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(source, "active", searchText);
                        break;
                    case "51":
                        source = Startswith(source, "inactive", searchText);
                        break;
                }
            }
         

            int num = source.Count<TBL_REQUESTFAMILYSETTINGS_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;           
            List<TBL_REQUESTFAMILYSETTINGS_SMT> ReqList = new List<TBL_REQUESTFAMILYSETTINGS_SMT>();
            ReqList = (from n in source
                       orderby n.REQUESTPHONEFAMILID descending
                       select n).Skip<TBL_REQUESTFAMILYSETTINGS_SMT>(count).Take<TBL_REQUESTFAMILYSETTINGS_SMT>(10).ToList<TBL_REQUESTFAMILYSETTINGS_SMT>();

            return base.View(ReqList);


        }


        public string UpdateStatus(string status, int bannerid)
        {
            TBL_REQUESTFAMILYSETTINGS_SMT objReq = this.SmtDbEntites.Requestsettings.SingleOrDefault<TBL_REQUESTFAMILYSETTINGS_SMT>(n => n.REQUESTPHONEFAMILID == bannerid);
            if (status == "true")
            {
                objReq.REQUESTFAMILYSTATUS = false;
            }
            else
            {
                objReq.REQUESTFAMILYSTATUS = true;
            }            
            this.SmtDbEntites.SaveChanges();
            return "sucess";
        }


        private List<TBL_REQUESTFAMILYSETTINGS_SMT> Contains(List<TBL_REQUESTFAMILYSETTINGS_SMT> query, string searchBy, string searchText)
        {

            if (searchBy == "1")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Contains(searchText)).ToList();
            }
            else if (searchBy == "2")
            {
                query = query.Where(n => Convert.ToString(n.Organizations.CreatedDate).ToLower().Contains(searchText)).ToList();
            }
            List<TBL_REQUESTFAMILYSETTINGS_SMT> source = query.Select(x => x).ToList<TBL_REQUESTFAMILYSETTINGS_SMT>();
            return source;
        }

        private List<TBL_REQUESTFAMILYSETTINGS_SMT> EqualTo(List<TBL_REQUESTFAMILYSETTINGS_SMT> query, string searchBy, string searchText)
        {

            if (searchBy == "1")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower()==(searchText)).ToList();
            }
            else if (searchBy == "2")
            {
                query = query.Where(n => Convert.ToString(n.Organizations.CreatedDate).ToLower()==(searchText)).ToList();
            }
            List<TBL_REQUESTFAMILYSETTINGS_SMT> source = query.Select(x => x).ToList<TBL_REQUESTFAMILYSETTINGS_SMT>();
            return source;
        }

        private List<TBL_REQUESTFAMILYSETTINGS_SMT> Startswith(List<TBL_REQUESTFAMILYSETTINGS_SMT> query, string searchBy, string searchText)
        {
            if (searchBy == "1")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "2")
            {
                query = query.Where(n => Convert.ToString(n.Organizations.CreatedDate).ToLower().StartsWith(searchText)).ToList();
            }

            else if (searchBy == "active")
            {
                query = query.Where(n => n.REQUESTFAMILYSTATUS == true).ToList();
            }
            else if (searchBy == "inactive")
            {
                query = query.Where(n => n.REQUESTFAMILYSTATUS == false).ToList();
            }

            List<TBL_REQUESTFAMILYSETTINGS_SMT> source = query.Select(x => x).ToList<TBL_REQUESTFAMILYSETTINGS_SMT>();
            return source;
        }

        #region Search Options

        /// <summary>
        /// Search method for  Starts With search  value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_CategoryMaster> Startswith(List<TBL_CategoryMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.CategoryName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().StartsWith(searchText)).ToList();
            }

            else if (SearchBy == "active")
            {
                query = query.Where(n => n.Status == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.Status == false).ToList();
            }

            List<TBL_CategoryMaster> source = query.Select(x => x).ToList<TBL_CategoryMaster>();
            return source;
        }

        /// <summary>
        /// Search method for Equal to search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_CategoryMaster> EqualTo(List<TBL_CategoryMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.CategoryName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower() == searchText).ToList();
            }


            List<TBL_CategoryMaster> source = query.Select(x => x).ToList<TBL_CategoryMaster>();
            return source;
        }

        /// <summary>
        /// Search method Contains Search value 
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_CategoryMaster> Contains(List<TBL_CategoryMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.CategoryName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Contains(searchText)).ToList();
            }

            List<TBL_CategoryMaster> source = query.Select(x => x).ToList<TBL_CategoryMaster>();
            return source;
        }

        #endregion


        [HttpPost]
        public ActionResult RequestPhoneSettings(TBL_REQUESTFAMILYSETTINGS_SMT objfamily)
        {
            base.TempData["currentgetidss"] = "Others";
            TBL_REQUESTFAMILYSETTINGS_SMT tbl_requestfamilysettings_smt = new TBL_REQUESTFAMILYSETTINGS_SMT();
            tbl_requestfamilysettings_smt = this.SmtDbEntites.Requestsettings.SingleOrDefault<TBL_REQUESTFAMILYSETTINGS_SMT>(n => (n.REQUESTPHONEFAMILID == 1));
            if (tbl_requestfamilysettings_smt != null)
            {
                this.SmtDbEntites.Requestsettings.SingleOrDefault<TBL_REQUESTFAMILYSETTINGS_SMT>(n => (n.REQUESTPHONEFAMILID == 1)).REQUESTFAMILYSTATUS = objfamily.REQUESTFAMILYSTATUS;
                SmtDbEntites.Entry(tbl_requestfamilysettings_smt).State = EntityState.Modified;
            }
            else
            {
                tbl_requestfamilysettings_smt = new TBL_REQUESTFAMILYSETTINGS_SMT();
                tbl_requestfamilysettings_smt.REQUESTFAMILYSTATUS = objfamily.REQUESTFAMILYSTATUS;
                SmtDbEntites.Entry(tbl_requestfamilysettings_smt).State = EntityState.Added;
            }
            this.SmtDbEntites.SaveChanges();
            ((dynamic)base.ViewBag).success = "Settings updated Successfully";
            return base.View();
        }
    }
    #endregion

    #region  List Labour And Sponsor List
    [AuthorizeUser]
    public class SmartUsersController : BaseController
    {
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        // Methods
        public ActionResult Labour_List(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();

            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "UserList";
            List<Labour> source = new List<Labour>();          
             if (UserId==1)
            {
                source = this.SmtDbEntites.Labours.ToList();
            }
            else
            {
                source = (from n in SmtDbEntites.Labours where n.OrgId == OrgId select n).ToList();
            }
            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(source, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(source, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(source, searchBy, searchText);
                        break;

                    case "50":
                        source = Startswith(source, "active", searchText);
                        break;

                    case "51":
                        source = Startswith(source, "inactive", searchText);
                        break;

                }
            }
           
            int num = source.Count<Labour>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CREATEDDATE descending
                              select n).Skip<Labour>(count).Take<Labour>(10).ToList<Labour>());
        }

        #region Labour List Search

        public List<Labour> Startswith(List<Labour> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower().StartsWith(searchText.ToLower())).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.LabourID.ToLower().StartsWith(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.EmailID.StartsWith(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneNumber.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().StartsWith(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower().StartsWith(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "active")
            {
                query = query.Where(n => n.STATUS == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.STATUS == false).ToList();
            }
            List<Labour> source = query.Select(x => x).ToList<Labour>();
            return source;
        }

        public List<Labour> EqualTo(List<Labour> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower() == searchText.ToLower()).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.LabourID.ToLower() == searchText.ToLower()).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.EmailID.ToLower() == searchText.ToLower()).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneNumber == searchText).ToList().ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower() == searchText.ToLower()).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower()==(searchText.ToLower())).ToList();
            }
            List<Labour> source = query.Select(x => x).ToList<Labour>();
            return source;
        }

        public List<Labour> Contains(List<Labour> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower().Contains(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.LabourID.ToLower().Contains(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.EmailID.ToLower().Contains(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneNumber.Contains(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Contains(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower().Contains(searchText.ToLower())).ToList();
            }
            List<Labour> source = query.Select(x => x).ToList<Labour>();
            return source;
        }

        #endregion

        public string Labours_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                Labour entity = this.SmtDbEntites.Labours.SingleOrDefault<Labour>(n => n.UserID == bannerid);
                this.SmtDbEntites.Labours.Remove(entity);
                this.SmtDbEntites.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        public ActionResult Labours_View(int id)
        {
            base.TempData["currentgetidss"] = "UserList";
            Labour model = (from n in this.SmtDbEntites.Labours.Include("serviceprovider")
                            where n.serviceprovider.SERVICEPROVIDERID == n.SERVICEPROVIDERID
                            select n).SingleOrDefault<Labour>(n => n.UserID == id);
            return base.View(model);
        }

        public string Sponsor_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                Sponsor entity = this.SmtDbEntites.Sponsor.SingleOrDefault<Sponsor>(n => n.UserID == bannerid);
                this.SmtDbEntites.Sponsor.Remove(entity);
                this.SmtDbEntites.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        public ActionResult sponsor_List(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "UserList";
            List<Sponsor> source = new List<Sponsor>();           
             if (UserId==1)
            {
                source = (from n in this.SmtDbEntites.Sponsor
                         select n).ToList();
            }
            else
            {
                source = (from n in this.SmtDbEntites.Sponsor
                         where n.OrgId == OrgId
                         select n).ToList();
            }
            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = SponsorStartswith(source, searchBy, searchText);

                        break;

                    case "2":
                        source = SponsorEqualTo(source, searchBy, searchText);

                        break;

                    case "3":
                        source = SponsorContains(source, searchBy, searchText);

                        break;
                    case "50":
                        source = SponsorStartswith(source, "active", searchText);
                        break;

                    case "51":
                        source = SponsorStartswith(source, "inactive", searchText);
                        break;

                }
            }
           
            int num = source.Count<Sponsor>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.UserID descending
                              select n).Skip<Sponsor>(count).Take<Sponsor>(10).ToList<Sponsor>());
        }


        public List<Sponsor> SponsorStartswith(List<Sponsor> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower().StartsWith(searchText.ToLower())).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.EmiratesId.ToLower().StartsWith(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.EmailID.StartsWith(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneNumber.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().StartsWith(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower().StartsWith(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "active")
            {
                query = query.Where(n => n.Status == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.Status == false).ToList();
            }
            List<Sponsor> source = query.Select(x => x).ToList<Sponsor>();
            return source;
        }

        public List<Sponsor> SponsorEqualTo(List<Sponsor> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower() == searchText.ToLower()).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.EmiratesId.ToLower() == searchText.ToLower()).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.EmailID.ToLower() == searchText.ToLower()).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneNumber == searchText).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower() == searchText.ToLower()).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower()==(searchText.ToLower())).ToList();
            }
            List<Sponsor> source = query.Select(x => x).ToList<Sponsor>();
            return source;
        }

        public List<Sponsor> SponsorContains(List<Sponsor> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower().Contains(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.EmiratesId.ToLower().Contains(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.EmailID.ToLower().Contains(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneNumber.Contains(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Contains(searchText.ToLower())).ToList();
            }
            else if (SearchBy == "6")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower().Contains(searchText.ToLower())).ToList();
            }

            List<Sponsor> source = query.Select(x => x).ToList<Sponsor>();
            return source;
        }


        public string Sponsor_SaveHomecontent(string id)
        {
            try
            { 
            List<Sponsor> list = this.SmtDbEntites.Sponsor.ToList<Sponsor>();
            for (int i = 0; i < list.Count; i++)
            {

                //   this.dbOrganizationSubAdminDetails.Entry(prod).State = EntityState.Modified;
                int ids = Convert.ToInt32(list[i].UserID);
                Sponsor objSponsor = this.SmtDbEntites.Sponsor.SingleOrDefault<Sponsor>(n => n.UserID == ids);
                objSponsor.Homecontent = false;
                this.SmtDbEntites.Entry(objSponsor).State = EntityState.Modified;
                this.SmtDbEntites.SaveChanges();
            }
            string[] strArray = id.Split(new char[] { ',' });
            for (int j = 0; j < (strArray.Length - 1); j++)
            {
                int bannerid = Convert.ToInt32(strArray[j].ToString());
                this.SmtDbEntites.Sponsor.SingleOrDefault<Sponsor>(n => (n.UserID == bannerid)).Homecontent = true;
                this.SmtDbEntites.SaveChanges();
            }
           }
            catch (DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
            }         

            return "success";
        }

        public ActionResult Sponsor_View(int id)
        {
            base.TempData["currentgetidss"] = "UserList";
            Sponsor model = this.SmtDbEntites.Sponsor.SingleOrDefault<Sponsor>(n => n.UserID == id);
            return base.View(model);
        }

        public string SponsorUpdateStatus(string status, int bannerid)
        {
            Sponsor sponsor = this.SmtDbEntites.Sponsor.SingleOrDefault<Sponsor>(n => n.UserID == bannerid);
            sponsor.Password = sponsor.Password;
            sponsor.ConfirmPassword = sponsor.Password;
            if (status == "true")
            {
                sponsor.Status = false;
            }
            else
            {
                sponsor.Status = true;
            }
            this.SmtDbEntites.SaveChanges();
            return "sucess";
        }

        public string UpdateStatus(string status, int bannerid)
        {
            Labour labour = this.SmtDbEntites.Labours.SingleOrDefault<Labour>(n => n.UserID == bannerid);
            labour.Password = labour.Password;
            labour.ConfirmPassword = labour.Password;
            if (status == "true")
            {
                labour.STATUS = false;
            }
            else
            {
                labour.STATUS = true;
            }
            labour.OrgName = "Dummy";
            this.SmtDbEntites.SaveChanges();
            return "sucess";

        }
    }
    #endregion

    #region  Sponsor Account

    [AuthorizeSponsor]
    public class SponsorAccountController : Controller
    {
        // Fields
        private SmartLabourEntities dbEntites = new SmartLabourEntities();
        private CommonClass objCommon = new CommonClass();
        // Methods
        public SelectList BindDonationType()
        {
            List<SelectListItem> items = new List<SelectListItem>();
            SelectListItem item = new SelectListItem
            {
                Text = "seletct",
                Value = "0"
            };
            items.Add(item);
            SelectListItem item2 = new SelectListItem
            {
                Text = "Talk Time",
                Value = "Talk Time Amount"
            };
            items.Add(item2);
            SelectListItem item3 = new SelectListItem
            {
                Text = "Data",
                Value = "Data amount"
            };
            items.Add(item3);
            SelectListItem item4 = new SelectListItem
            {
                Text = "Learning",
                Value = "To the website"
            };
            items.Add(item4);
            return new SelectList(items, "Value", "Text");
        }

        public SelectList BindsexType()
        {
            List<SelectListItem> items = new List<SelectListItem>();
            SelectListItem item = new SelectListItem
            {
                Text = "select",
                Value = "0"
            };
            items.Add(item);
            SelectListItem item2 = new SelectListItem
            {
                Text = "Male",
                Value = "1"
            };
            items.Add(item2);
            SelectListItem item3 = new SelectListItem
            {
                Text = "FeMale",
                Value = "2"
            };
            items.Add(item3);
            return new SelectList(items, "Value", "Text");
        }

        public ActionResult Notification()
        {
            base.TempData["currentgetid"] = "idsponsor";
            List<DonatePhone> model = new List<DonatePhone>();
            int userId = Convert.ToInt32(base.Session["SPONSORID"].ToString());
            model = (from n in this.dbEntites.DonatePhone
                     where n.UserID == userId
                     orderby n.DonateID descending
                     select n).ToList<DonatePhone>();
            ((dynamic)base.ViewBag).Notification = (from n in this.dbEntites.SponsorNotification
                                                    where n.UserID == userId
                                                    select n).ToList<TBL_Sponsor_Notifications>();
            return base.View(model);
        }

        [HttpGet]
        public ActionResult PostTestimonial()
        {
            base.TempData["currentgetid"] = "idsponsor";
            string str = base.Session["SPONSORID"].ToString();
            if (base.Session["SPONSORID"] != null)
            {
            }
            return base.View();
        }

        [HttpPost]
        public ActionResult PostTestimonial(TBL_TESTIMONIAL_SMT objTestimonial, HttpPostedFileBase image)
        {
            base.TempData["currentgetid"] = "idsponsor";
            string str = base.Session["SPONSORID"].ToString();
            if (base.Session["SPONSORID"] != null)
            {
                try
                {
                    string[] strArray;
                    objTestimonial.Status = false;
                    if (base.ModelState.IsValid)
                    {
                        if ((objTestimonial.videoFile != string.Empty) && (objTestimonial.videoFile != null))
                        {
                            strArray = objTestimonial.videoFile.Split(new char[] { '|' });
                            if (strArray.Length == 2)
                            {
                                objTestimonial.Mp4filename = strArray[0];
                                objTestimonial.Webmfilename = strArray[1];
                            }
                        }
                        if ((from n in this.dbEntites.Testimonial
                             where n.Title.ToLower().Trim() == objTestimonial.Title.ToLower().Trim()
                             select n).ToList<TBL_TESTIMONIAL_SMT>().Count > 0)
                        {
                            ((dynamic)base.ViewBag).messagealert = "Testimonial Title Already Exists";
                            return base.View(objTestimonial);
                        }
                        if (image != null)
                        {
                            string fileName = Path.GetFileName(image.FileName);
                            string str3 = "";
                            string str4 = "";
                            string str5 = Path.GetExtension(fileName.ToString()).ToLower();
                            string[] strArray2 = new string[] { ".png", ".jpg", ".gif" };
                            for (int i = 0; i < strArray2.Length; i++)
                            {
                                if (str5 == strArray2[i])
                                {
                                    str3 = strArray2[i].ToString();
                                }
                            }
                            string str6 = DateTime.Now.ToString("ddMMyyhhmmss");
                            string[] strArray3 = fileName.ToString().Split(new char[] { '.' });
                            if (strArray3[0].ToString().Length > 30)
                            {
                                str4 = strArray3[0].ToString().Substring(0, 0x1d) + str6 + str3.ToString();
                            }
                            else
                            {
                                str4 = strArray3[0].ToString() + str6 + str3.ToString();
                            }
                            string filename = Path.Combine(base.Server.MapPath("~/Content/Admin/images/Testimonial/"), str4);
                            image.SaveAs(filename);
                            objTestimonial.Image = str4;
                        }
                        objTestimonial.videoFile = objTestimonial.videoFile;
                        this.dbEntites.Testimonial.Add(objTestimonial);
                        this.dbEntites.SaveChanges();
                        base.TempData["messagealert"] = "Thank you For Posting Testimonial !!";
                        return base.RedirectToAction("ProfileDetails");
                    }
                    if ((objTestimonial.videoFile != string.Empty) && (objTestimonial.videoFile != null))
                    {
                        strArray = objTestimonial.videoFile.Split(new char[] { '|' });
                        if (strArray.Length == 2)
                        {
                            objTestimonial.Mp4filename = strArray[0];
                            objTestimonial.Webmfilename = strArray[1];
                        }
                    }
                    return base.View(objTestimonial);
                }
                catch
                {
                    return this.Redirect("/");
                }
            }
            return base.View();
        }

        [HttpGet]
        public ActionResult ProfileDetails()
        {
            try
            {
                string OrgName;
                int userId = Convert.ToInt32(base.Session["SPONSORID"].ToString());
                ((dynamic)base.ViewBag).sex = this.BindsexType();
                Sponsor model = this.dbEntites.Sponsor.SingleOrDefault<Sponsor>(n => n.UserID == userId);

                if (model.ChangeStatus == 0)
                {
                    OrgName = (from n in this.dbEntites.Organisation where n.OrgId == model.OrgId select n.OrganisationName).SingleOrDefault();
                }
                else
                {
                    OrgName = (from n in this.dbEntites.Organisation where n.OrgId == 1 select n.OrganisationName).SingleOrDefault();
                }
                string CountryCode = (from n in this.dbEntites.Country where n.CountryName == model.Country select n.CountryCode).SingleOrDefault();

                base.TempData["currentgetid"] = "idsponsor";
                model.OrgName = OrgName;
                model.CountryCode = CountryCode;
                if ((base.TempData["postphone"] != "") && (base.TempData["postphone"] != null))
                {
                    base.ViewData["postphone"] = 1;
                }
                else
                {
                    base.ViewData["postphone"] = "";
                }
                if ((base.TempData["donateId"] != null) && (base.TempData["donateId"] != ""))
                {
                    ((dynamic)base.ViewBag).messagealert = base.TempData["donateId"];
                }
                if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
                {
                    ((dynamic)base.ViewBag).Testimonialalert = "Thank you For Posting Testimonial !!";
                }
                return base.View(model);
            }
            catch
            {
                return null;
            }
        }

        [HttpPost]
        public ActionResult ProfileDetails(Sponsor objsponsor, IEnumerable<HttpPostedFileBase> UploadImage)
        {
            try
            {
                int Temp = 0;
                base.TempData["currentgetid"] = "idsponsor";
                if (objsponsor.CountryCode == null || objsponsor.CountryCode == string.Empty)
                {
                    return View(objsponsor);
                }
                if (base.ModelState.IsValid)
                {
                    Sponsor sponsor = this.dbEntites.Sponsor.SingleOrDefault<Sponsor>(n => n.UserID == objsponsor.UserID);
                    if (UploadImage != null)
                    {
                        foreach (HttpPostedFileBase base2 in UploadImage)
                        {
                            if (base2 != null)
                            {
                                string fileName = Path.GetFileName(base2.FileName);
                                string str2 = "";
                                string str3 = "";
                                string str4 = Path.GetExtension(fileName.ToString()).ToLower();
                                string[] strArray = new string[] { ".png", ".jpg", ".gif", ".jpeg" };
                                for (int i = 0; i < strArray.Length; i++)
                                {
                                    if (str4 == strArray[i])
                                    {
                                        str2 = strArray[i].ToString();
                                    }
                                }
                                string str5 = DateTime.Now.ToString("ddMMyyhhmmss");
                                fileName = fileName.Replace(" ", "");
                                string[] strArray2 = fileName.ToString().Split(new char[] { '.' });
                                if (fileName.ToString().Length > 30)
                                {
                                    str3 = strArray2[0].ToString().Substring(0, 30) + str5 + str2.ToString();
                                }
                                else
                                {
                                    str3 = strArray2[0].ToString() + str5 + str2.ToString();
                                }
                                string filename = Path.Combine(base.Server.MapPath("~/Content/Front/Images/sponsorImage/"), str3);
                                base2.SaveAs(filename);
                                sponsor.sponsorImage = str3;
                            }
                        }
                    }
                    int OrgId = (from n in this.dbEntites.Sponsor where n.UserID == objsponsor.UserID select n.OrgId).SingleOrDefault();
                    if (OrgId == 1)
                    {
                        int Orgid = (from n in this.dbEntites.Organisation where n.OrganisationName == objsponsor.OrgName select n.OrgId).SingleOrDefault();
                        if (Orgid != 0)
                        {
                            sponsor.OrgId = Orgid;
                            sponsor.ChangeStatus = 1;
                            Temp = 1;
                        }

                    }
                    // sponsor.CreatedFrom = true;
                    sponsor.City = objsponsor.City;
                    sponsor.State = objsponsor.State;
                    sponsor.Country = objsponsor.Country;
                    sponsor.Name = objsponsor.Name;
                    sponsor.DOB = objsponsor.DOB;
                    sponsor.EmailID = objsponsor.EmailID;
                    sponsor.Pincode = objsponsor.Pincode;
                    sponsor.Address1 = objsponsor.Address1;
                    sponsor.PhoneNumber = objsponsor.PhoneNumber;
                    sponsor.Sex = objsponsor.Sex;
                    sponsor.IsDisplayNameAccepted = objsponsor.IsDisplayNameAccepted;
                    this.dbEntites.SaveChanges();
                    if (Temp == 1)
                    {//New Organization :", "Your Organisation has been changed successfully.
                        objCommon.SendingMail(sponsor.EmailID, "Smart Labour - Organization Change", sponsor.EmailID, objsponsor.OrgName, "New Organization :", "Your Organisation has been changed successfully");
                        List<TBL_ADMINLOGIN_SMT> OrgEmail = (from n in this.dbEntites.AdminLogin where n.OrgId == sponsor.OrgId select n).ToList<TBL_ADMINLOGIN_SMT>();
                        foreach (TBL_ADMINLOGIN_SMT org in OrgEmail)
                        {
                            objCommon.SendingMail(org.USEREMAIL, "Smart Labour - New Sponsor", org.USEREMAIL, "", "", "New Sponsor ( " + sponsor.EmiratesId + " ) added in your Organization.");
                        }
                       

                    }
                    return base.RedirectToAction("/ProfileDetails");
                }
                return base.View(objsponsor);
            }
            catch (Exception ex)
            {
                return base.View(objsponsor);
            }
        }

        [HttpGet]
        public ActionResult SponsorDonationWebsite()
        {
            base.TempData["currentgetid"] = "idsponsor";
            ((dynamic)base.ViewBag).DonationType = this.BindDonationType();
            ((dynamic)base.ViewBag).serviceprovider = this.getseviceprovider();
            //((dynamic)base.ViewBag).Serviceplan = this.getServicePlan(0);
            return base.View();
        }

        [HttpPost]
        public ActionResult SponsorDonationWebsite(TBL_VOUCHER_SMT ObjVoucher,HttpPostedFileBase UploadImage)
        {
            base.TempData["currentgetid"] = "idsponsor";

            ((dynamic)base.ViewBag).DonationType = this.BindDonationType();
            ((dynamic)base.ViewBag).serviceprovider = this.getseviceprovider();
            int Amount = 0;
            try
            {
                    Amount = ObjVoucher.DonateAmount;
                    if (ObjVoucher.DonateType != "To the website")
                    {                     
                        ObjVoucher.CREATEDATE = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString()));
                        ObjVoucher.CREATEDBY = base.Session["FUSERNAME"].ToString();
                        if (ObjVoucher.VoucherImageStatus == true && UploadImage != null && UploadImage.ContentLength > 0)
                        {
                            string FileName = Path.GetFileName(UploadImage.FileName.ToString());
                            bool exists = System.IO.Directory.Exists(Server.MapPath("/Uplodify/VoucherImages"));
                            if (!exists)
                            {
                                System.IO.Directory.CreateDirectory(Server.MapPath("/Uplodify/VoucherImages"));
                            }
                            string savedFileName = System.Web.HttpContext.Current.Server.MapPath("/Uplodify/VoucherImages/Img_" + ObjVoucher.CODES + "_" + FileName);
                            UploadImage.SaveAs(savedFileName);
                            ObjVoucher.VoucherImage = "Img_" + ObjVoucher.CODES + "_" + FileName;
                        }
                        else
                        {
                            ObjVoucher.VoucherImage = null;
                        }
                       
                        Amount = (from n in this.dbEntites.ServicePlan where n.SERVICEPLANID == ObjVoucher.SERVICEPLANID select n.VALUEOFPLAN).SingleOrDefault();
                        this.dbEntites.Voucher.Add(ObjVoucher);
                        this.dbEntites.SaveChanges();
                    }

                    TBL_SPONSOROTHERDONATION_SMT objDonate = new TBL_SPONSOROTHERDONATION_SMT();              
                    int num = Convert.ToInt32(base.Session["SPONSORID"].ToString());                   
                    objDonate.DonateAmount=Amount;
                    objDonate.DonateType = Convert.ToString(ObjVoucher.DonateType); 
                    objDonate.Description = ObjVoucher.Description;
                    objDonate.UserId = num;
                    objDonate.CreatedDate = new DateTime?(DateTime.Now);
                    objDonate.CreatedBy = base.Session["FUSERNAME"].ToString();
                    this.dbEntites.SponsorotherDonation.Add(objDonate);
                    this.dbEntites.SaveChanges();
                    base.TempData["donateId"] = "Dear Sponsor, Thank you for your participation, we will get in touch with you to take this forward.Best Regards,Smart Labour Team";
                    return this.Redirect("/SponsorAccount/ProfileDetails");
                 
            }
            catch (DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                return base.View();
            }
        }

        public ActionResult CheckVoucherCode(string VoucherCode, int SERVICEPLANID)
        {
            string Alert = "1";
            if ((from n in this.dbEntites.Voucher
                 where (n.CODES ==VoucherCode) && (n.SERVICEPLANID == SERVICEPLANID)
                 select n).ToList<TBL_VOUCHER_SMT>().Count > 0)
            {
                Alert = "Voucher code Already Exists";
               
            }
            return base.Json(Alert, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Bindserviceplan(int providerid, int ServiceType)
        {
            return base.Json(this.getServicePlan(providerid, ServiceType), JsonRequestBehavior.AllowGet);
        }

        public SelectList getServicePlan(int id, int ServiceType)
        {
            return new SelectList(from m in
                                      (from m in this.dbEntites.ServicePlan
                                       where (m.STATUS == true) && (m.SERVICEPROVIDERID == id) && (m.SERVICETYPEID == ServiceType)
                                       select m).AsEnumerable<TBL_SERVICEPLAN_SMT>()
                                  orderby m.CREATEDDATE
                                  select new SelectListItem { Text = m.PLANNAEME + " - " +m.VALUEOFPLAN , Value = m.SERVICEPLANID.ToString() }, "Value", "Text");
        }

        public SelectList getseviceprovider()
        {
            int UserId = Convert.ToInt32(Session["SPONSORID"].ToString());
  
                int OrgId = (from m in this.dbEntites.Sponsor where m.UserID == UserId select m.OrgId).FirstOrDefault();
                return new SelectList(from m in
                                          (from m in this.dbEntites.ServiceProvider
                                           where m.STATUS && m.OrgId == OrgId && m.IsTelcomOperator == true
                                           select m).AsEnumerable<TBL_SERVICEPROVIDER_SMT>()
                                      select new SelectListItem { Text = m.SERVICEPROVIDER, Value = m.SERVICEPROVIDERID.ToString() }, "Value", "Text");
           
        }


    }
    #endregion

    #region SponsorController

    public class SponsorController : Controller
    {
        // Fields
        private SmartLabourEntities db = new SmartLabourEntities();
        private CommonClass objCommon = new CommonClass();
        private static int pagesize = 9;
        // Methods
        public SelectList BindsexType()
        {
            List<SelectListItem> items = new List<SelectListItem>();
            SelectListItem item = new SelectListItem
            {
                Text = "Select",
                Value = "0"
            };
            items.Add(item);
            SelectListItem item2 = new SelectListItem
            {
                Text = "Male",
                Value = "1"
            };
            items.Add(item2);
            SelectListItem item3 = new SelectListItem
            {
                Text = "Female",
                Value = "2"
            };
            items.Add(item3);
            return new SelectList(items, "Value", "Text");
        }

        public ActionResult CheckEmailId(string EmailId)
        {
            string data = "";
            if ((base.Session["SPONSORID"] != null) && (base.Session["SPONSORID"] != string.Empty))
            {
                int sponsorId = Convert.ToInt32(base.Session["SPONSORID"]);
                if ((from n in this.db.Sponsor
                     where (n.UserID != sponsorId) && (n.EmailID.ToLower().Trim() == EmailId.ToLower().Trim())
                     select n).ToList<Sponsor>().Count > 0)
                {
                    data = "Email Id Already Exists!!";
                    return base.Json(data, JsonRequestBehavior.AllowGet);
                }
                return base.Json(data, JsonRequestBehavior.AllowGet);
            }
            if ((from n in this.db.Sponsor
                 where n.EmailID.ToLower().Trim() == EmailId.ToLower().Trim()
                 select n).ToList<Sponsor>().Count > 0)
            {
                data = "Email Id Already Exists!!";
                return base.Json(data, JsonRequestBehavior.AllowGet);
            }
            return base.Json(data, JsonRequestBehavior.AllowGet);
        }

        public ActionResult CheckEmiratesId(string LabourId)
        {
            string data = "";
            if ((base.Session["SPONSORID"] != null) && (base.Session["SPONSORID"] != string.Empty))
            {
                int Emiratesid = Convert.ToInt32(base.Session["SPONSORID"].ToString());
                if ((from n in this.db.Sponsor
                     where (n.UserID != Emiratesid) && (n.EmiratesId.ToLower().Trim() == LabourId.ToLower().Trim())
                     select n).ToList<Sponsor>().Count > 0)
                {
                    data = "Emirates Id Already Exists!!";
                    return base.Json(data, JsonRequestBehavior.AllowGet);
                }
                return base.Json(data, JsonRequestBehavior.AllowGet);
            }
            if ((from n in this.db.Sponsor
                 where n.EmiratesId.ToLower().Trim() == LabourId.ToLower().Trim()
                 select n).ToList<Sponsor>().Count > 0)
            {
                data = "Emirates Id Already Exists!!";
                return base.Json(data, JsonRequestBehavior.AllowGet);
            }
            return base.Json(data, JsonRequestBehavior.AllowGet);
        }

        public ActionResult SignInforSponsor(string EmailID, string Password, string RememberMe)
        {
            try
            {
                Sponsor objLogin = new Sponsor
                {
                    EmailID = EmailID.ToString(),
                    Password = Password.ToString()
                };
                if (RememberMe == "true")
                {
                    base.Response.Cookies["SUserName"].Value = EmailID.ToString();
                    base.Response.Cookies["SPassword"].Value = Password.ToString();
                    base.Response.Cookies["SUserName"].Expires = DateTime.Now.AddDays(15.0);
                    base.Response.Cookies["SPassword"].Expires = DateTime.Now.AddDays(15.0);
                }
                else
                {
                    base.Response.Cookies["SUserName"].Expires = DateTime.Now.AddDays(-1.0);
                    base.Response.Cookies["SPassword"].Expires = DateTime.Now.AddDays(-1.0);
                }
                if ((from n in this.db.Sponsor
                     where n.EmailID == objLogin.EmailID || n.EmiratesId==objLogin.EmailID 
                     select n).Count<Sponsor>() > 0)
                {
                    Sponsor sponsor = this.db.Sponsor.SingleOrDefault<Sponsor>(n => ((n.EmailID == objLogin.EmailID)||(n.EmiratesId==objLogin.EmailID ) )&& (n.Password == objLogin.Password));
                    if (sponsor != null)
                    {
                        if (sponsor.Status)
                        {
                            base.Session["FUSERNAME"] = sponsor.Name.ToString();
                            base.Session["SPONSORID"] = sponsor.UserID.ToString();
                            base.Session["UserType"] = "Sponsor";
                            FormsAuthentication.SetAuthCookie(EmailID, true);
                            return base.Json("1", JsonRequestBehavior.AllowGet);
                        }
                        return base.Json("4", JsonRequestBehavior.AllowGet);
                    }
                    return base.Json("2", JsonRequestBehavior.AllowGet);
                }
                return base.Json("3", JsonRequestBehavior.AllowGet);
            }
            catch
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult SponsorDetails(int? page)
        {
            List<Sponsor> source = new List<Sponsor>();
            ((dynamic)base.ViewBag).main = 1;
            int count = 0;
            if (page.HasValue)
            {
                int? nullable2 = page - 1;
                count = nullable2.Value * pagesize;
                base.Session["Cpage"] = page;
            }
            if (!page.HasValue)
            {
                ((dynamic)base.ViewBag).CurrentPage = 1;
            }
            else
            {
                ((dynamic)base.ViewBag).CurrentPage = page;
            }
            source = (from n in this.db.Sponsor
                      where n.IsDisplayNameAccepted && n.Status
                      select n).ToList<Sponsor>();
            if ((source.Count<Sponsor>() % pagesize) == 0)
            {
                ((dynamic)base.ViewBag).TotalPages = source.Count<Sponsor>() / pagesize;
            }
            else
            {
                ((dynamic)base.ViewBag).TotalPages = (source.Count<Sponsor>() / pagesize) + 1;
            }
            ((dynamic)base.ViewBag).Sponsor = source.Skip<Sponsor>(count).Take<Sponsor>(pagesize).ToList<Sponsor>();
            base.TempData["currentgetid"] = "idSponsorDetails";
            return base.View();
        }

        public ActionResult SponsorRegister()
        {
            OrganizationSubAdminController objMail = new OrganizationSubAdminController();
            ((dynamic)base.ViewBag).GetOrganizationNamelist = objMail.GetOrganizationNamelist();
            ViewBag.main = 1;
            Sponsor model = new Sponsor();
            CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
            if (currentCulture.Name == "en-IN")
            {
                model.CountryCode = "91";
            }   
            ((dynamic)base.ViewBag).sex = this.BindsexType();
            return base.View(model);
        }

        [HttpGet]
        public JsonResult OrgNameAutoComplete(string term)
        {
            try
            {
                var OrgNameList = (from m in this.db.Organisation where m.OrganisationName.StartsWith(term) select m.OrganisationName).Take(10);
                return Json(OrgNameList, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                List<string> stateNameList1 = new List<string>();
                return Json(stateNameList1, JsonRequestBehavior.AllowGet);

            }

        }

        [HttpPost]
        public ActionResult SponsorRegister(Sponsor objSponsor, IEnumerable<HttpPostedFileBase> UploadImage)
        {
            bool status1 = false;
            ((dynamic)base.ViewBag).sex = this.BindsexType();
            OrganizationSubAdminController objMail = new OrganizationSubAdminController();
            // ((dynamic)base.ViewBag).GetOrganizationNamelist = objMail.GetOrganizationNamelist();
            SmartLabourEntities entities = new SmartLabourEntities();

            int OrgId = 0;
            if (objSponsor.OrgName == string.Empty || objSponsor.OrgName==null)
            {
                OrgId = 1;
                objSponsor.OrgName=(from n in entities.Organisation where n.OrgId==OrgId select n.OrganisationName).SingleOrDefault();
                status1 = true;
            }
            else
            {
                OrgId = (from n in entities.Organisation where n.OrganisationName == objSponsor.OrgName && n.IsActive == true select n.OrgId).SingleOrDefault();
            }
            
            if (OrgId == 0)
            {
                return this.View(objSponsor);
            }           
            if (!base.ModelState.IsValid)
            {
                return base.View(objSponsor);
            }
            if (UploadImage != null)
            {
                foreach (HttpPostedFileBase base2 in UploadImage)
                {
                    if (base2 != null)
                    {
                        string fileName = Path.GetFileName(base2.FileName);
                        string str2 = "";
                        string str3 = "";
                        string str4 = Path.GetExtension(fileName.ToString()).ToLower();
                        string[] strArray = new string[] { ".png", ".jpg", ".gif", ".jpeg" };
                        for (int i = 0; i < strArray.Length; i++)
                        {
                            if (str4 == strArray[i])
                            {
                                str2 = strArray[i].ToString();
                            }
                        }
                        string str5 = DateTime.Now.ToString("ddMMyyhhmmss");
                        fileName = fileName.Replace(" ", "");
                        string[] strArray2 = fileName.ToString().Split(new char[] { '.' });
                        if (fileName.ToString().Length > 30)
                        {
                            str3 = strArray2[0].ToString().Substring(0, 30) + str5 + str2.ToString();
                        }
                        else
                        {
                            str3 = strArray2[0].ToString() + str5 + str2.ToString();
                        }
                        string filename = Path.Combine(base.Server.MapPath("~/Content/Front/Images/sponsorImage/"), str3);
                        base2.SaveAs(filename);
                        objSponsor.sponsorImage = str3;
                    }
                }
            }
            else
            {
                objSponsor.sponsorImage = "";
            }
            int day = Convert.ToInt16(objSponsor.Day);
            int month = Convert.ToInt16(objSponsor.Month);
            int year = Convert.ToInt16(objSponsor.Year);

            objSponsor.OrgId = OrgId;
            objSponsor.DOB = new DateTime(year, month, day);
            objSponsor.Password = objSponsor.Password;
            objSponsor.Status = status1;
            objSponsor.CREATEDDATE = DateTime.Now;
            objSponsor.CreatedFrom = false;
            entities.Sponsor.Add(objSponsor);
            entities.SaveChanges();
            List<TBL_ADMINLOGIN_SMT> Oid = (from m in this.db.AdminLogin where m.OrgId == objSponsor.OrgId && m.STATUS==true select m).ToList<TBL_ADMINLOGIN_SMT>();
            foreach (TBL_ADMINLOGIN_SMT org in Oid)
            {//New Sponsor (SponsorID) has been added successfully in your organization !.
                objCommon.SendingMail(org.USEREMAIL, "Smart Labour - New Sponsor", "", "", org.USEREMAIL, "New Sponsor ( " + objSponsor.UserID + " ) has been added successfully in your organization !.");
            }
            objCommon.SendingMail(objSponsor.EmailID, "Welcome to Smart Labour", objSponsor.EmailID,"","", "Your account has been created successfully !.");
            base.TempData["Success"] = 1;
            Mailing objMailLogin = new Mailing();
            //new Thread(delegate
            //{
            //    objMailLogin.SendMail(objSponsor.Name.Trim(), objSponsor.EmailID.Trim(), objSponsor.Password);
            //}) { IsBackground = true }.Start();
            return this.Redirect("/Home/index");
        }
    }

    #endregion

    #region TermsandconditionController
    public class TermsandconditionController : Controller
    {
        // Fields
        private SmartLabourEntities dbEntites = new SmartLabourEntities();

        // Methods
        public ActionResult Termsandcondition()
        {
            base.TempData["currentgetid"] = "idterms1";
            List<TBL_TERMSANDCONDITION_SMT> list = new List<TBL_TERMSANDCONDITION_SMT>();
            list = (from n in this.dbEntites.Termsandcondition
                    where n.STATUS
                    orderby n.CREATEDDATE
                    select n).Take<TBL_TERMSANDCONDITION_SMT>(1).ToList<TBL_TERMSANDCONDITION_SMT>();
            ((dynamic)base.ViewBag).TermsandCondition = list;
            TBL_TERMSANDCONDITION_SMT model = new TBL_TERMSANDCONDITION_SMT();
            foreach (TBL_TERMSANDCONDITION_SMT tbl_termsandcondition_smt2 in list)
            {
                model.ShortDescription = tbl_termsandcondition_smt2.ShortDescription;
                model.FullDecription = tbl_termsandcondition_smt2.FullDecription;
            }
            return base.View(model);
        }
    }
    #endregion

    #region TestimonialController
    [AuthorizeUser]
    public class TestimonialController : BaseController
    {
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        // Methods
        public bool ConvertVideo(string inputpath, string outputpath, string type)
        {
            string arguments = "";
            if (type == "mp4")
            {
                arguments = " -i " + inputpath + " -b:v 64k -vf scale=-1:240 -acodec copy " + outputpath;
            }
            else
            {
                arguments = " -i " + inputpath + " -b 1500k -vcodec libvpx -acodec libvorbis -ab 160000 -f webm -g 30 " + outputpath;
            }
            ProcessStartInfo startInfo = new ProcessStartInfo(ConfigurationManager.AppSettings["path"].ToString(), arguments)
            {
                UseShellExecute = false,
                CreateNoWindow = true
            };
            try
            {
                Process process = Process.Start(startInfo);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        [HttpGet]
        public ActionResult Testimonial_Add()
        {
            base.TempData["currentgetidss"] = "Article’sTestimonials";
            return base.View();
        }

        [HttpPost]
        public ActionResult Testimonial_Add(TBL_TESTIMONIAL_SMT objTestimonial, HttpPostedFileBase image)
        {
            try
            {
                string[] strArray;
                if (base.ModelState.IsValid)
                {
                    if ((objTestimonial.videoFile != string.Empty) && (objTestimonial.videoFile != null))
                    {
                        strArray = objTestimonial.videoFile.Split(new char[] { '|' });
                        if (strArray.Length == 2)
                        {
                            objTestimonial.Mp4filename = strArray[0];
                            objTestimonial.Webmfilename = strArray[1];
                        }
                    }
                    if ((from n in this.SmtDbEntites.Testimonial
                         where n.Title.ToLower().Trim() == objTestimonial.Title.ToLower().Trim()
                         select n).ToList<TBL_TESTIMONIAL_SMT>().Count > 0)
                    {
                        ((dynamic)base.ViewBag).messagealert = "Testimonial Title Already Exists";
                        return base.View(objTestimonial);
                    }
                    if (image != null)
                    {
                        string fileName = Path.GetFileName(image.FileName);
                        string str2 = "";
                        string str3 = "";
                        string str4 = Path.GetExtension(fileName.ToString()).ToLower();
                        string[] strArray2 = new string[] { ".png", ".jpg", ".gif" };
                        for (int i = 0; i < strArray2.Length; i++)
                        {
                            if (str4 == strArray2[i])
                            {
                                str2 = strArray2[i].ToString();
                            }
                        }
                        string str5 = DateTime.Now.ToString("ddMMyyhhmmss");
                        string[] strArray3 = fileName.ToString().Split(new char[] { '.' });
                        if (strArray3[0].ToString().Length > 30)
                        {
                            str3 = strArray3[0].ToString().Substring(0, 0x1d) + str5 + str2.ToString();
                        }
                        else
                        {
                            str3 = strArray3[0].ToString() + str5 + str2.ToString();
                        }
                        string filename = Path.Combine(base.Server.MapPath("~/Content/Admin/images/Testimonial/"), str3);
                        image.SaveAs(filename);
                        objTestimonial.Image = str3;
                    }
                    objTestimonial.videoFile = objTestimonial.videoFile;
                    objTestimonial.PostedDate = DateTime.Now;
                    this.SmtDbEntites.Testimonial.Add(objTestimonial);
                    this.SmtDbEntites.SaveChanges();
                    base.TempData["messagealert"] = "Testimonial Added Successfully";
                    return base.RedirectToAction("Testimonial_List");
                }
                if ((objTestimonial.videoFile != string.Empty) && (objTestimonial.videoFile != null))
                {
                    strArray = objTestimonial.videoFile.Split(new char[] { '|' });
                    if (strArray.Length == 2)
                    {
                        objTestimonial.Mp4filename = strArray[0];
                        objTestimonial.Webmfilename = strArray[1];
                    }
                }
                return base.View(objTestimonial);
            }
            catch (DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                return base.View();
            }
        }

        public string Testimonial_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                TBL_TESTIMONIAL_SMT entity = this.SmtDbEntites.Testimonial.SingleOrDefault<TBL_TESTIMONIAL_SMT>(n => n.TestimonialId == bannerid);
                this.SmtDbEntites.Testimonial.Remove(entity);
                this.SmtDbEntites.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        public ActionResult Testimonial_Delete(int id)
        {
            TBL_TESTIMONIAL_SMT entity = this.SmtDbEntites.Testimonial.SingleOrDefault<TBL_TESTIMONIAL_SMT>(n => n.TestimonialId == id);
            this.SmtDbEntites.Testimonial.Remove(entity);
            this.SmtDbEntites.SaveChanges();
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return base.RedirectToAction("Testimonial_List");
        }

        [HttpGet]
        public ActionResult Testimonial_Edit(int id)
        {
            base.TempData["currentgetidss"] = "Article’sTestimonials";
            TBL_TESTIMONIAL_SMT model = this.SmtDbEntites.Testimonial.SingleOrDefault<TBL_TESTIMONIAL_SMT>(n => n.TestimonialId == id);
            return base.View(model);
        }

        [HttpPost]
        public ActionResult Testimonial_Edit(int id, TBL_TESTIMONIAL_SMT objtestimonial, HttpPostedFileBase BannerImage1)
        {
            try
            {
                string[] strArray;
                TBL_TESTIMONIAL_SMT tbl_testimonial_smt = this.SmtDbEntites.Testimonial.SingleOrDefault<TBL_TESTIMONIAL_SMT>(n => n.TestimonialId == id);
                base.TempData["messagealert"] = "";
                if (base.ModelState.IsValid)
                {
                    if ((objtestimonial.videoFile != string.Empty) && (objtestimonial.videoFile != null))
                    {
                        strArray = objtestimonial.videoFile.Split(new char[] { '|' });
                        if (strArray.Length == 2)
                        {
                            tbl_testimonial_smt.Mp4filename = strArray[0];
                            tbl_testimonial_smt.Webmfilename = strArray[1];
                        }
                    }
                    if (BannerImage1 != null)
                    {
                        string fileName = Path.GetFileName(BannerImage1.FileName);
                        string str2 = "";
                        string str3 = "";
                        string str4 = Path.GetExtension(fileName.ToString()).ToLower();
                        string[] strArray2 = new string[] { ".png", ".jpg", ".gif" };
                        for (int i = 0; i < strArray2.Length; i++)
                        {
                            if (str4 == strArray2[i])
                            {
                                str2 = strArray2[i].ToString();
                            }
                        }
                        string str5 = DateTime.Now.ToString("ddMMyyhhmmss");
                        string[] strArray3 = fileName.ToString().Split(new char[] { '.' });
                        if (strArray3[0].ToString().Length > 30)
                        {
                            str3 = strArray3[0].ToString().Substring(0, 0x1d) + str5 + str2.ToString();
                        }
                        else
                        {
                            str3 = strArray3[0].ToString() + str5 + str2.ToString();
                        }
                        string filename = Path.Combine(base.Server.MapPath("~/Content/Admin/images/Testimonial/"), str3);
                        BannerImage1.SaveAs(filename);
                        tbl_testimonial_smt.Image = str3;
                    }
                    tbl_testimonial_smt.Title = objtestimonial.Title;
                    tbl_testimonial_smt.Name = objtestimonial.Name;
                    tbl_testimonial_smt.Designation = objtestimonial.Designation;
                    tbl_testimonial_smt.Description = objtestimonial.Description;
                    tbl_testimonial_smt.videoFile = objtestimonial.videoFile;
                    tbl_testimonial_smt.Status = objtestimonial.Status;
                    tbl_testimonial_smt.PostedDate = DateTime.Now;
                    this.SmtDbEntites.SaveChanges();
                    base.TempData["messagealert"] = "Record Updated Successfully";
                    return base.RedirectToAction("Testimonial_list");
                }
                if ((objtestimonial.videoFile != string.Empty) && (objtestimonial.videoFile != null))
                {
                    strArray = objtestimonial.videoFile.Split(new char[] { '|' });
                    if (strArray.Length == 2)
                    {
                        objtestimonial.Mp4filename = strArray[0];
                        objtestimonial.Webmfilename = strArray[1];
                    }
                }
                return base.View(objtestimonial);
            }
            catch
            {
                return this.Redirect("/Admin/index");
            }
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Testimonial_List(int? id, string search)
        {
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "Article’sTestimonials";
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<TBL_TESTIMONIAL_SMT> source = new List<TBL_TESTIMONIAL_SMT>();
            if ((search != null) && (search != string.Empty))
            {
                var query = (from n in this.SmtDbEntites.Testimonial
                             select n).ToList();
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(query, "active", searchText);
                        break;
                    case "51":
                        source = Startswith(query, "inactive", searchText);
                        break;

                }
            }
            else
            {
                source = this.SmtDbEntites.Testimonial.ToList<TBL_TESTIMONIAL_SMT>();
            }
            int num = source.Count<TBL_TESTIMONIAL_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.TestimonialId descending
                              select n).Skip<TBL_TESTIMONIAL_SMT>(count).Take<TBL_TESTIMONIAL_SMT>(10).ToList<TBL_TESTIMONIAL_SMT>());
        }


        #region Search Options

        public List<TBL_TESTIMONIAL_SMT> Startswith(List<TBL_TESTIMONIAL_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {

                query = query.Where(n => n.Designation.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "active")
            {
                query = query.Where(n => n.Status == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.Status == false).ToList();
            }

            List<TBL_TESTIMONIAL_SMT> source = query.Select(x => x).ToList<TBL_TESTIMONIAL_SMT>();
            return source;
        }

        public List<TBL_TESTIMONIAL_SMT> EqualTo(List<TBL_TESTIMONIAL_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "2")
            {

                query = query.Where(n => n.Designation.ToLower() == searchText).ToList();

            }
            else if (SearchBy == "3")
            {

                //   query = query.Where(n => n.Organizations.OrganisationName.ToLower().StartsWith(searchText)).ToList();

            }


            List<TBL_TESTIMONIAL_SMT> source = query.Select(x => x).ToList<TBL_TESTIMONIAL_SMT>();
            return source;
        }

        public List<TBL_TESTIMONIAL_SMT> Contains(List<TBL_TESTIMONIAL_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {

                query = query.Where(n => n.Designation.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {

                //   query = query.Where(n => n.Organizations.OrganisationName.ToLower().StartsWith(searchText)).ToList();

            }


            List<TBL_TESTIMONIAL_SMT> source = query.Select(x => x).ToList<TBL_TESTIMONIAL_SMT>();
            return source;
        }

        #endregion

        public string Testimonial_SaveHomecontent(string id)
        {
            List<TBL_TESTIMONIAL_SMT> list = this.SmtDbEntites.Testimonial.ToList<TBL_TESTIMONIAL_SMT>();
            for (int i = 0; i < list.Count; i++)
            {
                int ids = Convert.ToInt32(list[i].TestimonialId);
                this.SmtDbEntites.Testimonial.SingleOrDefault<TBL_TESTIMONIAL_SMT>(n => (n.TestimonialId == ids)).Homecontent = false;
                this.SmtDbEntites.SaveChanges();
            }
            string[] strArray = id.Split(new char[] { ',' });
            for (int j = 0; j < (strArray.Length - 1); j++)
            {
                int bannerid = Convert.ToInt32(strArray[j].ToString());
                this.SmtDbEntites.Testimonial.SingleOrDefault<TBL_TESTIMONIAL_SMT>(n => (n.TestimonialId == bannerid)).Homecontent = true;
                this.SmtDbEntites.SaveChanges();
            }
            return "success";
        }

        public ActionResult Testimonial_View(int id)
        {
            base.TempData["currentgetidss"] = "Article’sTestimonials";
            TBL_TESTIMONIAL_SMT model = this.SmtDbEntites.Testimonial.SingleOrDefault<TBL_TESTIMONIAL_SMT>(n => n.TestimonialId == id);
            return base.View(model);
        }

        public string UpdateStatus(string status, int bannerid)
        {
            TBL_TESTIMONIAL_SMT tbl_testimonial_smt = this.SmtDbEntites.Testimonial.SingleOrDefault<TBL_TESTIMONIAL_SMT>(n => n.TestimonialId == bannerid);
            if (status == "true")
            {
                tbl_testimonial_smt.Status = false;
            }
            else
            {
                tbl_testimonial_smt.Status = true;
            }
            this.SmtDbEntites.SaveChanges();
            return "sucess";
        }
    }
    #endregion

    #region TestimonialFrontController

    public class TestimonialFrontController : Controller
    {
        // Fields
        private static int pagesize = 9;
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        // Methods
        public JsonResult checkuserstatus()
        {
            if (base.Session["LABOURID"] != null)
            {
                return base.Json("Labour", JsonRequestBehavior.AllowGet);
            }
            if (base.Session["SPONSORID"] != null)
            {
                return base.Json("sponsor", JsonRequestBehavior.AllowGet);
            }
            return base.Json("Failure", JsonRequestBehavior.AllowGet);
        }

        public ActionResult MobileTestimonials(int? page)
        {
            List<TBL_TESTIMONIAL_SMT> source = new List<TBL_TESTIMONIAL_SMT>();
            int count = 0;
            if (page.HasValue)
            {
                int? nullable2 = page - 1;
                count = nullable2.Value * pagesize;
                base.Session["Cpage"] = page;
            }
            if (!page.HasValue)
            {
                ((dynamic)base.ViewBag).CurrentPage = 1;
            }
            else
            {
                ((dynamic)base.ViewBag).CurrentPage = page;
            }
            source = (from n in this.SmtDbEntites.Testimonial
                      where n.Status == true
                      select n).ToList<TBL_TESTIMONIAL_SMT>();
            if ((source.Count<TBL_TESTIMONIAL_SMT>() % pagesize) == 0)
            {
                ((dynamic)base.ViewBag).TotalPages = source.Count<TBL_TESTIMONIAL_SMT>() / pagesize;
            }
            else
            {
                ((dynamic)base.ViewBag).TotalPages = (source.Count<TBL_TESTIMONIAL_SMT>() / pagesize) + 1;
            }
            ((dynamic)base.ViewBag).Testimonial = source.Skip<TBL_TESTIMONIAL_SMT>(count).Take<TBL_TESTIMONIAL_SMT>(pagesize).ToList<TBL_TESTIMONIAL_SMT>();
            base.TempData["currentgetid"] = "idtestimonial";
            ((dynamic)base.ViewBag).MobileDisplay = "1";
            return base.View();
        }

        public ActionResult TestimonialDetail(int id)
        {
            TBL_TESTIMONIAL_SMT model = this.SmtDbEntites.Testimonial.SingleOrDefault<TBL_TESTIMONIAL_SMT>(n => n.TestimonialId == id);
            return base.View(model);
        }

        public ActionResult Testimonials(int? id)
        {
            List<TBL_TESTIMONIAL_SMT> source = new List<TBL_TESTIMONIAL_SMT>();
            int count = 0;
            if (id.HasValue)
            {
                int? nullable2 = id - 1;
                count = nullable2.Value * pagesize;
                base.Session["Cpage"] = id;
            }
            if (!id.HasValue)
            {
                ((dynamic)base.ViewBag).CurrentPage = 1;
            }
            else
            {
                ((dynamic)base.ViewBag).CurrentPage = id;
            }
            source = (from n in this.SmtDbEntites.Testimonial
                      where n.Status == true
                      select n).ToList<TBL_TESTIMONIAL_SMT>();
            if ((source.Count<TBL_TESTIMONIAL_SMT>() % pagesize) == 0)
            {
                ((dynamic)base.ViewBag).TotalPages = source.Count<TBL_TESTIMONIAL_SMT>() / pagesize;
            }
            else
            {
                ((dynamic)base.ViewBag).TotalPages = (source.Count<TBL_TESTIMONIAL_SMT>() / pagesize) + 1;
            }
            ((dynamic)base.ViewBag).Testimonial = source.Skip<TBL_TESTIMONIAL_SMT>(count).Take<TBL_TESTIMONIAL_SMT>(pagesize).ToList<TBL_TESTIMONIAL_SMT>();
            base.TempData["currentgetid"] = "idtestimonial";
            return base.View();
        }
    }
    #endregion

    #region VoucherController
    [AuthorizeUser]
    public class VoucherController : BaseController
    {
        // Fields
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();
        private static string connString = ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ToString();
        private Database objTransDB = new Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase(connString);
        private CommonClass objCommon = new CommonClass();
        ServicePlanController objService = new ServicePlanController();

        /// <summary>
        /// This Functon bind language list
        /// </summary>
        /// <param name="selectedValues"></param>
        /// <returns>LanguageList,selectedValues</returns>
        public MultiSelectList GetOrganizationList(string[] selectedValues)
        {
            try
            {
                List<string> OrganizationList = new List<string>();                
                OrganizationList=(from n in this.SmtDbEntites.Organisation where n.IsActive==true select n.OrganisationName).ToList();
                return new MultiSelectList(OrganizationList, selectedValues);
            }
            catch (Exception)
            {
                List<string> OrganizationList = new List<string>();
                return new MultiSelectList(OrganizationList, selectedValues);
            }
        }

        // Methods
        public ActionResult AssignVoucher()
        {
            ((dynamic)base.ViewBag).OrganizationList = this.GetOrganizationList(null);
            return base.View();
        }

        public ActionResult Bindserviceplan(int providerid)
        {
            return base.Json(this.getServiceplan(providerid), JsonRequestBehavior.AllowGet);
        }

        public SelectList getServiceplan(int providerid)
        {
            return new SelectList(from m in
                                      (from m in this.SmtDbEntites.ServicePlan
                                       where (m.STATUS == true) && (m.SERVICEPROVIDERID == providerid)
                                       select m).AsEnumerable<TBL_SERVICEPLAN_SMT>()
                                  select new SelectListItem { Text = m.PLANNAEME, Value = m.SERVICEPLANID.ToString() }, "Value", "Text");
        }

        public SelectList getServicePlan(int id)
        {
            return new SelectList(from m in
                                      (from m in this.SmtDbEntites.ServicePlan
                                       where (m.STATUS == true) && (m.SERVICEPROVIDERID == id)
                                       select m).AsEnumerable<TBL_SERVICEPLAN_SMT>()
                                  orderby m.CREATEDDATE
                                  select new SelectListItem { Text = m.PLANNAEME, Value = m.SERVICEPLANID.ToString() }, "Value", "Text");
        }

        public SelectList getseviceprovider(bool IsTelecom)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            if (UserId == 1)
            {
                return new SelectList(from m in
                                          (from m in this.SmtDbEntites.ServiceProvider
                                           where m.STATUS && m.IsTelcomOperator == IsTelecom 
                                           select m).AsEnumerable<TBL_SERVICEPROVIDER_SMT>()
                                      select new SelectListItem { Text = m.SERVICEPROVIDER, Value = m.SERVICEPROVIDERID.ToString() }, "Value", "Text");
            }
            else
            {
                int OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
                return new SelectList(from m in
                                          (from m in this.SmtDbEntites.ServiceProvider
                                           where m.STATUS && m.OrgId == OrgId && m.IsTelcomOperator == IsTelecom
                                           select m).AsEnumerable<TBL_SERVICEPROVIDER_SMT>()
                                      select new SelectListItem { Text = m.SERVICEPROVIDER, Value = m.SERVICEPROVIDERID.ToString() }, "Value", "Text");
            }
        }

        public string UpdateStatus(string status, int bannerid)
        {
            TBL_VOUCHER_SMT tbl_voucher_smt = this.SmtDbEntites.Voucher.SingleOrDefault<TBL_VOUCHER_SMT>(n => n.VOUCHERID == bannerid);
            if (status == "true")
            {
                tbl_voucher_smt.STATUS = false;
            }
            else
            {
                tbl_voucher_smt.STATUS = true;
            }
            this.SmtDbEntites.SaveChanges();
            return "sucess";
        }

        [HttpGet, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Voucher_Add()
        {
            TBL_VOUCHER_SMT ObjVoucher = new TBL_VOUCHER_SMT();
            base.TempData["currentgetidss"] = "Service";
            ((dynamic)base.ViewBag).serviceprovider = this.getseviceprovider(true);
            ((dynamic)base.ViewBag).Serviceplan = this.getServicePlan(0);
            ObjVoucher.IsTelcomOperator = true;
            ObjVoucher.VoucherImageStatus = false;
            ObjVoucher.STATUS = true;
            return base.View(ObjVoucher);
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpPost]
        public ActionResult Voucher_Add(TBL_VOUCHER_SMT ObjVoucher, HttpPostedFileBase UploadImage)
        {
            ((dynamic)base.ViewBag).serviceprovider = this.getseviceprovider(ObjVoucher.IsTelcomOperator);
            ((dynamic)base.ViewBag).Serviceplan = this.getServicePlan(0);
            if (base.ModelState.IsValid)
            {
                if (ObjVoucher.VoucherImageStatus == true && UploadImage != null && UploadImage.ContentLength > 0)
                {                   
                    string FileName = Path.GetFileName(UploadImage.FileName.ToString());
                    bool exists = System.IO.Directory.Exists(Server.MapPath("/Uplodify/VoucherImages"));
                    if (!exists)
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("/Uplodify/VoucherImages"));
                    }
                    string savedFileName = System.Web.HttpContext.Current.Server.MapPath("/Uplodify/VoucherImages/Img_" + ObjVoucher.CODES + "_" + FileName);
                    UploadImage.SaveAs(savedFileName);
                    ObjVoucher.VoucherImage = "Img_" + ObjVoucher.CODES + "_" + FileName;
                }
                else
                {
                    ObjVoucher.VoucherImage = null;
                }

                if ((from n in this.SmtDbEntites.Voucher
                     where (n.CODES == ObjVoucher.CODES) && (n.SERVICEPLANID == ObjVoucher.SERVICEPLANID)
                     select n).ToList<TBL_VOUCHER_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Voucher code Already Exists";
                    return base.View(ObjVoucher);
                }
                ObjVoucher.CREATEDATE = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString()));
                ObjVoucher.CREATEDBY = base.Session["USERNAME"].ToString();
               // ObjVoucher.IsVoucherAssigned = false;
                this.SmtDbEntites.Voucher.Add(ObjVoucher);
                this.SmtDbEntites.SaveChanges();
                base.TempData["messagealert1"] = "Voucher Added Successfully";
                return base.RedirectToAction("VoucherRecords_List");
            }
            return base.View(ObjVoucher);
        }

        public string Voucher_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                TBL_VOUCHER_SMT entity = this.SmtDbEntites.Voucher.SingleOrDefault<TBL_VOUCHER_SMT>(n => n.VOUCHERID == bannerid);               
                this.SmtDbEntites.Voucher.Remove(entity);
                this.SmtDbEntites.SaveChanges();
                if (entity.VoucherImage != null)
                {
                    FileDelete(entity.VoucherImage);
                }
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        public ActionResult Voucher_Delete(int id)
        {
            TBL_VOUCHER_SMT entity = this.SmtDbEntites.Voucher.SingleOrDefault<TBL_VOUCHER_SMT>(n => n.VOUCHERID == id);
            this.SmtDbEntites.Voucher.Remove(entity);
            this.SmtDbEntites.SaveChanges();
            if (entity.VoucherImage !=null)
            {
                FileDelete(entity.VoucherImage);
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return base.RedirectToAction("Voucher_List");
        }

        public void FileDelete(string FileName)
        {
            if (FileName==string.Empty || FileName==null)
            {
            }
            else
            {
                string FileNAme = System.Web.HttpContext.Current.Server.MapPath("/Uplodify/VoucherImages/" + FileName);
                FileInfo file = new FileInfo(FileNAme);
                file.Delete();  
            }
                       
        }

        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpGet]
        public ActionResult Voucher_Edit(int id)
        {
            base.TempData["currentgetidss"] = "Service";
            
            TBL_VOUCHER_SMT model = this.SmtDbEntites.Voucher.SingleOrDefault<TBL_VOUCHER_SMT>(n => n.VOUCHERID == id);
            model.IsTelcomOperator = (from n in this.SmtDbEntites.ServiceProvider where n.SERVICEPROVIDERID == model.SERVICEPROVIDERID select n.IsTelcomOperator).SingleOrDefault();
            int OrgId = (from n in this.SmtDbEntites.ServiceProvider where n.SERVICEPROVIDERID == model.SERVICEPROVIDERID select n.OrgId).SingleOrDefault();
            model.OrgName = (from n in this.SmtDbEntites.Organisation where n.OrgId == OrgId select n.OrganisationName).SingleOrDefault();

            if(model.VoucherImage!=null)
            {
                model.VoucherImageStatus = true;
            }
            ((dynamic)base.ViewBag).serviceprovider = objService.getServiceProvider1(model.SERVICEPROVIDERID);
            ((dynamic)base.ViewBag).Serviceplan = this.getServicePlan(model.SERVICEPROVIDERID);
            return base.View(model);
        }

        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult Voucher_Edit(int id, TBL_VOUCHER_SMT objVoucher, HttpPostedFileBase UploadImage)
        {
            string OldImage = string.Empty;
            ((dynamic)base.ViewBag).serviceprovider = objService.getServiceProvider1(objVoucher.SERVICEPROVIDERID);
            ((dynamic)base.ViewBag).Serviceplan = this.getServicePlan(objVoucher.SERVICEPROVIDERID);
            if (base.ModelState.IsValid)
            {
                TBL_VOUCHER_SMT tbl_voucher_smt = this.SmtDbEntites.Voucher.SingleOrDefault<TBL_VOUCHER_SMT>(n => n.VOUCHERID == id);
                if (objVoucher.VoucherImageStatus == true &&  UploadImage != null && UploadImage.ContentLength > 0)
                {
                    string FileName = Path.GetFileName(UploadImage.FileName.ToString());
                    bool exists = System.IO.Directory.Exists(Server.MapPath("/Uplodify/VoucherImages"));
                    if (!exists)
                    {
                        System.IO.Directory.CreateDirectory(Server.MapPath("/Uplodify/VoucherImages"));
                    }
                    string savedFileName = System.Web.HttpContext.Current.Server.MapPath("/Uplodify/VoucherImages/Img_" + objVoucher.CODES + "_" + FileName);
                    UploadImage.SaveAs(savedFileName);
                    OldImage = tbl_voucher_smt.VoucherImage;         
                    tbl_voucher_smt.VoucherImage = "Img_" + objVoucher.CODES + "_" + FileName;
                          

                }
                if ((from n in this.SmtDbEntites.Voucher
                     where ((n.VOUCHERID != id) && (n.CODES == objVoucher.CODES)) && (n.SERVICEPLANID == objVoucher.SERVICEPLANID)
                     select n).ToList<TBL_VOUCHER_SMT>().Count > 0)
                        {
                            ((dynamic)base.ViewBag).messagealert = "Voucher code Already Exists";
                            return base.View(objVoucher);
                        }
                tbl_voucher_smt.SERVICEPLANID = objVoucher.SERVICEPLANID;
                tbl_voucher_smt.CODES = objVoucher.CODES;
                tbl_voucher_smt.SERVICEPROVIDERID = objVoucher.SERVICEPROVIDERID;
                tbl_voucher_smt.STATUS = objVoucher.STATUS;
                tbl_voucher_smt.MODIFIEDBY = base.Session["USERNAME"].ToString();
                tbl_voucher_smt.MODIFIEDDATE = new DateTime?(DateTime.Now);
                this.SmtDbEntites.SaveChanges();
                FileDelete(OldImage); 
                base.TempData["messagealert1"] = "Voucher Updated Successfully";
                return base.RedirectToAction("VoucherRecords_List");
            }
            return base.View(objVoucher);
        }

        public ActionResult Voucher_List(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();

            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "Service";
            if ((base.TempData["messagealert1"] != null) && (base.TempData["messagealert1"].ToString() != string.Empty))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert1"];
            }
            List<TBL_VOUCHER_SMT> source = new List<TBL_VOUCHER_SMT>();
            SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ConnectionString);
            connection.Open();
            string cmdText = "Pro_GetVoucherCount";
            SqlCommand command = new SqlCommand(cmdText, connection);
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.AddWithValue("@UserId", UserId);
            using (SqlDataReader reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    TBL_VOUCHER_SMT item = new TBL_VOUCHER_SMT();
                    if (reader["SERVICEPROVIDER"] != DBNull.Value)
                    {
                        item.ProviderName = reader["SERVICEPROVIDER"].ToString();
                    }
                    if (reader["SERVICETYPENAME"] != DBNull.Value)
                    {
                        item.servicetype = reader["SERVICETYPENAME"].ToString();
                    }
                    if (reader["PLANNAEME"] != DBNull.Value)
                    {
                        item.ServicePlanName = reader["PLANNAEME"].ToString();
                    }
                    if (reader["Tot_Stock"] != DBNull.Value)
                    {
                        item.Totalvouchercount = reader["Tot_Stock"].ToString();
                    }
                    if (reader["Used_stock"] != DBNull.Value)
                    {
                        item.Voucherusedcount = reader["Used_stock"].ToString();
                    }
                    if (reader["Avail_stock"] != DBNull.Value)
                    {
                        item.Voucheravilablecount = reader["Avail_stock"].ToString();
                    }
                    if (reader["ServiceProviderId"] != DBNull.Value)
                    {
                        item.SERVICEPROVIDERID = Convert.ToInt32(reader["ServiceProviderId"].ToString());
                    }

                    source.Add(item);
                }
            }
            connection.Close();
            connection.Dispose();
            if ((search != null) && (search != string.Empty))
            {             
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(source, searchBy, searchText);
                         break;

                    case "2":
                         source = EqualTo(source, searchBy, searchText);                       
                        break;

                    case "3":
                        source = Contains(source, searchBy, searchText);                       
                        break;
                   //************************
                    case "49":
                        source = EqualTo(source, "Greater", searchText);
                        break;

                    case "50":
                        source = EqualTo(source, "Less", searchText);
                        break;

                    case "51":
                        source = EqualTo(source, "Equal", searchText);
                        break;
                  //**************************
                    case "52":
                        source = Startswith(source, "Greater", searchText);
                        break;

                    case "53":
                        source = Startswith(source, "Less", searchText);
                        break;

                    case "54":
                        source = Startswith(source, "Equal", searchText);
                        break;
                   //*******************************
                    case "55":
                        source = Contains(source, "Greater", searchText);
                        break;

                    case "56":
                        source = Contains(source, "Less", searchText);
                        break;

                    case "57":
                        source = Contains(source, "Equal", searchText);
                        break; 

                }
            }
        
            int num = source.Count<TBL_VOUCHER_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CREATEDATE descending
                              select n).Skip<TBL_VOUCHER_SMT>(count).Take<TBL_VOUCHER_SMT>(10).ToList<TBL_VOUCHER_SMT>());
        }


        #region Search Options
        
        public List<TBL_VOUCHER_SMT> Startswith(List<TBL_VOUCHER_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n =>(n.ProviderName!=null&&n.ProviderName!=string.Empty) && n.ProviderName.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => (n.ServicePlanName != null && n.ServicePlanName != string.Empty) && n.ServicePlanName.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => (n.servicetype != null && n.servicetype != string.Empty) && n.servicetype.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.Totalvouchercount.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n =>  n.Voucherusedcount.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "Greater")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => Convert.ToInt32(n.Voucherusedcount) > Convert.ToInt32(searchText)).ToList();
                }
            }
            else if (SearchBy == "Less")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n =>Convert.ToInt32( n.Voucherusedcount) < Convert.ToInt32(searchText)).ToList();
                }
            }
            else if (SearchBy == "Equal")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => Convert.ToInt32(n.Voucherusedcount) == Convert.ToInt32(searchText)).ToList();
                }
            }  

            List<TBL_VOUCHER_SMT> source = query.Select(x => x).ToList<TBL_VOUCHER_SMT>();
            return source;
        }

        public List<TBL_VOUCHER_SMT> EqualTo(List<TBL_VOUCHER_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => (n.ProviderName != null && n.ProviderName != string.Empty) && n.ProviderName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => (n.ServicePlanName != null && n.ServicePlanName != string.Empty) && n.ServicePlanName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => (n.servicetype != null && n.servicetype != string.Empty) && n.servicetype.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.Totalvouchercount.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n =>  n.Voucherusedcount.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "Greater")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => Convert.ToInt32(n.Totalvouchercount) > Convert.ToInt32(searchText)).ToList();
                }
            }
            else if (SearchBy == "Less")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => Convert.ToInt32(n.Totalvouchercount) < Convert.ToInt32(searchText)).ToList();
                }
            }
            else if (SearchBy == "Equal")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => Convert.ToInt32(n.Totalvouchercount) == Convert.ToInt32(searchText)).ToList();
                }
            }  

            List<TBL_VOUCHER_SMT> source = query.Select(x => x).ToList<TBL_VOUCHER_SMT>();
            return source;
        }
        
        public List<TBL_VOUCHER_SMT> Contains(List<TBL_VOUCHER_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => (n.ProviderName != null && n.ProviderName != string.Empty) && n.ProviderName.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => (n.ServicePlanName != null && n.ServicePlanName != string.Empty) && n.ServicePlanName.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => (n.servicetype != null && n.servicetype != string.Empty) && n.servicetype.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.Totalvouchercount.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n =>  n.Voucherusedcount.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "Greater")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => Convert.ToInt32(n.Voucheravilablecount) > Convert.ToInt32(searchText)).ToList();
                }
            }
            else if (SearchBy == "Less")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => Convert.ToInt32(n.Voucheravilablecount) < Convert.ToInt32(searchText)).ToList();
                }
            }
            else if (SearchBy == "Equal")
            {
                if (objCommon.CheckIsNumeric(searchText))
                {
                    query = query.Where(n => Convert.ToInt32(n.Voucheravilablecount) == Convert.ToInt32(searchText)).ToList();
                }
            }

            List<TBL_VOUCHER_SMT> source = query.Select(x => x).ToList<TBL_VOUCHER_SMT>();
            return source;
        }

        #endregion




        public ActionResult VoucherCount_list()
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();

            base.TempData["currentgetidss"] = "Service";
            if ((base.TempData["messagealert1"] != null) && (base.TempData["messagealert1"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert1"];
            }
            List<VoucherCount> source = new List<VoucherCount>();
            SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ConnectionString);
            connection.Open();
            string cmdText = "Pro_VoucherCount";
            DataSet dataSet = objTransDB.ExecuteDataSet("Pro_VoucherCount",UserId);

            if (dataSet.Tables[0].Rows.Count > 0)
            {
                int i=0;
                foreach (DataRow dataRow in dataSet.Tables[0].Rows)
                    {
                        i = i+1;
                    VoucherCount item = new VoucherCount();
                    if (dataRow["SERVICEPROVIDER"] != DBNull.Value)
                    {
                        item.SERVICEPROVIDER = dataRow["SERVICEPROVIDER"].ToString();
                    }
                    if (dataRow["SERVICETYPENAME"] != DBNull.Value)
                    {
                        item.SERVICETYPENAME = dataRow["SERVICETYPENAME"].ToString();
                    }
                    if (dataRow["PointsLabourEarned"] != DBNull.Value)
                    {
                        item.PointsLabourEarned = dataRow["PointsLabourEarned"].ToString();
                    }
                    if (dataRow["PointsInVoucher"] != DBNull.Value)
                    {
                        item.PointsInVoucher = dataRow["PointsInVoucher"].ToString();
                    }
                    if (dataRow["PointsRequired"] != DBNull.Value)
                    {
                        item.PointsRequired = dataRow["PointsRequired"].ToString();
                    }
                    if (dataRow["Status"] != DBNull.Value)
                    {
                        item.Status = dataRow["Status"].ToString();
                    }
                    if (dataRow["OrganisationName"] != DBNull.Value)
                    {
                        item.OrgName = dataRow["OrganisationName"].ToString();
                    }
                    source.Add(item);
                }
                }
            return base.View(source);
            }
   

        public ActionResult Voucher_View(int id)
        {
            base.TempData["currentgetidss"] = "Service";
            TBL_VOUCHER_SMT voucher = this.SmtDbEntites.Voucher.SingleOrDefault<TBL_VOUCHER_SMT>(n => n.VOUCHERID == id);
            TBL_SERVICEPROVIDER_SMT tbl_serviceprovider_smt = this.SmtDbEntites.ServiceProvider.SingleOrDefault<TBL_SERVICEPROVIDER_SMT>(n => n.SERVICEPROVIDERID == voucher.SERVICEPROVIDERID);
            if (tbl_serviceprovider_smt != null)
            {
                voucher.ProviderName = tbl_serviceprovider_smt.SERVICEPROVIDER;
            }
            if(voucher.IsVoucherAssigned==true)
            {
                voucher.LabourId = (from n in this.SmtDbEntites.VoucherAssigned where n.VOUCHERID == id select n.LabourID).FirstOrDefault(); ;
            }
            return base.View(voucher);
        }

        public ActionResult VoucherRecords_List(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert1"] != null) && (base.TempData["messagealert1"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert1"];
            }
            base.TempData["currentgetidss"] = "Service";    
            List<TBL_VOUCHER_SMT> source = new List<TBL_VOUCHER_SMT>();
          
             if (UserId==1)
            {
                source = (from n in this.SmtDbEntites.Voucher.Include("serviceprovider")
                                  where n.serviceprovider.SERVICEPROVIDERID == n.SERVICEPROVIDERID orderby n.VOUCHERID descending
                                  select n ).ToList<TBL_VOUCHER_SMT>();
            }
            else
            {
                source = (from n in this.SmtDbEntites.Voucher.Include("serviceprovider")
                          join
                           m in this.SmtDbEntites.ServiceProvider on n.SERVICEPROVIDERID equals m.SERVICEPROVIDERID
                         orderby n.VOUCHERID descending                                                          
                         where n.serviceprovider.SERVICEPROVIDERID == n.SERVICEPROVIDERID && m.OrgId==OrgId
                         select n).ToList<TBL_VOUCHER_SMT>();
            }

           
            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith1(source, searchBy, searchText);
                        break;
                    case "2":
                        source = EqualTo1(source, searchBy, searchText);
                        break;
                    case "3":
                        source = Contains1(source, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith1(source, "active", searchText);
                        break;
                    case "51":
                        source = Startswith1(source, "inactive", searchText);
                        break;
                    case "52":
                        source = Startswith1(source, "used", searchText);
                        break;
                    case "53":
                        source = Startswith1(source, "notused", searchText);
                        break;
                }
            }
          
            int num = source.Count<TBL_VOUCHER_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CREATEDATE descending
                              select n).Skip<TBL_VOUCHER_SMT>(count).Take<TBL_VOUCHER_SMT>(10).ToList<TBL_VOUCHER_SMT>());
        }

        #region Search Options

        public List<TBL_VOUCHER_SMT> Startswith1(List<TBL_VOUCHER_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => (n.SERVICEPROVIDERID != 0) && n.serviceprovider.SERVICEPROVIDER.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.serviceplan.servicetype.SERVICETYPENAME.ToLower().StartsWith(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => (n.SERVICEPLANID != 0) && n.serviceplan.PLANNAEME.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.CODES.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.serviceprovider.Organizations.OrganisationName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "8")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDATE).ToLower().StartsWith(searchText)).ToList();
            }

            else if (SearchBy == "active")
            {
                query = query.Where(n => n.STATUS == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.STATUS == false).ToList();
            }

            else if (SearchBy == "used")
            {
                query = query.Where(n => n.IsVoucherAssigned == true).ToList();
            }
            else if (SearchBy == "notused")
            {
                query = query.Where(n => n.IsVoucherAssigned == null || n.IsVoucherAssigned == false).ToList();
            }

            List<TBL_VOUCHER_SMT> source = query.Select(x => x).ToList<TBL_VOUCHER_SMT>();
            return source;
        }


        public List<TBL_VOUCHER_SMT> EqualTo1(List<TBL_VOUCHER_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => (n.SERVICEPROVIDERID != 0) && n.serviceprovider.SERVICEPROVIDER.ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.serviceplan.servicetype.SERVICETYPENAME.ToLower()==(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => (n.SERVICEPLANID != 0) && n.serviceplan.PLANNAEME.ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.CODES.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.serviceprovider.Organizations.OrganisationName.ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "8")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDATE).ToLower()==(searchText)).ToList();
            }


            List<TBL_VOUCHER_SMT> source = query.Select(x => x).ToList<TBL_VOUCHER_SMT>();
            return source;
        }


        public List<TBL_VOUCHER_SMT> Contains1(List<TBL_VOUCHER_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => (n.SERVICEPROVIDERID != 0) && n.serviceprovider.SERVICEPROVIDER.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.serviceplan.servicetype.SERVICETYPENAME.ToLower().Contains(searchText)).ToList();

            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => (n.SERVICEPLANID != 0) && n.serviceplan.PLANNAEME.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.CODES.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.serviceprovider.Organizations.OrganisationName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "8")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDATE).ToLower().Contains(searchText)).ToList();
            }

            List<TBL_VOUCHER_SMT> source = query.Select(x => x).ToList<TBL_VOUCHER_SMT>();
            return source;
        }

        #endregion
    }



         

    #endregion

    #region Organizatation MAster

    /// <summary>
    /// Organization Master Class - To Add,View Organization and Sub Admin of Org
    /// </summary>
    [AuthorizeUser]
    [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
    public class OrganizationController : BaseController
    {

        private SmartLabourEntities dbOrganizationDetails = new SmartLabourEntities();
        private static string connString = ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ToString();
        private Database objTransDB = new Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase(connString); 

        /// <summary>
        /// List The Organization MAster
        /// </summary>
        /// <param name="id"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        public ActionResult OrganizationMaster(int? id, string search)
        {
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }

            List<TBL_OrganisationMaster> source = new List<TBL_OrganisationMaster>();
            if ((search != null) && (search != string.Empty))
            {
                var query = (from n in this.dbOrganizationDetails.Organisation 
                             select n).ToList();
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();

                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(query, "active", searchText);
                        break;
                    case "51":
                        source = Startswith(query, "inactive", searchText);
                        break;
                }
            }
            else
            {
                source = this.dbOrganizationDetails.Organisation.ToList<TBL_OrganisationMaster>();
            }

            int num = source.Count<TBL_OrganisationMaster>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            base.TempData["currentgetidss"] = "Masters";
            List<TBL_OrganisationMaster> OrgList = new List<TBL_OrganisationMaster>();
            OrgList = (from n in source
                       orderby n.OrgId descending
                       select n).Skip<TBL_OrganisationMaster>(count).Take<TBL_OrganisationMaster>(10).ToList<TBL_OrganisationMaster>();

            return base.View(OrgList);
        }
        
        #region Search Options

        //<option value="1" >Name </option>
        //            <option value="2">Organization Code  </option>
        //            <option value="3">Contact No. </option>
        //            <option value="4">PinCode </option>
        //            <option value="5">Address </option>
        //            <option value="6">Status </option>
        public List<TBL_OrganisationMaster> Startswith(List<TBL_OrganisationMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.OrganisationName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.OrganisationCode.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.OrganisationContactno.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.Organisationpincode.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.OrganisationAddress1.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "active")
            {
                query = query.Where(n => n.IsActive == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.IsActive == false).ToList();
            }

            List<TBL_OrganisationMaster> source = query.Select(x => x).ToList<TBL_OrganisationMaster>();
            return source;
        }

        /// <summary>
        /// Serach method for Equal to search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_OrganisationMaster> EqualTo(List<TBL_OrganisationMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.OrganisationName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.OrganisationCode.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.OrganisationContactno.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.Organisationpincode.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.OrganisationAddress1.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "6")
            {
                // query = query.Where(n => n.Organisationpincode.ToLower()==searchText)).ToList();
            }

            List<TBL_OrganisationMaster> source = query.Select(x => x).ToList<TBL_OrganisationMaster>();
            return source;
        }

        /// <summary>
        /// Search method for Contains a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_OrganisationMaster> Contains(List<TBL_OrganisationMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.OrganisationName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.OrganisationCode.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.OrganisationContactno.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.Organisationpincode.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.OrganisationAddress1.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "6")
            {
                // query = query.Where(n => n.Organisationpincode.ToLower().Contains(searchText)).ToList();
            }

            List<TBL_OrganisationMaster> source = query.Select(x => x).ToList<TBL_OrganisationMaster>();
            return source;
        }

        #endregion

        /// <summary>
        /// Get Method for Add New Organization
        /// </summary>
        /// <returns></returns>
        [HttpGet]     
        public ActionResult OrganizationAdd()
        {
            TBL_OrganisationMaster org = new TBL_OrganisationMaster();
            Int64 Count = (from n in this.dbOrganizationDetails.Organisation orderby n.OrgId descending select n.OrgId).FirstOrDefault();
            Count = 1000000000 + Count+1;
            string OrgCode = "SL" + Count.ToString();
            //str2 = "TRAN000".PadRight(6) + str3;
            org.OrganisationCode = OrgCode;
            org.IsActive = true;
            base.TempData["currentgetidss"] = "Masters";
            return base.View(org);
        }

        /// <summary>
        /// Post method to Add the New Organization
        /// </summary>
        /// <param name="Org"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult OrganizationAdd(TBL_OrganisationMaster Org)
        {

            if ((from n in this.dbOrganizationDetails.Organisation
                 where ((n.OrgId != Org.OrgId) && (n.OrganisationName.ToLower().Trim() == Org.OrganisationName.ToLower().Trim())) || ((n.OrgId != Org.OrgId) && (n.OrganisationCode.Trim() == Org.OrganisationCode.Trim()))
                 select n).ToList<TBL_OrganisationMaster>().Count > 0)
            {
                ((dynamic)base.ViewBag).messagealert = "Organization Name or Code Already Exist";
                return base.View(Org);
            }

            base.TempData["currentgetidss"] = "Masters";
            base.TempData["messagealert"] = "";
            if (!base.ModelState.IsValid)
            {
                return base.View(Org);
            }

            Org.CreatedDate = DateTime.Now;
            this.dbOrganizationDetails.Organisation.Add(Org);
            this.dbOrganizationDetails.SaveChanges();
            DataSet dataSet = objTransDB.ExecuteDataSet("SMT_SP_LoadRequestPhoneSetting");
            base.TempData["messagealert"] = "Record Added Successfully";
            return base.RedirectToAction("OrganizationMaster");
        }

        /// <summary>
        /// Update The Status of Organization
        /// </summary>
        /// <param name="status"></param>
        /// <param name="cimageid"></param>
        /// <returns></returns>
        public string UpdateStatus(string status, int cimageid)
        {
            TBL_OrganisationMaster Result_Org = this.dbOrganizationDetails.Organisation.SingleOrDefault<TBL_OrganisationMaster>(n => n.OrgId == cimageid);
            if (status == "true")
            {
                Result_Org.IsActive = false;
            }
            else
            {
                Result_Org.IsActive = true;
            }
            this.dbOrganizationDetails.SaveChanges();
            return "sucess";
        }

        /// <summary>
        /// Get Method for Edit Option
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]      
        public ActionResult OrganizationEdit(int OrgId = 0)
        {

            base.TempData["currentgetidss"] = "Masters";
            TBL_OrganisationMaster model = this.dbOrganizationDetails.Organisation.SingleOrDefault<TBL_OrganisationMaster>(n => n.OrgId == OrgId);
            model.OrgId = Convert.ToInt32(OrgId);
            return base.View(model);
        }

        /// <summary>
        /// Update the Edited Organization Details
        /// </summary>
        /// <param name="Orgid"></param>
        /// <param name="objOrgMaster"></param>
        /// <returns></returns>
        [HttpPost]        
        public ActionResult OrganizationEdit(TBL_OrganisationMaster objOrgMaster)
        {
            if (base.ModelState.IsValid)
            {
                if ((from n in this.dbOrganizationDetails.Organisation
                     where ((n.OrgId != objOrgMaster.OrgId) && (n.OrganisationName.ToLower().Trim() == objOrgMaster.OrganisationName.ToLower().Trim())) || ((n.OrgId != objOrgMaster.OrgId) && (n.OrganisationCode.Trim() == objOrgMaster.OrganisationCode.Trim()))
                     select n).ToList<TBL_OrganisationMaster>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Organization Name or Code Already Exists";
                    return base.View(objOrgMaster);
                }
                TBL_OrganisationMaster ListOrgMster = this.dbOrganizationDetails.Organisation.SingleOrDefault<TBL_OrganisationMaster>(n => n.OrgId == objOrgMaster.OrgId);
                ListOrgMster.OrganisationContactno = objOrgMaster.OrganisationContactno;
                ListOrgMster.OrganisationAddress1 = objOrgMaster.OrganisationAddress1;
                ListOrgMster.OrganisationName = objOrgMaster.OrganisationName;
                ListOrgMster.Organisationpincode = objOrgMaster.Organisationpincode;
                ListOrgMster.OrganisationCode = objOrgMaster.OrganisationCode;
                ListOrgMster.OrganisationAddress2 = objOrgMaster.OrganisationAddress2;
                ListOrgMster.IsActive = objOrgMaster.IsActive;
                ListOrgMster.ModifiedDate = DateTime.Now;
                this.dbOrganizationDetails.SaveChanges();
                base.TempData["messagealert"] = "Organization Updated Successfully";
                return base.RedirectToAction("OrganizationMaster");
            }
            return base.View(objOrgMaster);
        }

        /// <summary>
        /// To View the Organization Details
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]       
        public ActionResult OrganizationView(int Orgid)
        {
            base.TempData["currentgetidss"] = "Masters";
            TBL_OrganisationMaster model = this.dbOrganizationDetails.Organisation.SingleOrDefault<TBL_OrganisationMaster>(n => n.OrgId == Orgid);
            return base.View(model);
        }

        /// <summary>
        /// Remove the Organization
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        /// 
        [HttpGet]
        public JsonResult OrganizationDelete(string id)
        {
            try
            {
                int OrgId = 0;
                // string[] Orgid = id.Split(',');
                string[] Orgid = id.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string Id in Orgid)
                {
                    OrgId = Convert.ToInt32(Id);
                    TBL_OrganisationMaster entity = this.dbOrganizationDetails.Organisation.SingleOrDefault<TBL_OrganisationMaster>(n => n.OrgId == OrgId);
                    this.dbOrganizationDetails.Organisation.Remove(entity);
                    this.dbOrganizationDetails.SaveChanges();
                    base.TempData["messagealert"] = "Record Deleted Successfully";
                }
                if (OrgId == 0)
                {
                    return base.Json("0", JsonRequestBehavior.AllowGet);

                }
                else
                {
                    return base.Json("1", JsonRequestBehavior.AllowGet);
                }

            }
            catch
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// Cheeck Organization Name
        /// </summary>
        /// <param name="OrgName"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult  CheckOrganizationName(string OrgName)
        {
            //base.TempData["currentgetidss"] = "Masters";
            ((dynamic)base.ViewBag).messagealert = "";
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbOrganizationDetails.AdminLogin where m.USERID == UserId && m.STATUS==true select m.OrgId).FirstOrDefault();
             if (UserId==1)
            {
                OrgId = (from n in this.dbOrganizationDetails.Organisation where n.IsActive==true && n.OrganisationName.ToLower().Trim() == OrgName.ToLower().Trim() select n.OrgId).SingleOrDefault();
            }
            else
            {
                ((dynamic)base.ViewBag).GetOrganizationName = (from m in this.dbOrganizationDetails.Organisation where m.IsActive==true && m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();

            }
            if (OrgId == 0)
            {   
                return base.Json("Organization does not Exists", JsonRequestBehavior.AllowGet);
            }
            return base.Json("1", JsonRequestBehavior.AllowGet);
        }
    }

    #endregion

    #region Organizatation Sub Admin

    /// <summary>
    /// Organization Master Class - To Add,View Organization and Sub Admin of Org
    /// </summary>
    [AuthorizeUser]
    public class OrganizationSubAdminController : BaseController
    {
        private SmartLabourEntities dbOrganizationDetails = new SmartLabourEntities();
        private SmartLabourEntities dbOrganizationSubAdminDetails = new SmartLabourEntities();
        private CommonClass objCommon = new CommonClass();

        #region Sub Admin Methods

        /// <summary>
        /// List The Organization Sub Admin List
        /// </summary>
        /// <param name="id"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        public ActionResult OrganizationSubAdmin(int? id, string search)
        {
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }

            List<TBL_ADMINLOGIN_SMT> source = new List<TBL_ADMINLOGIN_SMT>();
            if ((search != null) && (search != string.Empty))
            {
                var query = (from n in this.dbOrganizationSubAdminDetails.AdminLogin
                             select n).ToList();
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(query, "4", searchText);
                        break;
                    case "51":
                        source = Startswith(query, "5", searchText);
                        break;
                }
            }
            else
            {
                source = this.dbOrganizationSubAdminDetails.AdminLogin.ToList<TBL_ADMINLOGIN_SMT>();
            }

            int num = source.Count<TBL_ADMINLOGIN_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            base.TempData["currentgetidss"] = "Masters";
            List<TBL_ADMINLOGIN_SMT> SubAdminList = new List<TBL_ADMINLOGIN_SMT>();
            SubAdminList = (from n in source
                            orderby n.USERID descending
                            where n.USERID != 1
                            select n).Skip<TBL_ADMINLOGIN_SMT>(count).Take<TBL_ADMINLOGIN_SMT>(10).ToList<TBL_ADMINLOGIN_SMT>();
            return base.View(SubAdminList);
        }

        #region Search Options

        /// <summary>
        /// search method startis with search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_ADMINLOGIN_SMT> Startswith(List<TBL_ADMINLOGIN_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.USERNAME.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.USEREMAIL.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.STATUS == true).ToList();
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.STATUS == false).ToList();
            }
            List<TBL_ADMINLOGIN_SMT> source = query.Select(x => x).ToList<TBL_ADMINLOGIN_SMT>();
            return source;
        }

        /// <summary>
        /// search method for Equal to search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_ADMINLOGIN_SMT> EqualTo(List<TBL_ADMINLOGIN_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.USERNAME.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.USEREMAIL.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "4")
            {
                // query = query.Where(n => n.Organisationpincode.ToLower().StartsWith(searchText)).ToList();
            }
            List<TBL_ADMINLOGIN_SMT> source = query.Select(x => x).ToList<TBL_ADMINLOGIN_SMT>();
            return source;
        }

        /// <summary>
        /// search method for contains search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_ADMINLOGIN_SMT> Contains(List<TBL_ADMINLOGIN_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.USERNAME.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.USEREMAIL.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                // query = query.Where(n => n.Organisationpincode.ToLower().StartsWith(searchText)).ToList();
            }
            List<TBL_ADMINLOGIN_SMT> source = query.Select(x => x).ToList<TBL_ADMINLOGIN_SMT>();
            return source;
        }

        #endregion


        /// <summary>
        /// Get Method for Add New Organization Sub Admin
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult OrganizationSubAdminAdd()
        {
            ((dynamic)base.ViewBag).GetOrganizationNamelist = this.GetOrganizationNamelist();

            base.TempData["currentgetidss"] = "Masters";
            return base.View();
        }

        /// <summary>
        /// Post method to Add the New Organization
        /// </summary>
        /// <param name="Org"></param>
        /// <returns></returns>
        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult OrganizationSubAdminAdd(TBL_ADMINLOGIN_SMT Org)
        {
            try
            {
                int OrgId = objCommon.GetOrgIdFromName(Org.Orgname);// (from m in this.dbOrganizationDetails.Organisation where m.OrganisationName == Org.Orgname  select m.OrgId).FirstOrDefault();
                Org.OrgId = OrgId;
                if (OrgId == 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Organization Name Not Exists";
                    return base.View(Org);
                }
                ((dynamic)base.ViewBag).GetOrganizationNamelist = this.GetOrganizationNamelist();
                if (Org.USERNAME == "" || Org.USEREMAIL == "" || Org.USERNAME == null || Org.USEREMAIL == null)
                {
                    return base.View(Org);
                }
                if ((from n in this.dbOrganizationSubAdminDetails.AdminLogin
                     where (n.USERID != Org.USERID) && (n.USEREMAIL.ToLower().Trim() == Org.USEREMAIL.ToLower().Trim())
                     select n).ToList<TBL_ADMINLOGIN_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = " Email Already Exists";
                    return base.View(Org);
                }
                ((dynamic)base.ViewBag).GetOrganizationNamelist = this.GetOrganizationNamelist();

                Org.PASSWORD = objCommon.GenerateRandomPassword();
                base.TempData["currentgetidss"] = "Masters";
                base.TempData["messagealert"] = "";
                if (Org.USERNAME == "")
                {
                    return base.View(Org);
                }
                Org.CREATEDDATE = DateTime.Now;
                this.dbOrganizationSubAdminDetails.AdminLogin.Add(Org);
                this.dbOrganizationSubAdminDetails.SaveChanges();
                base.TempData["messagealert"] = "Record Added Successfully";
                //Your Password is :, Your account has been created successfully !. Reset your password after your first login.
                objCommon.SendingMail(Org.USEREMAIL, "WelCome to Smart Labour", Org.USEREMAIL, Org.PASSWORD, "Your Password is :", "Your account has been created successfully !. Reset your password after your first login.");
                return base.RedirectToAction("OrganizationSubAdmin");
            }
            catch (Exception Ex)
            {
                return base.View(Org);
            }
        }

        /// <summary>
        /// Update The Status of Organization Sub Admin
        /// </summary>
        /// <param name="status"></param>
        /// <param name="cimageid"></param>
        /// <returns></returns>
        public string UpdateStatus(string status, int cimageid)
        {
            TBL_ADMINLOGIN_SMT Result_AdminLogin = this.dbOrganizationSubAdminDetails.AdminLogin.SingleOrDefault<TBL_ADMINLOGIN_SMT>(n => n.USERID == cimageid);
            Result_AdminLogin.Orgname = "Dummy";
            if (status == "true")
            {

                Result_AdminLogin.STATUS = false;
            }
            else
            {
                Result_AdminLogin.STATUS = true;
            }
            this.dbOrganizationSubAdminDetails.SaveChanges();
            return "sucess";
        }


        /// <summary>
        /// Resend the mail to  Sub Admin
        /// </summary>
        /// <param name="status"></param>
        /// <param name="cimageid"></param>
        
        [HttpGet]
        public JsonResult ResendPassword(int UserId)
        {
            try
            {
                TBL_ADMINLOGIN_SMT Org = this.dbOrganizationSubAdminDetails.AdminLogin.SingleOrDefault<TBL_ADMINLOGIN_SMT>(n => n.USERID == UserId);
                objCommon.SendingMail(Org.USEREMAIL, "WelCome to Smart Labour", Org.USEREMAIL, Org.PASSWORD, "Your Password is :", "Your account has been created successfully !. Reset your password after your first login.");
                return base.Json("1", JsonRequestBehavior.AllowGet);
            }
            catch(Exception)
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);
            }
           
        }




        /// <summary>
        /// Get Method for Edit sub Admin details
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult OrganizationSubAdminEdit(int SubAdminId = 0)
        {
            ((dynamic)base.ViewBag).GetOrganizationNamelist = this.GetOrganizationNamelist();
            base.TempData["currentgetidss"] = "Masters";

            TBL_ADMINLOGIN_SMT model = this.dbOrganizationSubAdminDetails.AdminLogin.SingleOrDefault<TBL_ADMINLOGIN_SMT>(n => n.USERID == SubAdminId);
            int OrgId = (from n in this.dbOrganizationSubAdminDetails.AdminLogin where n.USERID==model.USERID  select n.OrgId).SingleOrDefault();
            string OrgName = (from n in this.dbOrganizationSubAdminDetails.Organisation where n.OrgId==OrgId select n.OrganisationName).SingleOrDefault();

            // string Orgname = (from m in this.dbOrganizationDetails.Organisation where m.OrgId == model.OrgId select m.OrganisationName).FirstOrDefault();
            model.Orgname = OrgName;
            model.OrgId = model.OrgId;
            model.PASSWORD = model.PASSWORD;
            model.USERID = Convert.ToInt32(SubAdminId);
            return base.View(model);
        }

        /// <summary>
        /// Update the Edited Sub Admin Details
        /// </summary>
        /// <param name="Orgid"></param>
        /// <param name="objOrgMaster"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult OrganizationSubAdminEdit(TBL_ADMINLOGIN_SMT objSubAdmin)
        {
            try
            {
                if ((objSubAdmin.USERNAME == string.Empty || objSubAdmin.USERNAME == null) && (objSubAdmin.Orgname == string.Empty || objSubAdmin.Orgname == null))
                   {
                       ((dynamic)base.ViewBag).messagealert = "Select Organization";
                       ((dynamic)base.ViewBag).NameAlert = "Enter Name";
                       return base.View(objSubAdmin);
                   }
                else if (objSubAdmin.USERNAME == string.Empty || objSubAdmin.USERNAME == null)
                    {
                        ((dynamic)base.ViewBag).NameAlert = "Enter Name";
                        return base.View(objSubAdmin);
                    }
                else if (objSubAdmin.Orgname == string.Empty || objSubAdmin.Orgname == null)
                {
                    ((dynamic)base.ViewBag).messagealert = "Select Organization";
                    return base.View(objSubAdmin);
                }

                int OrgId = objCommon.GetOrgIdFromName(objSubAdmin.Orgname);
                if(OrgId==0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Organization Name Not Exists";
                    return base.View(objSubAdmin);
                }
                ((dynamic)base.ViewBag).GetOrganizationNamelist = this.GetOrganizationNamelist();
                if (objSubAdmin.USERNAME == "" || objSubAdmin.USEREMAIL == "" || objSubAdmin.USERNAME == null || objSubAdmin.USEREMAIL == null)
                {
                    return base.View(objSubAdmin);
                }
                if ((from n in this.dbOrganizationSubAdminDetails.AdminLogin
                     where (n.USERID != objSubAdmin.USERID) && (n.USEREMAIL.ToLower().Trim() == objSubAdmin.USEREMAIL.ToLower().Trim())
                     select n).ToList<TBL_ADMINLOGIN_SMT>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = " Email Already Exists";
                    return base.View(objSubAdmin);
                }
                var prod = this.dbOrganizationSubAdminDetails.AdminLogin.Find(Convert.ToInt32(objSubAdmin.USERID));
                //int OrgId = (from m in this.dbOrganizationDetails.Organisation where m.OrganisationName == objSubAdmin.Orgname select m.OrgId).FirstOrDefault();
                prod.OrgId = OrgId;
                // prod.Orgname = objSubAdmin.Orgname;
                prod.USERNAME = objSubAdmin.USERNAME;
                prod.USEREMAIL = objSubAdmin.USEREMAIL;
                prod.STATUS = objSubAdmin.STATUS;
                prod.MODIFIEDDATE = DateTime.Now;
                prod.Orgname = "Dummy";
                this.dbOrganizationSubAdminDetails.Entry(prod).State = EntityState.Modified;
                this.dbOrganizationSubAdminDetails.SaveChanges();
                base.TempData["messagealert"] = "Sub Admin Updated Successfully";
                return base.RedirectToAction("OrganizationSubAdmin");
            }
            catch (Exception)
            {
                return base.View(objSubAdmin);
            }
        }

        /// <summary>
        /// To View the Organization Sub Admin Details
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult OrganizationSubAdminView(int SubAdminId)
        {
            base.TempData["currentgetidss"] = "Masters";
            TBL_ADMINLOGIN_SMT model = this.dbOrganizationSubAdminDetails.AdminLogin.SingleOrDefault<TBL_ADMINLOGIN_SMT>(n => n.USERID == SubAdminId);
            string Orgname = (from m in this.dbOrganizationDetails.Organisation where m.OrgId == model.OrgId select m.OrganisationName).FirstOrDefault();
            //  model.Orgname = Orgname;
            return base.View(model);
        }

        /// <summary>
        /// Remove the Organization
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        /// 
        [HttpGet]
        public JsonResult OrganizationSubAdminDelete(string id)
        {
            try
            {
                int SubAdminid = 0;
                string[] SubAdminId = id.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string Id in SubAdminId)
                {
                    SubAdminid = Convert.ToInt32(Id);
                    TBL_ADMINLOGIN_SMT entity = this.dbOrganizationSubAdminDetails.AdminLogin.SingleOrDefault<TBL_ADMINLOGIN_SMT>(n => n.USERID == SubAdminid);
                    this.dbOrganizationSubAdminDetails.AdminLogin.Remove(entity);
                    this.dbOrganizationSubAdminDetails.SaveChanges();
                    base.TempData["messagealert"] = "Record Deleted Successfully";
                }
                if (SubAdminid == 0)
                {
                    return base.Json("0", JsonRequestBehavior.AllowGet);

                }
                else
                {
                    return base.Json("1", JsonRequestBehavior.AllowGet);
                }

            }
            catch
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);
            }
        }

        #endregion

        #region Common Methods

        /// <summary>
        /// Organization Name AutoComplete
        /// </summary>
        /// <param name="term"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult OrgNameAutoComplete(string term)
        {
            try
            {
                var OrgNameList = (from m in this.dbOrganizationDetails.Organisation where m.OrganisationName.StartsWith(term) && m.IsActive==true select m.OrganisationName).Take(10);
                return Json(OrgNameList, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                List<string> stateNameList1 = new List<string>();
                return Json(stateNameList1, JsonRequestBehavior.AllowGet);

            }

        }

        /// <summary>
        /// Bind for Organization Names
        /// </summary>
        /// <param name="term"></param>
        /// <returns></returns>
        public SelectList GetOrganizationNamelist()
        {


            return new SelectList(from m in
                                      (from m in this.dbOrganizationDetails.Organisation
                                       where m.IsActive == true
                                       select m).AsEnumerable<TBL_OrganisationMaster>()
                                  orderby m.OrganisationName
                                  select new SelectListItem { Text = m.OrganisationName, Value = m.OrgId.ToString() }, "Value", "Text");
        }

        ///// <summary>
        ///// Bind for Organization Names
        ///// </summary>
        ///// <param name="term"></param>
        ///// <returns></returns>
        //public string GetOrganizationName(int OrgId)
        //{
        //    //int OrgId = (from m in this.dbOrganizationDetails.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
        //    return (from m in this.dbOrganizationDetails.Organisation where m.OrgId == OrgId && m.IsActive==true select m.OrganisationName).FirstOrDefault();

        //    //return new SelectList(from m in
        //    //                          (from m in this.dbOrganizationDetails.Organisation
        //    //                           where m.IsActive == true && m.OrgId == OrgId
        //    //                           select m).AsEnumerable<TBL_OrganisationMaster>()
        //    //                      orderby m.OrganisationName
        //    //                      select new SelectListItem { Text = m.OrganisationName, Value = m.OrgId.ToString() }, "Value", "Text");
        //}

        #endregion

        #region Import Labours

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Importlabour(int? id, string search, string msg = "")
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbOrganizationSubAdminDetails.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            base.ViewData["ResultImport"] = msg;
            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "Masters";
            List<Labour> source = new List<Labour>();
            var query = source;
             if (UserId==1)
            {
                query = this.dbOrganizationSubAdminDetails.Labours.ToList();
            }
            else
            {
                query = (from n in dbOrganizationSubAdminDetails.Labours where n.OrgId == OrgId select n).ToList();
            }
            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = LabourStartswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = LabourEqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = LabourContains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = LabourStartswith(query, "active", searchText);
                        break;
                    case "51":
                        source = LabourStartswith(query, "inactive", searchText);
                        break;
                }
            }
            else
            {
                 if (UserId==1)
                {
                    source = this.dbOrganizationSubAdminDetails.Labours.ToList<Labour>();
                    ((dynamic)base.ViewBag).OrgView = "2";
                }
                else
                {
                    source = (from n in dbOrganizationSubAdminDetails.Labours where n.OrgId == OrgId select n).ToList<Labour>();
                    ((dynamic)base.ViewBag).OrgView = "1";
                }
            }
            int num = source.Count<Labour>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CREATEDDATE descending
                              select n).Skip<Labour>(count).Take<Labour>(10).ToList<Labour>());
        }

        #region Labour List Search

        /// <summary>
        /// search field starts with search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<Labour> LabourStartswith(IEnumerable<Labour> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower().StartsWith(searchText));

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.LabourID.ToLower().StartsWith(searchText));
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.EmailID.StartsWith(searchText));
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneNumber.ToLower().StartsWith(searchText));
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().StartsWith(searchText.ToLower()));
            }

            else if (SearchBy == "active")
            {
                query = query.Where(n => n.STATUS == true);
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.STATUS == false);
            }
            List<Labour> source = query.Select(x => x).ToList<Labour>();
            return source;
        }

        /// <summary>
        /// search field equal to search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<Labour> LabourEqualTo(IEnumerable<Labour> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower() == searchText);

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.LabourID.ToLower() == searchText);
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.EmailID.ToLower() == searchText);
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneNumber == searchText);
            }
            
          else if (SearchBy == "5")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower()==searchText.ToLower());
            }
            List<Labour> source = query.Select(x => x).ToList<Labour>();
            return source;
        }

        /// <summary>
        /// search field contains search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<Labour> LabourContains(IEnumerable<Labour> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower().Contains(searchText));

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.LabourID.ToLower().Contains(searchText));
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.EmailID.ToLower().Contains(searchText));
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneNumber.Contains(searchText));
            }
            else if (SearchBy == "5")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Contains(searchText.ToLower()));
            }
            List<Labour> source = query.Select(x => x).ToList<Labour>();
            return source;
        }

        #endregion

        /// <summary>
        /// selected Labour View
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult Labours_View(int id)
        {
            base.TempData["currentgetidss"] = "Masters";
            Labour model = (from n in this.dbOrganizationSubAdminDetails.Labours.Include("serviceprovider")
                            where n.serviceprovider.SERVICEPROVIDERID == n.SERVICEPROVIDERID
                            select n).SingleOrDefault<Labour>(n => n.UserID == id);
            return base.View(model);
        }


        /// <summary>
        /// remove the selected rows
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public string Labours_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                Labour entity = this.dbOrganizationSubAdminDetails.Labours.SingleOrDefault<Labour>(n => n.UserID == bannerid);
                this.dbOrganizationSubAdminDetails.Labours.Remove(entity);
                this.dbOrganizationSubAdminDetails.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "1";
        }

        /// <summary>
        /// Update The Status of Labour
        /// </summary>
        /// <param name="status"></param>
        /// <param name="bannerid"></param>
        /// <returns></returns>
        public string UpdateStatus1(string status, int bannerid)
        {
            Labour labour = this.dbOrganizationSubAdminDetails.Labours.SingleOrDefault<Labour>(n => n.UserID == bannerid);
            labour.Password = labour.Password;
            labour.ConfirmPassword = labour.Password;
            if (status == "true")
            {
                labour.STATUS = false;
            }
            else
            {
                labour.STATUS = true;
            }
            labour.OrgName = "Dummy";
            this.dbOrganizationSubAdminDetails.SaveChanges();
            return "sucess";
        }

        #endregion

        /// <summary>
        /// To read the data from excel
        /// </summary>
        /// <param name="Location">The location of the file</param>
        [HttpPost]
        public ActionResult ReadFile(System.Web.HttpPostedFileBase hpfb, string Org, string Insert)
        {
            try { 
            string strResult = string.Empty;
            int OrgId = 0;
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
             if (UserId==1)
            {
                if(Org!=null && Org!=string.Empty)
                {
                    OrgId = (from m in this.dbOrganizationSubAdminDetails.Organisation where m.OrganisationName == Org select m.OrgId).FirstOrDefault();
                }
                else
                {
                    OrgId = 1;
                }               
            }
            else
            {
                OrgId = (from m in this.dbOrganizationSubAdminDetails.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            }
            if (OrgId == 0)
            {
                strResult = "Organization Name Not Exists";
                return base.RedirectToAction("Importlabour", new { search = "", msg = strResult });
            }

            if (hpfb != null)
            {
                if (hpfb.ContentLength > 0)
                {
                    string fileName = Path.GetFileName(hpfb.FileName);
                    Directory.CreateDirectory(Server.MapPath("~/_Admin/uploads/"));
                    string path = Path.Combine(Server.MapPath("~/_Admin/uploads"), fileName);
                    string strFileExtension = Path.GetExtension(hpfb.FileName).ToLower();
                    if (strFileExtension == ".xls" || strFileExtension == ".xlsx")
                    {
                        hpfb.SaveAs(path);
                    }
                    else
                    {
                        strResult = "Select Only .xls or .xlsx File";
                        return base.RedirectToAction("Importlabour", new { search = "", msg = strResult });
                    }
                    hpfb.SaveAs(path);
                    DataTable DtLabouList = objCommon.Import_To_Grid(path, strFileExtension);
                    DataTable distinct = DtLabouList.DefaultView.ToTable(true, "EmailID");
                    DataTable distinctLabours = DtLabouList.DefaultView.ToTable(true, "LabourID");
                    if (distinct.Rows.Count == DtLabouList.Rows.Count)
                    {
                        //NUll Value Validation for Required Fields
                        var EmptyValidation = from table2 in DtLabouList.AsEnumerable()
                                              where string.Empty + table2.Field<object>("EmailID") != string.Empty
                                                  && string.Empty + table2.Field<object>("LabourID") != string.Empty
                                                  && string.Empty + table2.Field<object>("Name") != string.Empty
                                                  && string.Empty + table2.Field<object>("PhoneNumber") != string.Empty
                                                  && string.Empty + table2.Field<object>("ServiceProvider") != string.Empty
                                                  && string.Empty + table2.Field<object>("Pincode") != string.Empty
                                                  && string.Empty + table2.Field<object>("Gender") != string.Empty
                                                  && string.Empty + table2.Field<object>("Address") != string.Empty
                                                  && string.Empty + table2.Field<object>("DOB") != string.Empty
                                                  && string.Empty + table2.Field<object>("DisplayNameAccept") != string.Empty
                                                  && string.Empty + table2.Field<object>("City") != string.Empty
                                                  && string.Empty + table2.Field<object>("State") != string.Empty
                                                  && string.Empty + table2.Field<object>("Address2") != string.Empty
                                                  && string.Empty + table2.Field<object>("Country") != string.Empty
                                                  && string.Empty + table2.Field<object>("Category") != string.Empty
                                              select table2;

                        if (DtLabouList.Rows.Count != EmptyValidation.Count())
                        {
                            strResult = "All fields are mandatory";
                            return base.RedirectToAction("Importlabour", new { search = "", msg = strResult });
                        }

                        string SubCategoryValidation = string.Empty;

                        //there are no duplicates in Eamil
                        var matchedEmail = from table1 in dbOrganizationDetails.Labours.AsEnumerable()
                                           join table2 in DtLabouList.AsEnumerable() on 1 equals 1 //table1.EmailID equals table2.Field<string>("EmailID")
                                           where table1.EmailID == string.Empty + table2.Field<object>("EmailID")//; //&& table1.LabourID == string.Empty +table2.Field<object>("LabourID")
                                           select table1;

                        // Duplicates in Labour Id
                        var matchedLabourId = from table1 in dbOrganizationDetails.Labours.AsEnumerable()
                                              join table2 in DtLabouList.AsEnumerable() on 1 equals 1 //table1.EmailID equals table2.Field<string>("EmailID")
                                              where table1.LabourID == string.Empty + table2.Field<object>("LabourID")
                                              select table1;

                        // Duplicates in Labour Id
                        var matchedEmailLabourId = from table1 in dbOrganizationDetails.Labours.AsEnumerable()
                                                   join table2 in DtLabouList.AsEnumerable() on 1 equals 1 //table1.EmailID equals table2.Field<string>("EmailID")
                                                   where table1.LabourID == string.Empty + table2.Field<object>("LabourID") && table1.EmailID == string.Empty + table2.Field<object>("EmailID")
                                                   select table1;

                        // Email Format Validation
                        var EmailValidation = from table2 in DtLabouList.AsEnumerable() where ValidEmailAddress(string.Empty + table2.Field<object>("EmailID"))==false select table2;



                        //Labour Id Field Validation 
                        var LabourIdValidation = from table2 in DtLabouList.AsEnumerable() where ValidLabourID(string.Empty + table2.Field<object>("LabourID"))==false select table2;
                   
                        var LabourIdValidationTest = from table2 in DtLabouList.AsEnumerable() where !ValidLabourID(string.Empty + table2.Field<object>("LabourID")) select table2;

                        var DisplayNameValidation = from table2 in DtLabouList.AsEnumerable() where table2.Field<string>("DisplayNameAccept").ToLower() == "true" || table2.Field<string>("DisplayNameAccept").ToLower() == "false" select table2;
                        var ServiceProviderValidation = from table1 in dbOrganizationDetails.ServiceProvider.AsEnumerable() 
                                                        join table2 in DtLabouList.AsEnumerable() on 1 equals 1
                                                        where table1.OrgId==OrgId &&  table1.SERVICEPROVIDER.ToLower() == (string.Empty + table2.Field<object>("ServiceProvider")).ToLower() && table1.OrgId == OrgId && table1.STATUS //table1.EmailID equals table2.Field<string>("EmailID")
                                                        select table1;  // table1.OrgId==OrgId && 

                        var GenderValidation = from table2 in DtLabouList.AsEnumerable() where "Male".ToLower() == (string.Empty + table2.Field<object>("Gender")).ToLower() || "Female".ToLower() == (string.Empty + table2.Field<object>("Gender")).ToLower() select table2;

                        var DOBValidation = from table2 in DtLabouList.AsEnumerable() where ValidDOB(string.Empty + table2.Field<object>("DOB"))==false select table2;

                        var CategoryAvailable = from m in DtLabouList.AsEnumerable()
                                                join n in dbOrganizationDetails.Category on OrgId equals n.OrgId 
                                                where  (string.Empty + m.Field<object>("Category")).ToLower().Trim() == n.CategoryName.ToLower().Trim()  select n;

                        var SubCategoryCount = from m in DtLabouList.AsEnumerable()
                                                   join n in dbOrganizationDetails.Category on OrgId equals n.OrgId
                                                   join o in dbOrganizationDetails.SubCategory on n.CategoryId equals o.CategoryId
                                                   where (string.Empty + m.Field<object>("Category")).ToLower().Trim() == n.CategoryName.ToLower().Trim()
                                                  // && (string.Empty + m.Field<object>("SubCategory")).ToLower().Trim() == o.SubCategoryName.ToLower().Trim()
                                                   select n.CategoryId;

                        var SubCategoryAvailable = from m in DtLabouList.AsEnumerable()
                                                   join n in dbOrganizationDetails.Category on OrgId equals n.OrgId
                                                   join o in dbOrganizationDetails.SubCategory on n.CategoryId equals o.CategoryId
                                                   where (string.Empty + m.Field<object>("Category")).ToLower().Trim() == n.CategoryName.ToLower().Trim()
                                                   && (string.Empty + m.Field<object>("SubCategory")).ToLower().Trim() == o.SubCategoryName.ToLower().Trim()
                                                   select n.CategoryId;

                        foreach (DataRow dr in DtLabouList.AsEnumerable())
                        {
                            string CategoryName = string.Empty;
                            string SubCategoryName = string.Empty;
                            CategoryName = dr.ItemArray[14].ToString();
                            SubCategoryName = dr.ItemArray[15].ToString();
                            int CategoryId = 0;
                            CategoryId=(from n in dbOrganizationDetails.Category 
                                                   join o in dbOrganizationDetails.SubCategory on n.CategoryId equals o.CategoryId
                                                   where CategoryName.ToLower().Trim() == n.CategoryName.ToLower().Trim() && n.OrgId == OrgId                                                
                                                   select n.CategoryId).FirstOrDefault();
                            if(CategoryId!=0)
                            {
                                    int Category = 0;
                                    Category=(from n in dbOrganizationDetails.Category 
                                                   join o in dbOrganizationDetails.SubCategory on n.CategoryId equals o.CategoryId
                                              where CategoryName.ToLower().Trim() == n.CategoryName.ToLower().Trim()
                                                   && SubCategoryName.ToLower().Trim() == o.SubCategoryName.ToLower().Trim() && n.OrgId == OrgId
                                                   select n.CategoryId).FirstOrDefault();
                                if(Category==0)
                                {
                                    SubCategoryValidation =  dr.ItemArray[0].ToString()+ SubCategoryValidation + ",";
                                }
                            }

                        }


                        int asss = SubCategoryCount.Distinct().Count();
                        int asss1 = SubCategoryAvailable.Distinct().Count();

                        /****************   Email Id Already Exists  *****************************/
                        if (matchedEmail.Count() > 0 && Insert == "1")
                        {
                            var TopMatcedEmail=(from n in matchedEmail                             
                              select n).Take(10).ToList();
                            string strLabourId = string.Empty;
                            foreach(var item in TopMatcedEmail)
                            {
                                strLabourId += item.LabourID +" , ";
                            }
                            strResult = "Some Labour Email Id Already Exists in the Database. Labour Id are " + strLabourId +"...";
                        }
                        /****************   LabourID Already Exists  *****************************/
                        else if (matchedLabourId.Count() > 0 && Insert == "1")
                        {
                            var TopmatchedLabourId = (from n in matchedLabourId
                                                  select n).Take(10).ToList();
                            string strLabourId = string.Empty;
                            foreach (var item in TopmatchedLabourId)
                            {
                                strLabourId += item.LabourID + " , ";
                            }
                            strResult = "Some Labour LabourID Already Exists in the Database. Labour Id are " + strLabourId + "...";
                        }

                          /****************   Labour Id 15 digits  *****************************/
                        else if (LabourIdValidation.Count() > 0)
                        {
                           var LabourIdValidation1 = (from n in LabourIdValidation select n).Take(10).ToList();
                            string strLabourId = string.Empty;
                            foreach (var item in LabourIdValidation1)
                            {
                                strLabourId += item.ItemArray[0] + " , ";
                            }
                            strResult = "Some Labour Labour Id have less 15 digits. Labour Id are " + strLabourId + "...";
                        }

                        /****************   Labour Id not in the Database  *****************************/
                        else if (Insert == "0" && matchedLabourId.Count() != DtLabouList.Rows.Count)
                        {
                            var TopLabourIdValidation = (from table1 in dbOrganizationDetails.Labours.AsEnumerable()
                                                         join table2 in DtLabouList.AsEnumerable() on 1 equals 1 //table1.EmailID equals table2.Field<string>("EmailID")
                                                         where table1.LabourID == string.Empty + table2.Field<object>("LabourID") && table1.EmailID != string.Empty + table2.Field<object>("EmailID")
                                                         select table2).ToList();
                            string strLabourId = string.Empty;
                            foreach (var item in TopLabourIdValidation)
                            {
                                strLabourId += strLabourId + " , " + item.ItemArray[0] ;
                            }
                            strResult = "Some Labour Labour Id not in the Database. Select Import option. Labour Id are " + strLabourId + "...";
                        }

                        /****************   Labours Labour Id and Email Id Mismatched  *****************************/
                        else if (Insert == "0" && (matchedEmail.Count() != matchedEmailLabourId.Count()) || (matchedLabourId.Count() != matchedEmailLabourId.Count()))
                        {
                            strResult = "Some Labour Labour Id and Email Id Mismatched";
                        }

                        /****************   Email Id does not in the correct format  *****************************/
                        else if (EmailValidation.Count()>0)
                        {
                            var ListItem = (from n in EmailValidation select n).Take(10).ToList();
                            string strLabourId = string.Empty;
                            foreach (var item in ListItem)
                            {
                                strLabourId += item.ItemArray[0] + " , ";
                            }                           
                            strResult = "Some Labour Email Id does not in the correct format. Labour Id are " + strLabourId + "..."; 
                        }

                        /****************   service provider entered are wrong  *****************************/
                        else if (DtLabouList.Rows.Count != ServiceProviderValidation.Count())
                        {
                            strResult = "Some Labour service provider entered are wrong";
                        }

                        /****************   Labours Gender not in correct format  *****************************/
                        else if (DtLabouList.Rows.Count != GenderValidation.Count())
                        {
                            strResult = "Some Labour Gender not in correct format";
                        }

                        /****************   Labours DOB not in correct(DD/MM/YYYY) format *****************************/
                        else if (DOBValidation.Count()>0)
                        {

                            var ListItem = (from n in DOBValidation select n).Take(10).ToList();
                            string strLabourId = string.Empty;
                            foreach (var item in ListItem)
                            {
                                strLabourId += item.ItemArray[0] + " , ";
                            }
                            strResult = "Some Labour DOB not in correct(DD/MM/YYYY) format. Labour Id are " + strLabourId + "...";  
                        }

                        /****************  Labours Category does not exists  *****************************/
                        else if (CategoryAvailable.Count() != DtLabouList.Rows.Count)
                        {
                            strResult = "Some Labour Category does not exists";
                        }
                        else if (SubCategoryValidation !=String.Empty)
                        {
                            strResult = "Some Labour Sub Category is Empty or does not exists. Labour Id are " + SubCategoryValidation + "..."; 
                        }
                        //else if (CategoryAvailable.Count()>0)
                        //{
                        //    strResult = "Some Labours Category does not exists";
                        //}
                           

                        else
                        {
                            int UId = Convert.ToInt32(Session["USERID"].ToString());
                            Labour objLabour = new Labour();
                            // modify data
                            foreach (DataRow item in DtLabouList.Rows)
                            {
                                try
                                {
                                    // var objLabour = this.dbOrganizationSubAdminDetails.AdminLogin.Find(Convert.ToInt32(objSubAdmin.USERID));
                                    if (Insert == "1")
                                    {
                                        ImportInsert(item, objLabour, OrgId, "Insert", UserId);
                                    }
                                    else
                                    {
                                        string Temp = string.Empty;
                                        Temp = item["labourID"].ToString();
                                        int LUserId = (from n in this.dbOrganizationDetails.Labours where n.LabourID == Temp select n.UserID).SingleOrDefault();
                                        if (LUserId == 0)
                                        {
                                            ImportInsert(item, objLabour, OrgId, "Insert", UserId);
                                        }
                                        else
                                        {
                                            var objLabour1 = this.dbOrganizationSubAdminDetails.Labours.Find(LUserId);
                                            ImportInsert(item, objLabour1, OrgId, "Update", UserId);
                                        }
                                    }
                                }
                                catch
                                {
                                    strResult = "Validation Error Occurs Check the Excel Sheet for " + objLabour.LabourID;
                                    return base.RedirectToAction("Importlabour", new { search = "", msg = strResult });
                                }
                            }
                            if (Insert == "1")
                            {
                                strResult = "Records Added Successfully";
                            }
                            else
                            {
                                strResult = "Records Updated Successfully";
                            }
                        }
                    }
                    else
                    {
                        strResult = "Duplicate EmailID or LabourId Availaibale in Excel Sheet.";
                    }
                }

            }
            return base.RedirectToAction("Importlabour", new { search = "", msg = strResult });
           }
            catch(Exception Ex)
            {
                return base.RedirectToAction("Importlabour", new { search = "", msg = "" });
            }
        }

        /// <summary>
        /// Import labours from the Excel
        /// </summary>
        /// <param name="item"></param>
        /// <param name="objLabour"></param>
        /// <param name="OrgId"></param>
        /// <param name="Action"></param>
        /// <param name="UserId"></param>
        public void ImportInsert(DataRow item, Labour objLabour, int OrgId, string Action, int UserId)
        {
            string ServiceId = item["ServiceProvider"].ToString();
            int serviceProviderID = (from m in this.dbOrganizationSubAdminDetails.ServiceProvider
                                     where m.SERVICEPROVIDER == ServiceId && m.OrgId == OrgId
                                     select m.SERVICEPROVIDERID).FirstOrDefault();
            string Category = item["Category"].ToString();
            string SubCategory = item["SubCategory"].ToString();
            int CategoryId = (from m in this.dbOrganizationSubAdminDetails.Category where m.CategoryName.ToLower().Trim() == Category.ToLower().Trim() && m.OrgId==OrgId select m.CategoryId).SingleOrDefault();
            int SubCategoryId = (from m in this.dbOrganizationSubAdminDetails.SubCategory where m.SubCategoryName.ToLower().Trim() == SubCategory.ToLower().Trim() && m.CategoryId == CategoryId select m.SubCategoryId).SingleOrDefault();
            objLabour.LabourID = Convert.ToString(item["labourID"]);
            objLabour.Name = Convert.ToString(item["Name"]);
            objLabour.EmailID = Convert.ToString(item["EmailId"]);
            objLabour.Password = objCommon.GenerateRandomPassword();
            objLabour.ConfirmPassword = objLabour.Password;
            objLabour.PhoneNumber = Convert.ToString(item["PhoneNumber"]);
            if (Convert.ToString(item["Gender"]) == "Male" || Convert.ToString(item["Gender"]) == "male")
            {
                objLabour.Sex = "1";
            }
            else if (Convert.ToString(item["Gender"]) == "Female" || Convert.ToString(item["Gender"]) == "female")
            {
                objLabour.Sex = "2";
            }
            objLabour.SERVICEPROVIDERID = serviceProviderID;
            objLabour.Address1 = item["Address"].ToString();
            objLabour.Address2 = Convert.ToString(item["Address2"]);
            objLabour.State = Convert.ToString(item["State"]);
            objLabour.City = Convert.ToString(item["City"]);
            objLabour.Pincode = Convert.ToString(item["PinCode"]);
            objLabour.STATUS = true;
            objLabour.OrgName = "Dummy";
            objLabour.CreatedFrom = true;
            objLabour.CategoryId = CategoryId;
            if (SubCategoryId == 0)
            {
                objLabour.SubCategoryId = null;
            }
            else
            {
                objLabour.SubCategoryId = SubCategoryId;
            }
            objLabour.Country = item["Country"].ToString();
            // objLabour.DeviceToken = null;
            // objLabour.DeviceType = null;
            if (item["DisplayNameAccept"].ToString().ToLower() == "true")
            {
                objLabour.IsDisplayNameAccepted = true;
            }
            else if (item["DisplayNameAccept"].ToString().ToLower() == "false")
            {
                objLabour.IsDisplayNameAccepted = false;
            }

            objLabour.SERVICETYPEID = "0";
            // objLabour.A
            objLabour.DOB = Convert.ToDateTime(item["DOB"].ToString());
            objLabour.OrgId = OrgId;
            if (Action == "Update")
            {
                objLabour.MODIFIEDDATE = DateTime.Now;
                objLabour.MODIFIEDBY = Convert.ToString(UserId);
                this.dbOrganizationSubAdminDetails.Entry(objLabour).State = EntityState.Modified;
                this.dbOrganizationSubAdminDetails.SaveChanges();
            }
            else if (Action == "Insert")
            {

                objLabour.CREATEDDATE = DateTime.Now;
                objLabour.CREATEDBY = Convert.ToString(UserId);
                this.dbOrganizationSubAdminDetails.Labours.Add(objLabour);
                this.dbOrganizationSubAdminDetails.SaveChanges();//Your Password is : Your account has been created successfully !. Reset your password after your first login.
                objCommon.SendingMail(objLabour.EmailID, "Welcome to Smart Labour", objLabour.EmailID, objLabour.Password, "Your Password is :", "Your account has been created successfully !. Reset your password after your first login.");
            }

        }

        /// <summary>
        /// Check the DOB is valid or not
        /// </summary>
        /// <param name="p"></param>
        /// <returns></returns>
        private bool ValidDOB(string p)
        {
            try
            {
                DateTime Date = Convert.ToDateTime(p);
                return true;
            }
            catch
            {
                return false;
            }

        }

        /// <summary>
        /// Export labours details to excel sheet
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult ExportLabours()
        {
            base.TempData["currentgetidss"] = "Masters";
            return View();
        }

        /// <summary>
        /// post method for export labour details to excel sheet
        /// </summary>
        /// <param name="objExportLabour"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ExportLabours(ExportLabours objExportLabour)
        {
            try
            {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;
             if (UserId==1)
            {
                OrgId = (from n in this.dbOrganizationDetails.Organisation where n.OrganisationName == objExportLabour.OrgName select n.OrgId).SingleOrDefault();
                if (objExportLabour.OrgName == null || objExportLabour.OrgName == string.Empty)
                {
                    objExportLabour.OrgName = null;
                    OrgId = 1;
                }
            }
            else
            {
                OrgId = (from n in this.dbOrganizationDetails.AdminLogin where n.USERID == UserId select n.OrgId).SingleOrDefault();
                objExportLabour.OrgName = (from n in this.dbOrganizationDetails.Organisation where n.OrgId == OrgId select n.OrganisationName).SingleOrDefault();
            }
            if (OrgId == 0)
            {
                if (objExportLabour.OrgName != "")
                {
                    ((dynamic)base.ViewBag).messagealert = " Organization Does Not Exists";
                }
                return base.View(objExportLabour);
            }          
            base.TempData["currentgetidss"] = "Masters";
            DataAccess objda = new DataAccess();
            DataTable dt = new DataTable();
            if (objExportLabour.FromDate.ToString() != "" && objExportLabour.ToDate.ToString() != "")
            {
                dt = objda.GetExportLabours(objExportLabour.FromDate, objExportLabour.ToDate, OrgId, 1);
            }
            else if (objExportLabour.FromDate== null && objExportLabour.ToDate == null && objExportLabour.OrgName==null && UserId==1)
            {
                dt = objda.GetExportLabours(DateTime.Now, DateTime.Now, OrgId, 3);
            }
            else if (objExportLabour.FromDate == null && objExportLabour.ToDate == null && UserId > 1)
            {
                dt = objda.GetExportLabours(DateTime.Now, DateTime.Now, OrgId, 4);
            }
            else
            {
                dt = objda.GetExportLabours(DateTime.Now, DateTime.Now, OrgId, 2);
            }
            //objCommon.ExportExcel(dt, "LabourList");
            //********************************** Export Excel Sheet *********************************************************************
            GridView gv = new GridView();
            gv.DataSource = dt;
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=LabourList.xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);
            Response.Output.Write(sw.ToString());
            Response.Flush();
            Response.End();
            //********************************** End Here ********************************************************************************
            ((dynamic)base.ViewBag).messagealert = "Labour List is Exported Successfully";
            objExportLabour.FromDate = null;
            objExportLabour.ToDate=null;
            objExportLabour.OrgName = null;
            return View(objExportLabour);
            //En Here
          }
            catch(Exception)
            {
                 return View(objExportLabour);
            }

        }

        /// <summary>
        /// Validate a Labour ID
        /// </summary>
        /// <param name="labourId"></param>
        /// <returns></returns>
        private bool ValidLabourID(string labourId)
        {
            if (labourId.Length >= 15)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Validate Email ID
        /// </summary>
        /// <param name="Email"></param>
        /// <returns></returns>
        private bool ValidEmailAddress(string Email)
        {
            string pattern = null;
            pattern = "^([0-9a-zA-Z]([-\\.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$";

            if (Regex.IsMatch(Email, pattern))
            {
                return true;
            }
            else
            {
                return false;
            }

        }

        /// <summary>
        /// Common Method For Sending Mail.
        /// </summary>
        /// Create:16/09/2015
        /// <param name="Email"></param>
        /// <param name="content"></param>
        /// <param name="Title"></param>
        /// <param name="Description"></param>
        /// <returns></returns>
        public string SendingMail(string Email,string Subject,string Name, string content, string ContentTitle, string Message)
        {
            try
            {
                string host = ConfigurationManager.AppSettings["LHost"].ToString();
                int port = Convert.ToInt32(ConfigurationManager.AppSettings["LPort"].ToString());
                string str2 = ConfigurationManager.AppSettings["LToMailId"].ToString();
                string address = ConfigurationManager.AppSettings["LMailId"].ToString();
                SmtpClient client = new SmtpClient(host, port);
                string userName = ConfigurationManager.AppSettings["LMailId"].ToString();
                string password = ConfigurationManager.AppSettings["LMailPassword"].ToString();
                client.Credentials = new NetworkCredential(userName, password);
                MailMessage message = new MailMessage
                {
                    From = new MailAddress(address),
                   
                };
                message.To.Add(new MailAddress(Email));
                message.Subject = Subject;
                message.Priority = MailPriority.Normal;
                message.IsBodyHtml = true;
                if (ContentTitle=="HealthAndSaefty")
                {
                    message.Body = GetMailTemplateURL(Name, content, ContentTitle, Message, content).ToString();
                }
                else
                {
                    message.Body = GetMailTemplate(Name, content, ContentTitle, Message).ToString();
                }
               
                //SmtpClient client2 = new SmtpClient {
                //    Host = host,
                //    EnableSsl = true
                //};
                SmtpClient client2 = new SmtpClient(host, port);
                NetworkCredential credential = new NetworkCredential(userName, password);
                client2.UseDefaultCredentials = true;
                client2.Credentials = credential;
                client2.EnableSsl = true;
                client2.Port = port;
                client2.Send(message);
            }
            catch (Exception exception)
            {
               // throw exception;
            }
            return "SUCCESS";


            //try
            //{
            //    //string EmailId = Email;
            //    string body = string.Empty;
            //    using (StreamReader reader = new StreamReader(Path.Combine(System.Web.HttpContext.Current.Server.MapPath("~/Views/Shared/MailTemplates/RegEmailTemp.html"))))
            //    {
            //        body = reader.ReadToEnd();
            //    }
            //    body = body.Replace("{Content}", content);
            //    body = body.Replace("{UserName}", "Password");
            //    body = body.Replace("{Title}", Title);
            //    body = body.Replace("{Description}", Description);
            //    using (MailMessage mailMessage = new MailMessage())
            //    {
            //        mailMessage.From = new MailAddress("thiyagarajan.e@angleritech.com");
            //        mailMessage.Subject = "Welcome Mail!";
            //        mailMessage.IsBodyHtml = true;
            //        SmtpClient smtp = new SmtpClient();
            //        smtp.Host = ConfigurationManager.AppSettings["LHost"];
            //        smtp.EnableSsl = Convert.ToBoolean(ConfigurationManager.AppSettings["EnableSsl"]);
            //        ServicePointManager.ServerCertificateValidationCallback = delegate(object s, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
            //        { return true; };
            //        System.Net.NetworkCredential NetworkCred = new System.Net.NetworkCredential();
            //        NetworkCred.UserName = ConfigurationManager.AppSettings["LFromMailId"];
            //        NetworkCred.Password = ConfigurationManager.AppSettings["LMailPassword"];
            //        smtp.UseDefaultCredentials = true;
            //        smtp.Credentials = NetworkCred;
            //        smtp.Port = int.Parse(ConfigurationManager.AppSettings["LPort"]);
            //        byte[] encode = new byte[Email.Length];
            //        encode = Encoding.UTF8.GetBytes(Email);
            //        string str = Convert.ToBase64String(encode);
            //        // var UrlPath = System.Web.HttpContext.Current.Request.Url.Scheme + ":/" + System.Web.HttpContext.Current.Request.Url.Authority + url + str;
            //        // body = body.Replace("{Url}", Url.Content(UrlPath));
            //        mailMessage.Body = body;
            //        mailMessage.To.Add(Email);
            //        smtp.Send(mailMessage);
            //        return "Success";
            //    }
            //}
            //catch (Exception)
            //{
            //    return "Failure";
            //}
        }

        /// <summary>
        /// Get Mail Template Without URL
        /// </summary>
        /// <param name="Name"></param>
        /// <param name="Content"></param>
        /// <param name="ContentTitle"></param>
        /// <param name="Message"></param>
        /// <returns></returns>
        public StringBuilder GetMailTemplate(string Name, string Content, string ContentTitle, string Message)
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("");
            string str = ConfigurationManager.AppSettings["MailLogo"].ToString();
            builder.Append("<table width=\"550\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\" style=\"border:#064669 1px solid;font:normal 12px Arial; color:#000;\">");
            builder.Append("<tr>");
            builder.Append("<td style=\"padding:15px 0 15px 20px;background:#FFFFFF;\"><p align=\"left\" style=\"width:200px; float:left; margin:0px; padding:0px 2px 2px;\"><img src=" + str + "></p></td>");
            builder.Append("</tr>");
            builder.Append("<tr>");
            builder.Append("<td colspan=\"2\" height=\"15\" bgcolor=\"#043550\" align=\"center\" style=\"padding:5px 10px 5px 7px;\"></td>");
            builder.Append("</tr>");
            builder.Append("<tr>");
            builder.Append("<td colspan=\"2\" style=\"padding:15px 0px 5px 10px;font:normal 12px Arial;color:#000;\"><b>Dear " + Name + ",</b></td>");
            builder.Append("</tr>");
            builder.Append("<tr>");
            builder.Append("<td colspan=\"2\" style=\"padding:5px 0px 0px 20px;font:normal 12px Arial;color:#000;\">");
            builder.Append(Message+"<br /><br /></td>");
            builder.Append("</tr>");
            builder.Append("<tr>");
            builder.Append("<td colspan=\"2\" style=\"padding:5px 0px 0px 20px;font:normal 12px Arial;color:#000;\">");
            builder.Append("<b>" + ContentTitle + "<b style=\"padding:0px 8px 0px 8px;\"></b>" + Content + "<br />");
            builder.Append("</tr>");
            builder.Append("<tr>");
            builder.Append("<td colspan=\"2\" style=\"padding:5px 0px 20px 10px;font:normal 12px Arial;color:#000;\">Thank You,<br /> Kindest Regards,<br />Smart Labour Team</td>");
            builder.Append("</tr>");

            builder.Append("</table>");
            return builder;
        }

        /// <summary>
        /// Mail Template With URL Link
        /// </summary>
        /// <param name="Name"></param>
        /// <param name="Content"></param>
        /// <param name="ContentTitle"></param>
        /// <param name="Message"></param>
        /// <param name="URL"></param>
        /// <returns></returns>
        public StringBuilder GetMailTemplateURL(string Name, string Content, string ContentTitle, string Message,string URL)
        {
            StringBuilder builder = new StringBuilder();
            builder.Append("");
            string str = ConfigurationManager.AppSettings["MailLogo"].ToString();
            builder.Append("<table width=\"550\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" align=\"center\" style=\"border:#064669 1px solid;font:normal 12px Arial; color:#000;\">");
            builder.Append("<tr>");
            builder.Append("<td style=\"padding:15px 0 15px 20px;background:#FFFFFF;\"><p align=\"left\" style=\"width:200px; float:left; margin:0px; padding:0px 2px 2px;\"><img src=" + str + "></p></td>");
            builder.Append("</tr>");
            builder.Append("<tr>");
            builder.Append("<td colspan=\"2\" height=\"15\" bgcolor=\"#043550\" align=\"center\" style=\"padding:5px 10px 5px 7px;\"></td>");
            builder.Append("</tr>");
            builder.Append("<tr>");
            builder.Append("<td colspan=\"2\" style=\"padding:15px 0px 5px 10px;font:normal 12px Arial;color:#000;\"><b>Dear " + Name + ",</b></td>");
            builder.Append("</tr>");
            builder.Append("<tr>");
            builder.Append("<td colspan=\"2\" style=\"padding:5px 0px 0px 20px;font:normal 12px Arial;color:#000;\">");
            builder.Append(Message + "<br /></td>");
            builder.Append("</tr>");           
            builder.Append("<tr>");          
            builder.Append("<td colspan=\"2\" style=\"padding:5px 0px 0px 20px;font:normal 12px Arial;color:#000;\">");
            builder.Append("<b>" + "" + "<b style=\"padding:0px 8px 0px 8px;\"></b>" + "" + "<br />");
            builder.Append("<b><a href=" + URL + ">Click Here</a></b>");
            builder.Append("</tr>");
            builder.Append("<tr>");
            builder.Append("<td colspan=\"2\" style=\"padding:5px 0px 20px 10px;font:normal 12px Arial;color:#000;\">Thank You,<br /> Kindest Regards,<br />Smart Labour Team</td>");
            builder.Append("</tr>");
            builder.Append("</table>");
            return builder;
        }

    }



    #endregion

    #region Health And Safety
    [AuthorizeUser]
    public class HealthAndSafetyController : BaseController
    {
        private SmartLabourEntities dbHealthAndsafety = new SmartLabourEntities();

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult HealthAndSafetyList(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"].ToString() != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<TBL_HealthAndSafety> source = new List<TBL_HealthAndSafety>();
            DataAccess ObjDa = new DataAccess();
            DataTable dt = ObjDa.GetHealthAndSafetyList(UserId);
            foreach (DataRow reader in dt.Rows)
            {
                TBL_HealthAndSafety item = new TBL_HealthAndSafety();
                if (reader["LabourID"] != DBNull.Value)
                {
                    item.LabourID = reader["LabourID"].ToString();
                }
                item.HSId = Convert.ToInt32(reader["HSId"].ToString());
                item.Name = reader["Name"].ToString();
                item.ImagePath = reader["ImagePath"].ToString();
                item.AudioPath = reader["AudioPath"].ToString();
                item.Comments = reader["Comments"].ToString();
                item.AudioName = reader["AudioName"].ToString();
                item.ImageName = reader["ImageName"].ToString();
                item.PostedDateView = new DateTime?(Convert.ToDateTime(reader["PostedDate"].ToString()));                
                source.Add(item);
            }

            if ((search != null) && (search != string.Empty))
            {

                var query = source.ToList();
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":

                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                }
            }
            else
            {
                if(UserId==1)
                {
                    source = source.ToList<TBL_HealthAndSafety>();
                }
                else
                {
                    int OrgId=(from n in this.dbHealthAndsafety.AdminLogin where n.USERID==UserId select n.OrgId).SingleOrDefault();
              
                    source = (from n in this.dbHealthAndsafety.HealthSafety
                              join m in this.dbHealthAndsafety.Labours on n.LabourID equals m.LabourID
                              where m.OrgId == OrgId
                              select n).ToList();
                }
                
            }


            int num = source.Count<TBL_HealthAndSafety>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            base.TempData["currentgetidss"] = "Masters";

            return base.View(source.Skip<TBL_HealthAndSafety>(count).Take<TBL_HealthAndSafety>(10).ToList<TBL_HealthAndSafety>());

        }

        #region Search Options

        /// <summary>
        /// 
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_HealthAndSafety> Startswith(List<TBL_HealthAndSafety> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.LabourID.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Comments.ToLower().StartsWith(searchText)).ToList();
            }

            else if (SearchBy == "3")
            {
                // query = query.Where(n => n.Organisationpincode.ToLower().StartsWith(searchText)).ToList();
            }
            List<TBL_HealthAndSafety> source = query.Select(x => x).ToList<TBL_HealthAndSafety>();
            return source;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_HealthAndSafety> EqualTo(List<TBL_HealthAndSafety> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.LabourID.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Comments.ToLower() == searchText).ToList();
            }

            else if (SearchBy == "3")
            {
                // query = query.Where(n => n.Organisationpincode.ToLower().StartsWith(searchText)).ToList();
            }
            List<TBL_HealthAndSafety> source = query.Select(x => x).ToList<TBL_HealthAndSafety>();
            return source;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_HealthAndSafety> Contains(List<TBL_HealthAndSafety> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.LabourID.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Comments.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                // query = query.Where(n => n.Organisationpincode.ToLower().StartsWith(searchText)).ToList();
            }
            List<TBL_HealthAndSafety> source = query.Select(x => x).ToList<TBL_HealthAndSafety>();
            return source;
        }

        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="HSid"></param>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult HealthAndSafetyEdit(int HSid)
        {
            base.TempData["currentgetidss"] = "Masters";
            TBL_HealthAndSafety model = this.dbHealthAndsafety.HealthSafety.SingleOrDefault<TBL_HealthAndSafety>(n => n.HSId == HSid);
            string LabourName = (from m in this.dbHealthAndsafety.Labours where m.LabourID == model.LabourID select m.Name).FirstOrDefault();
            model.Name = LabourName;
            model.Comments = model.Comments;
            model.HSId = Convert.ToInt32(HSid);
            return base.View(model);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Model"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult HealthAndSafetyEdit(TBL_HealthAndSafety Model)
        {
            try
            {
                var prod = this.dbHealthAndsafety.HealthSafety.Find(Convert.ToInt32(Model.HSId));
                prod.Comments = Model.Comments;
                this.dbHealthAndsafety.Entry(prod).State = EntityState.Modified;
                this.dbHealthAndsafety.SaveChanges();
                base.TempData["messagealert"] = "Comments Updated Successfully.";
                return base.RedirectToAction("HealthAndSafetyList");
            }
            catch (Exception)
            {
                return base.View(Model);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult HealthAndSafetyDelete(string id)
        {
            try
            {
                int Hsid = 0;
                // string[] Orgid = id.Split(',');
                string[] HSId = id.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string Id in HSId)
                {
                    Hsid = Convert.ToInt32(Id);

                    TBL_HealthAndSafety entity = this.dbHealthAndsafety.HealthSafety.SingleOrDefault<TBL_HealthAndSafety>(n => n.HSId == Hsid);
                    string fileName = System.Web.HttpContext.Current.Server.MapPath("~/Upload_Files/Audio/" + entity.AudioPath + ".mp3");
                    this.dbHealthAndsafety.HealthSafety.Remove(entity);
                    this.dbHealthAndsafety.SaveChanges();
                    if ((System.IO.File.Exists(fileName)))
                    {
                        System.IO.File.Delete(fileName);
                    }
                    base.TempData["messagealert"] = "Record Deleted Successfully";
                }
                if (Hsid == 0)
                {
                    return base.Json("0", JsonRequestBehavior.AllowGet);

                }
                else
                {
                    return base.Json("1", JsonRequestBehavior.AllowGet);
                }

            }
            catch
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="HSId"></param>
        /// <returns></returns>
        public string HealthAndSafetyViewImage(int HSId)
        {
            TBL_HealthAndSafety Result_AdminLogin = this.dbHealthAndsafety.HealthSafety.SingleOrDefault<TBL_HealthAndSafety>(n => n.HSId == HSId);
            string Oid = (from m in this.dbHealthAndsafety.HealthSafety where m.HSId == HSId select m.ImagePath).FirstOrDefault();
            return "";
        }
        
    }
    #endregion

    #region Activate Labours

    public class ActivateUsersController : BaseController
    {
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();
      
        /// <summary>
        /// List Inactive Labours
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult ActivateLabours(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.SmtDbEntites.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();

            if (!id.HasValue)
            {
                id = 1;
            }
            base.TempData["currentgetidss"] = "Masters";
            List<Labour> source = new List<Labour>();
            var query = source;
             if (UserId==1)
            {
                query = (from n in this.SmtDbEntites.Labours where n.STATUS == false select n).ToList();
            }
            else
            {
                query = (from n in SmtDbEntites.Labours where n.OrgId == OrgId && n.STATUS == false select n).ToList();
            }
            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);

                        break;
                    case "50":
                        source = Startswith(query, "active", searchText);
                        break;

                    case "51":
                        source = Startswith(query, "inactive", searchText);
                        break;
                }
            }
            else
            {
                 if (UserId==1)
                {
                    source = (from n in this.SmtDbEntites.Labours where n.STATUS == false select n).ToList<Labour>();
                }
                else
                {
                    source = (from n in SmtDbEntites.Labours where n.OrgId == OrgId && n.STATUS == false select n).ToList<Labour>();
                }
            }
            int num = source.Count<Labour>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            return base.View((from n in source
                              orderby n.CREATEDDATE descending
                              select n).Skip<Labour>(count).Take<Labour>(10).ToList<Labour>());
        }

        #region Labour List

        /// <summary>
        /// Search field starts with search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<Labour> Startswith(IEnumerable<Labour> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower().StartsWith(searchText));

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.LabourID.ToLower().StartsWith(searchText));
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.EmailID.StartsWith(searchText));
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneNumber.ToLower().StartsWith(searchText));
            }
            else if (SearchBy == "active")
            {
                query = query.Where(n => n.STATUS == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.STATUS == false).ToList();
            }
            List<Labour> source = query.Select(x => x).ToList<Labour>();
            return source;
        }

        /// <summary>
        /// search field equal to search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<Labour> EqualTo(IEnumerable<Labour> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower() == searchText);

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.LabourID.ToLower() == searchText);
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.EmailID.ToLower() == searchText);
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneNumber == searchText);
            }
            else if (SearchBy == "5")
            {
                // query = query.Where(n => n..ToLower().StartsWith(searchText));
            }
            List<Labour> source = query.Select(x => x).ToList<Labour>();
            return source;
        }

        /// <summary>
        /// search field contains search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<Labour> Contains(IEnumerable<Labour> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Name.ToLower().Contains(searchText));

            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.LabourID.ToLower().Contains(searchText));
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.EmailID.ToLower().Contains(searchText));
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.PhoneNumber.Contains(searchText));
            }
            else if (SearchBy == "5")
            {
                // query = query.Where(n => n..ToLower().StartsWith(searchText));
            }
            List<Labour> source = query.Select(x => x).ToList<Labour>();
            return source;
        }

        #endregion

        /// <summary>
        /// delete multiple selected labours
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public string Labours_BulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                Labour entity = this.SmtDbEntites.Labours.SingleOrDefault<Labour>(n => n.UserID == bannerid);
                this.SmtDbEntites.Labours.Remove(entity);
                this.SmtDbEntites.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "success";
        }

        /// <summary>
        /// Update status selected list of labours
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public string Labours_BulkUpdateStatus(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                CommonClass objMail = new CommonClass();
                int UserId = Convert.ToInt32(strArray[i].ToString());
                Labour labour = this.SmtDbEntites.Labours.SingleOrDefault<Labour>(n => n.UserID == UserId);
                labour.Password = labour.Password;
                labour.ConfirmPassword = labour.Password;
                labour.STATUS = true;
                this.SmtDbEntites.SaveChanges();
                objMail.SendingMail(labour.EmailID, "Welcome To Smart Labour", labour.EmailID, "", "", "Your Account has been Activated Successfully.");
            }
            return "sucess";

        }

        /// <summary>
        /// update a status of seleted labour
        /// </summary>
        /// <param name="UserId"></param>
        /// <returns></returns>
        public string UpdateStatus(int UserId)
        {
            CommonClass objMail = new CommonClass();
            Labour labour = this.SmtDbEntites.Labours.SingleOrDefault<Labour>(n => n.UserID == UserId);
            labour.Password = labour.Password;
            labour.ConfirmPassword = labour.Password;
            labour.STATUS = true;
            this.SmtDbEntites.SaveChanges();
            objMail.SendingMail(labour.EmailID, "Welcome To Smart Labour", labour.EmailID,"","", "Your Account has been Activated Successfully.");
            return "sucess";
        }
      
    }

    #endregion

    #region Common Functions Mail,Passsword,etc

    public class CommonClass : BaseController
    {
        private SmartLabourEntities SmtDbEntites = new SmartLabourEntities();

        /// <summary>
        /// Sending Mail to Emails 
        /// </summary>
        /// <param name="Email"></param>
        /// <param name="Subject"></param>
        /// <param name="Name"></param>
        /// <param name="content"></param>
        /// <param name="ContentTitle"></param>
        /// <param name="Message"></param>
        /// <returns></returns>
        public string SendingMail(string Email, string Subject, string Name, string content, string ContentTitle, string Message)
        {
            OrganizationSubAdminController objMail = new OrganizationSubAdminController();
            //SendingMail(string Email,string Subject,string Name, string content, string ContentTitle, string Message)        
           return objMail.SendingMail(Email, Subject, Name, content, ContentTitle, Message);
            
        }
       
        /// <summary>
        /// To Generate Random password
        /// </summary>
        /// <returns></returns>
        public string GenerateRandomPassword()
        {
            try
            {
                //Every time Change the Length of the Secrete Numbers
                int textLength = 10, i = 0;
                textLength = 10 + i;
                i++;
                if (i == 9)
                {
                    i = 0;
                }
                const string Chars = "ABCDEFGHIJKLMNPOQRSTUVWXYZ0123456789";
                var random = new Random();
                var result = new string(
                    Enumerable.Repeat(Chars, textLength)
                        .Select(s => s[random.Next(s.Length)])
                        .ToArray());
                return result;
            }

            catch (Exception)
            {
                return "";
            }
        }

        /// <summary>
        /// Convert Excel Sheet data to Data Table
        /// </summary>
        /// <param name="FilePath"></param>
        /// <param name="Extension"></param>
        /// <returns></returns>
        public DataTable Import_To_Grid(string FilePath, string Extension)
        {
            string conStr = "";
            switch (Extension)
            {
                case ".xls": //Excel 97-03
                    conStr = ConfigurationManager.ConnectionStrings["Excel03ConString"]
                             .ConnectionString;                  
                    break;
                case ".xlsx": //Excel 07
                    conStr = ConfigurationManager.ConnectionStrings["Excel07ConString"]
                              .ConnectionString;
                    break;
            }
            conStr = String.Format(conStr, FilePath, "Yes");
            OleDbConnection connExcel;
            connExcel = new OleDbConnection(conStr);
            OleDbCommand cmdExcel = new OleDbCommand();
            OleDbDataAdapter oda = new OleDbDataAdapter();
            DataTable dt = new DataTable();
            cmdExcel.Connection = connExcel;

            //Get the name of First Sheet
            try
            {
               connExcel.Open();
            }
            catch
            {
                conStr = "";
                connExcel = new OleDbConnection(); 
                //For Html Table Format
                conStr = ConfigurationManager.ConnectionStrings["ExcelHtmlConString"]
                             .ConnectionString;
                conStr = String.Format(conStr, FilePath, "Yes");
                connExcel = new OleDbConnection(conStr);
                cmdExcel.Connection = connExcel;
                connExcel.Open();
            }
           // connExcel.Open();
            DataTable dtExcelSchema;
            dtExcelSchema = connExcel.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
            string SheetName = dtExcelSchema.Rows[0]["TABLE_NAME"].ToString();
            connExcel.Close();

            //Read Data from First Sheet
            connExcel.Open();
            cmdExcel.CommandText = "SELECT * From [" + SheetName + "]";
           // cmdExcel.CommandText = "SELECT Format([F1], 'General Number') From [" + SheetName + "]";
            oda.SelectCommand = cmdExcel;
            oda.Fill(dt);
            connExcel.Close();
            return dt;
        }
       
        /// <summary>
        /// To Check Intger convert string is numeric or not
        /// </summary>
        /// <param name="Expression"></param>
        /// <returns></returns>
        public bool CheckIsNumeric(object Expression)
        {
            double retNum;
            bool isNum = Double.TryParse(Convert.ToString(Expression), System.Globalization.NumberStyles.Any, System.Globalization.NumberFormatInfo.InvariantInfo, out retNum);
            return isNum;
        }

        /// <summary>
        /// Export Datatable to Excel
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="FileName"></param>
        public void ExportExcel(DataTable dt,string FileName)
        {
            //********************************** Export Excel Sheet *********************************************************************
            GridView gv = new GridView();
            gv.DataSource = dt;
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=LabourList.xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            //Response.ContentEncoding = System.Text.Encoding.Unicode;
            //Response.BinaryWrite(System.Text.Encoding.Unicode.GetPreamble());
        
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            gv.RenderControl(htw);
            string style = @"<style> td { mso-number-format:\@;} </style>";
            Response.Write(style);
            Response.Output.Write(sw.ToString());
            Response.Flush();
            Response.End();
            //********************************** End Here ********************************************************************************
        }

        /// <summary>
        /// Convert List to Data Table
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="items"></param>
        /// <returns></returns>
        public static DataTable ToDataTable<T>(List<T> items)
        {
            DataTable dataTable = new DataTable(typeof(T).Name);

            //Get all the properties
            PropertyInfo[] Props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);
            foreach (PropertyInfo prop in Props)
            {
                //Setting column names as Property names
                dataTable.Columns.Add(prop.Name);
            }
            foreach (T item in items)
            {
                var values = new object[Props.Length];
                for (int i = 0; i < Props.Length; i++)
                {
                    //inserting property values to datatable rows
                    values[i] = Props[i].GetValue(item, null);
                }
                dataTable.Rows.Add(values);
            }
            //put a breakpoint here and check datatable
            return dataTable;
        }

        /// <summary>
        /// Get Organization id using Organization Name
        /// </summary>
        /// <param name="OrgName"></param>
        /// <returns></returns>
        public int GetOrgIdFromName(string OrgName)
        {
            int OrgId = 0;
            OrgId = (from n in this.SmtDbEntites.Organisation where n.OrganisationName.ToLower().Trim() == OrgName.ToLower().Trim() && n.IsActive==true select n.OrgId).SingleOrDefault();
            return OrgId;
        }

        /// <summary>
        /// Get Organization Name using Organization Id
        /// </summary>
        /// <param name="OrgId"></param>
        /// <returns></returns>
        public string GetOrganizartionNameFromID(int OrgId)
        {
            string OrgName = string.Empty;
            OrgName = (from n in this.SmtDbEntites.Organisation where n.OrgId==OrgId && n.IsActive == true select n.OrganisationName).SingleOrDefault();
            return OrgName;
        }


        /// <summary>
        /// Get Organization id for Labours
        /// </summary>
        /// <param name="OrgName"></param>
        /// <returns></returns>
        public int GetOrgIdFromLabour(string LabourId)
        {
            int OrgId = 0;
            OrgId = (from n in SmtDbEntites.Labours where n.LabourID.ToLower().Trim() == LabourId.ToLower().Trim() && n.STATUS == true select n.OrgId).SingleOrDefault();
            return OrgId;
        }

        /// <summary>
        /// Get Organization id for Administrator
        /// </summary>
        /// <param name="OrgName"></param>
        /// <returns></returns>
        public int GetOrgIdFromAdminId(int AdminId)
        {
            int OrgId = 0;
            OrgId = (from n in SmtDbEntites.AdminLogin where n.USERID== AdminId && n.STATUS == true select n.OrgId).SingleOrDefault();
            return OrgId;
        }

    }

    #endregion

    #region Categorymaster

    [AuthorizeUser]
    public class CategoryController : BaseController
    {
        private SmartLabourEntities dbCategory = new SmartLabourEntities();
        OrganizationSubAdminController objOrg = new OrganizationSubAdminController();
        private static string connString = ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ToString();
        private Database objAccessDb = new Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase(connString); 
        CommonClass objCommon = new CommonClass();
        [HttpGet]
        public ActionResult CategoryMasterList(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbCategory.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<TBL_CategoryMaster> source = new List<TBL_CategoryMaster>();
            if ((search != null) && (search != string.Empty))
            {
                var query = source;
                 if (UserId==1)
                {
                    query = (from n in this.dbCategory.Category
                             select n).ToList();
                }
                else
                {
                    query = (from n in this.dbCategory.Category
                             where n.OrgId == OrgId
                             select n).ToList();
                }
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();

                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(query, "active", searchText);
                        break;
                    case "51":
                        source = Startswith(query, "inactive", searchText);
                        break;
                }
            }
            else
            {
                 if (UserId==1)
                {
                    source = this.dbCategory.Category.ToList<TBL_CategoryMaster>();
                }
                else
                {
                    source = (from n in this.dbCategory.Category
                              where n.OrgId == OrgId
                              select n).ToList<TBL_CategoryMaster>();
                }
            }

            int num = source.Count<TBL_CategoryMaster>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            base.TempData["currentgetidss"] = "Masters";
            List<TBL_CategoryMaster> CategoryList = new List<TBL_CategoryMaster>();
            CategoryList = (from n in source
                            orderby n.CategoryId descending
                            select n).Skip<TBL_CategoryMaster>(count).Take<TBL_CategoryMaster>(10).ToList<TBL_CategoryMaster>();

            return base.View(CategoryList);
        }

        #region Search Options

        /// <summary>
        /// Search method for  Starts With search  value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_CategoryMaster> Startswith(List<TBL_CategoryMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.CategoryName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().StartsWith(searchText)).ToList();
            }

            else if (SearchBy == "active")
            {
                query = query.Where(n => n.Status == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.Status == false).ToList();
            }

            List<TBL_CategoryMaster> source = query.Select(x => x).ToList<TBL_CategoryMaster>();
            return source;
        }

        /// <summary>
        /// Search method for Equal to search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_CategoryMaster> EqualTo(List<TBL_CategoryMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.CategoryName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower() == searchText).ToList();
            }


            List<TBL_CategoryMaster> source = query.Select(x => x).ToList<TBL_CategoryMaster>();
            return source;
        }

        /// <summary>
        /// Search method Contains Search value 
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_CategoryMaster> Contains(List<TBL_CategoryMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.CategoryName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Contains(searchText)).ToList();
            }

            List<TBL_CategoryMaster> source = query.Select(x => x).ToList<TBL_CategoryMaster>();
            return source;
        }

        #endregion

        /// <summary>
        /// Get method for Add Category
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult CategoryAdd()
        {
            TBL_CategoryMaster ObjCategory = new TBL_CategoryMaster();
            int UId = Convert.ToInt32(Session["USERID"].ToString());
           if (UId != 1)
            {
                ((dynamic)base.ViewBag).OrgNameType = "Text";
                int Oid = objCommon.GetOrgIdFromAdminId(UId);
                ((dynamic)base.ViewBag).GetOrganizationName = objCommon.GetOrganizartionNameFromID(Oid);
                ObjCategory.OrgId = Oid;
            }
            ObjCategory.Status = true;
            //End
            base.TempData["currentgetidss"] = "Masters";
            return base.View(ObjCategory);
        }

        /// <summary>
        /// Post method to Add the New Organization
        /// </summary>
        /// <param name="Org"></param>
        /// <returns></returns>
        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult CategoryAdd(TBL_CategoryMaster ObjCategory)
        {
            try
            {
                //Addded For Sub Admin Privilege       
                int UId = Convert.ToInt32(Session["USERID"].ToString());
                int OrgId = 0;
                if (UId == 1)
                {
                    ((dynamic)base.ViewBag).OrgNameType = "Drop";
                    OrgId = objCommon.GetOrgIdFromName(ObjCategory.OrgName);
                    ObjCategory.OrgId = OrgId;
                }
                else
                {
                    ((dynamic)base.ViewBag).OrgNameType = "Text";
                    OrgId = objCommon.GetOrgIdFromAdminId(UId);
                    ((dynamic)base.ViewBag).GetOrganizationName = objCommon.GetOrganizartionNameFromID(OrgId); 
                    ObjCategory.OrgId = OrgId;
                    ObjCategory.OrgName = "Dummy";
                }
                if (OrgId == 0)
                {
                    ((dynamic)base.ViewBag).OrgAlert = "Organization Name does not Exists";
                    return base.View(ObjCategory);
                }
                //End
                base.TempData["currentgetidss"] = "Masters";


                if (ObjCategory.CategoryName == string.Empty || ObjCategory.CategoryName == null || ObjCategory.OrgId == 0)
                {
                    return View(ObjCategory);
                }

                List<TBL_CategoryMaster> model = (from n in this.dbCategory.Category
                                                  where n.CategoryName.ToLower().Trim() == ObjCategory.CategoryName && n.OrgId == OrgId
                                                  select n).ToList<TBL_CategoryMaster>();
                if (model.Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Category Name Already Exists";
                    return base.View(ObjCategory);
                }

                ObjCategory.CreatedDate = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString()));
                ObjCategory.CreatedBy = UId.ToString();

                this.dbCategory.Category.Add(ObjCategory);
                this.dbCategory.SaveChanges();

                base.TempData["messagealert"] = "Category Added Successfully";
                return base.RedirectToAction("CategoryMasterList");
            }
            catch (Exception)
            {
                return base.View(ObjCategory);
            }


        }

        /// <summary>
        /// Delete all selected category
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public string CategoryBulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                int bannerid = Convert.ToInt32(strArray[i].ToString());
                DataSet dt = objAccessDb.ExecuteDataSet("SMT_SP_Remove", strArray[i],1);
                  foreach (DataRow reader1 in dt.Tables[0].Rows)
                  {
                      string io = reader1["msg"].ToString();
                  }
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "1";
        }

        /// <summary>
        /// Get Method for edit the Category Details
        /// </summary>
        /// <param name="CategoryId"></param>
        /// <returns></returns>
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpGet]
        public ActionResult CategoryEdit(int CategoryId)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            TBL_CategoryMaster model = this.dbCategory.Category.SingleOrDefault<TBL_CategoryMaster>(n => n.CategoryId == CategoryId);
            int OrgId = (from m in this.dbCategory.Category where m.CategoryId == CategoryId select m.OrgId).FirstOrDefault();
            string OrgName = (from n in this.dbCategory.Organisation where n.OrgId == OrgId select n.OrganisationName).SingleOrDefault();
             if (UserId==1)
            {
               // OrgName = (from n in this.dbCategory.Organisation where n.OrgId == OrgId  select n.OrganisationName).SingleOrDefault();
                model.OrgName = OrgName;
            }
            else
            {
                ((dynamic)base.ViewBag).GetOrganizationName = OrgName;
            }

            base.TempData["currentgetidss"] = "Masters";
            return base.View(model);
        }

        /// <summary>
        /// Update the Category Details
        /// </summary>
        /// <param name="objCategory"></param>
        /// <returns></returns>
        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult CategoryEdit(TBL_CategoryMaster objCategory)
        {
            try
            {
                int UId = Convert.ToInt32(Session["USERID"].ToString());
                int OrgId = (from m in this.dbCategory.Category where m.CategoryId == objCategory.CategoryId select m.OrgId).FirstOrDefault();
                string OrgName = objCommon.GetOrganizartionNameFromID(OrgId);

                if (UId != 1)
                {
                    ((dynamic)base.ViewBag).GetOrganizationName = OrgName;
                    objCategory.OrgName = OrgName;
                }

                base.TempData["currentgetidss"] = "Masters";
               // if (base.ModelState.IsValid)
               //{
                    if ((from n in this.dbCategory.Category
                         where (n.CategoryId != objCategory.CategoryId) && (n.CategoryName.ToLower().Trim() == objCategory.CategoryName.ToLower().Trim()) && n.OrgId == OrgId
                         select n).ToList<TBL_CategoryMaster>().Count > 0)
                    {
                        ((dynamic)base.ViewBag).messagealert = "Category Name Already Exists";
                        return base.View(objCategory);
                    }
                    int Orgid = (from m in this.dbCategory.Organisation where m.OrganisationName.ToLower().Trim() == objCategory.OrgName.ToLower().Trim() select m.OrgId).SingleOrDefault();
                    if (Orgid == 0)
                    {
                        ((dynamic)base.ViewBag).messagealert = "Organization Name does not Exists";
                        return base.View(objCategory);
                    }
                    TBL_CategoryMaster Category = this.dbCategory.Category.SingleOrDefault<TBL_CategoryMaster>(n => n.CategoryId == objCategory.CategoryId);
                    Category.CategoryName = objCategory.CategoryName;
                    Category.Status = objCategory.Status;
                    Category.ModifiedBy = UId.ToString();
                    Category.ModifiedDate = new DateTime?(DateTime.Now);
                    Category.OrgName = "Test";
                    Category.OrgId = Orgid;
                    //  this.dbCategory.Category.Add(Category);
                    this.dbCategory.SaveChanges();
                    base.TempData["messagealert"] = " Category Updated Successfully";
                    return base.RedirectToAction("CategoryMasterList");
              // }
            }
            catch (DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                return base.View();
            }
            return base.View(objCategory);
        }


        /// <summary>
        /// Update The Status of Category
        /// </summary>
        /// <param name="status"></param>
        /// <param name="cimageid"></param>
        /// <returns></returns>
        public string UpdateStatus(string status, int cimageid)
        {
            TBL_CategoryMaster Result_Org = this.dbCategory.Category.SingleOrDefault<TBL_CategoryMaster>(n => n.CategoryId == cimageid);
            if (status == "true")
            {
                Result_Org.Status = false;
            }
            else
            {
                Result_Org.Status = true;
            }
            Result_Org.OrgName = "Test";
            this.dbCategory.SaveChanges();
            return "sucess";
        }


        /// <summary>
        /// To View the Category Details
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult CategoryView(int CategoryId)
        {
            base.TempData["currentgetidss"] = "Masters";
            TBL_CategoryMaster model = this.dbCategory.Category.SingleOrDefault<TBL_CategoryMaster>(n => n.CategoryId == CategoryId);
            model.OrgName = (from m in this.dbCategory.Organisation where m.OrgId == model.OrgId select m.OrganisationName).FirstOrDefault();
            return base.View(model);
        }

        /// <summary>
        /// AutoCompete For xcategory Name
        /// </summary>
        /// <param name="term"></param>
        /// <param name="org"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult CategoryNameAutoComplete(string term, string org)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;
             if (UserId==1)
            {
                OrgId = objCommon.GetOrgIdFromName(org);//   (from n in this.dbCategory.Organisation where n.OrganisationName == org select n.OrgId).SingleOrDefault();
            }
            else
            {
                OrgId = objCommon.GetOrgIdFromAdminId(UserId); //(from n in this.dbCategory.AdminLogin where n.USERID == UserId select n.OrgId).SingleOrDefault();
            }
            var CategoryNameList = (from m in this.dbCategory.Category where m.CategoryName.StartsWith(term) & m.Status == true & m.OrgId == OrgId select m.CategoryName).Take(10);
            return Json(CategoryNameList, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Bind for Category Names
        /// </summary>
        /// <param name="term"></param>
        /// <returns></returns>
        public SelectList GetCategoryNamelist()
        {
            return new SelectList(from m in
                                      (from m in this.dbCategory.Category
                                       where m.Status == true
                                       select m).AsEnumerable<TBL_CategoryMaster>()
                                  orderby m.CategoryName
                                  select new SelectListItem { Text = m.CategoryName, Value = m.CategoryId.ToString() }, "Value", "Text");
        }

        /// <summary>
        /// To Get Count of Sub Category for Selected Category
        /// </summary>
        /// <param name="Category"></param>
        /// <returns></returns>
        public JsonResult GetSubcategoryCount(string Category)
        {
            int count = 0;
            count = (from n in this.dbCategory.SubCategory
                     join m in this.dbCategory.Category on n.CategoryId equals m.CategoryId
                     where m.CategoryName.ToLower().Trim() == Category.ToLower().Trim()
                     select n).Count();
            return Json(count, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Cheeck Category Name
        /// </summary>
        /// <param name="OrgName"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult CheckCategoryName(string Category)
        {
            //base.TempData["currentgetidss"] = "Masters";           
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbCategory.AdminLogin where m.USERID == UserId && m.STATUS == true select m.OrgId).FirstOrDefault();
            int CategoryId = 0;
            if (UserId == 1)
            {
                CategoryId = (from n in this.dbCategory.Category where n.Status == true && n.CategoryName.ToLower().Trim() == Category.ToLower().Trim() select n.CategoryId).SingleOrDefault();
            }
            else
            {
                CategoryId = (from n in this.dbCategory.Category where n.Status == true && n.CategoryName.ToLower().Trim() == Category.ToLower().Trim() && n.OrgId==OrgId select n.CategoryId).SingleOrDefault();

            }
            if (CategoryId == 0)
            {
                return base.Json("Category does not Exists", JsonRequestBehavior.AllowGet);
            }
            return base.Json("1", JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Orgname"></param>
        /// <returns></returns>
        public JsonResult GetCategory(string Orgname)
        {
            int OrgId = 0;
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            if (UserId == 1)
            {
                OrgId = (from m in this.dbCategory.Organisation where m.OrganisationName.ToLower().Trim() == Orgname.ToLower().Trim() select m.OrgId).FirstOrDefault();
            }
            else
            {
                OrgId = (from m in this.dbCategory.AdminLogin where m.USERID == UserId select m.OrgId).SingleOrDefault();
            }

            SelectList CategoryList = this.getCategoryList(OrgId);
            return Json(CategoryList, JsonRequestBehavior.AllowGet);
        }


        /// <summary>
        /// Category Drop Downlist
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public SelectList getCategoryList(int id)
        {
            return new SelectList(from m in
                                      (from m in this.dbCategory.Category
                                       where (m.Status == true) && (m.OrgId == id)
                                       select m).AsEnumerable<TBL_CategoryMaster>()
                                  orderby m.CategoryName ascending
                                  select new SelectListItem { Text = m.CategoryName, Value = m.CategoryId.ToString() }, "Value", "Text");
        }

   

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Orgname"></param>
        /// <returns></returns>
        public JsonResult GetSubCategory(int CategoryId)
        {     
            SelectList SubCategoryList = this.getSubCategoryList(CategoryId);
            return Json(SubCategoryList, JsonRequestBehavior.AllowGet);
        }

        public SelectList getSubCategoryList(int CategoryId)
        {
            return new SelectList(from m in
                                      (from m in this.dbCategory.SubCategory
                                       where (m.Status == true) && (m.CategoryId == CategoryId)
                                       select m).AsEnumerable<TBL_SubCategoryMaster>()
                                  orderby m.SubCategoryName ascending
                                  select new SelectListItem { Text = m.SubCategoryName, Value = m.SubCategoryId.ToString() }, "Value", "Text");
        }

      
    }
    #endregion

    #region SubCategorymaster

    [AuthorizeUser]
    public class SubCategoryController : BaseController
    {
        private SmartLabourEntities dbSubCategory = new SmartLabourEntities();
        OrganizationSubAdminController objOrg = new OrganizationSubAdminController();
        private static string connString = ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ToString();
        private Database objAccessDb = new Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase(connString); 
        CommonClass objCommon = new CommonClass();
        CategoryController objCategory1 = new CategoryController();

        /// <summary>
        /// List of Sub Category
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult SubCategoryMasterList(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbSubCategory.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }

            List<TBL_SubCategoryMaster> source = new List<TBL_SubCategoryMaster>();
            if ((search != null) && (search != string.Empty))
            {
                var query = source;
                 if (UserId==1)
                {
                    query = (from n in this.dbSubCategory.SubCategory
                             select n).ToList();
                }
                else
                {
                    query = (from n in this.dbSubCategory.SubCategory
                             join m in this.dbSubCategory.Category on n.CategoryId equals m.CategoryId
                             where m.OrgId == OrgId
                             select n).ToList();

                }
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();

                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(query, "active", searchText);
                        break;
                    case "51":
                        source = Startswith(query, "inactive", searchText);
                        break;
                }
            }
            else
            {
                 if (UserId==1)
                {
                    source = this.dbSubCategory.SubCategory.ToList<TBL_SubCategoryMaster>();
                }
                else
                {
                    source = (from n in this.dbSubCategory.SubCategory
                              join m in this.dbSubCategory.Category on n.CategoryId equals m.CategoryId
                              where m.OrgId == OrgId
                              select n).ToList<TBL_SubCategoryMaster>();
                }
            }

            int num = source.Count<TBL_SubCategoryMaster>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            base.TempData["currentgetidss"] = "Masters";
            List<TBL_SubCategoryMaster> SubCategoryList = new List<TBL_SubCategoryMaster>();
            SubCategoryList = (from n in source
                            orderby n.SubCategoryId descending
                            select n).Skip<TBL_SubCategoryMaster>(count).Take<TBL_SubCategoryMaster>(10).ToList<TBL_SubCategoryMaster>();

            return base.View(SubCategoryList);
        }

        #region Search Options

        /// <summary>
        /// Search Method for word Starts  With
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_SubCategoryMaster> Startswith(List<TBL_SubCategoryMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.SubCategoryName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Category.CategoryName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.Category.Organizations.OrganisationName.ToLower().StartsWith(searchText.ToLower())).ToList();
            }



            else if (SearchBy == "active")
            {
                query = query.Where(n => n.Status == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.Status == false).ToList();
            }

            List<TBL_SubCategoryMaster> source = query.Select(x => x).ToList<TBL_SubCategoryMaster>();
            return source;
        }

        /// <summary>
        /// Search Method for word Equal to Search Value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_SubCategoryMaster> EqualTo(List<TBL_SubCategoryMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.SubCategoryName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Category.CategoryName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.Category.Organizations.OrganisationName.ToLower()==searchText.ToLower()).ToList();
            }

            List<TBL_SubCategoryMaster> source = query.Select(x => x).ToList<TBL_SubCategoryMaster>();
            return source;
        }

        /// <summary>
        /// Search Method for word Contains search word
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_SubCategoryMaster> Contains(List<TBL_SubCategoryMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.SubCategoryName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Category.CategoryName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.Category.Organizations.OrganisationName.ToLower().Contains(searchText.ToLower())).ToList();
            }

            List<TBL_SubCategoryMaster> source = query.Select(x => x).ToList<TBL_SubCategoryMaster>();
            return source;
        }

        #endregion

        /// <summary>
        /// Get Method for New Sub Category
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult SubCategoryAdd()
        {
            TBL_SubCategoryMaster ObjSubCategory = new TBL_SubCategoryMaster();
            int UId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;
           if (UId != 1)
            {
                OrgId = objCommon.GetOrgIdFromAdminId(UId); //(from m in this.dbSubCategory.AdminLogin where m.USERID == UId select m.OrgId).FirstOrDefault();
                ((dynamic)base.ViewBag).GetOrganizationName = objCommon.GetOrganizartionNameFromID(OrgId);// objOrg.GetOrganizationName(Oid);             
            }
           ((dynamic)base.ViewBag).CategoryList = objCategory1.getCategoryList(OrgId);
            ObjSubCategory.Status = true;
            base.TempData["currentgetidss"] = "Masters";
            return base.View(ObjSubCategory);
        }

        /// <summary>
        /// Post method to Add the New Organization
        /// </summary>
        /// <param name="Org"></param>
        /// <returns></returns>
        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult SubCategoryAdd(TBL_SubCategoryMaster ObjSubCategory)
        {
            try
            {
                int UId = Convert.ToInt32(Session["USERID"].ToString());
                int OrgId = 0;
                if (UId == 1)
                {
                    OrgId = (from n in this.dbSubCategory.Organisation where n.OrganisationName.ToLower().Trim() == ObjSubCategory.OrgName.ToLower().Trim() select n.OrgId).SingleOrDefault();
                }
                else
                {
                    OrgId = (from n in this.dbSubCategory.AdminLogin where n.USERID == UId select n.OrgId).SingleOrDefault();
                    ((dynamic)base.ViewBag).GetOrganizationName = (from n in this.dbSubCategory.Organisation where n.OrgId == OrgId select n.OrganisationName).SingleOrDefault();

                }
                //Addded For Sub Admin Privilege       
               
                //int CategoryId = (from m in this.dbSubCategory.Category where m.CategoryName.ToLower().Trim() == ObjSubCategory.CategoryName.ToLower().Trim() && m.OrgId == OrgId select m.CategoryId).FirstOrDefault();
                //if (CategoryId == 0)
                //{
                //    ((dynamic)base.ViewBag).messagealert = "Category Name does not Exists";
                //    return base.View(ObjSubCategory);
                //}
                ((dynamic)base.ViewBag).CategoryList = objCategory1.getCategoryList(OrgId);
               
                base.TempData["currentgetidss"] = "Masters";
                if (ObjSubCategory.SubCategoryName == string.Empty || ObjSubCategory.SubCategoryName == null || ObjSubCategory.CategoryId == 0)
                {
                    return View(ObjSubCategory);
                }
                List<TBL_SubCategoryMaster> model = (from n in this.dbSubCategory.SubCategory
                                                     where n.SubCategoryName.ToLower().Trim() == ObjSubCategory.SubCategoryName.ToLower().Trim() && n.CategoryId ==ObjSubCategory.CategoryId
                                                     select n).ToList<TBL_SubCategoryMaster>();
                if (model.Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "SubCategory Name Already Exists";
                    return base.View(ObjSubCategory);
                }

                ObjSubCategory.CreatedDate = new DateTime?(Convert.ToDateTime(DateTime.Now.ToString()));
                ObjSubCategory.CreatedBy = UId.ToString();

                this.dbSubCategory.SubCategory.Add(ObjSubCategory);
                this.dbSubCategory.SaveChanges();

                base.TempData["messagealert"] = "SubCategory Added Successfully";
                return base.RedirectToAction("SubCategoryMasterList");
            }
            catch (Exception)
            {
                return base.View(ObjSubCategory);
            }


        }

        /// <summary>
        /// Sub Category Bulk Delete
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public string SubCategoryBulkDelete(string id)
        {
            string[] strArray = id.Split(new char[] { ',' });
            for (int i = 0; i < (strArray.Length - 1); i++)
            {
                DataSet dt = objAccessDb.ExecuteDataSet("SMT_SP_Remove", strArray[i], 2);
                //int bannerid = Convert.ToInt32(strArray[i].ToString());
                //TBL_SubCategoryMaster entity = this.dbSubCategory.SubCategory.SingleOrDefault<TBL_SubCategoryMaster>(n => n.SubCategoryId == bannerid);
                //this.dbSubCategory.SubCategory.Remove(entity);
                //this.dbSubCategory.SaveChanges();
            }
            base.TempData["messagealert"] = "Record Deleted Successfully";
            return "1";
        }

        /// <summary>
        /// Get method for edit the subcategory
        /// </summary>
        /// <param name="SubCategoryId"></param>
        /// <returns></returns>
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None"), HttpGet]
        public ActionResult SubCategoryEdit(int SubCategoryId)
        {
            int OrgId = 0;
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            TBL_SubCategoryMaster model = this.dbSubCategory.SubCategory.SingleOrDefault<TBL_SubCategoryMaster>(n => n.SubCategoryId == SubCategoryId);
            //int CategoryId = (from m in this.dbSubCategory.SubCategory where m.SubCategoryId == SubCategoryId  select m.CategoryId).FirstOrDefault();
            //string Categoryname = (from m in this.dbSubCategory.Category where m.CategoryId == CategoryId && m.Status==true select m.CategoryName).FirstOrDefault();
            //model.CategoryName = Categoryname;
         

             if (UserId==1)
            {
                OrgId = (from n in this.dbSubCategory.Category
                         join m in this.dbSubCategory.SubCategory on n.CategoryId equals m.CategoryId
                         where m.SubCategoryId == SubCategoryId
                         select n.OrgId).FirstOrDefault();
                string OrgName = (from n in this.dbSubCategory.Category  join
                             m in this.dbSubCategory.Organisation on n.OrgId equals m.OrgId
                                  where n.CategoryId == model.CategoryId 
                             select m.OrganisationName).FirstOrDefault();
                model.OrgName = OrgName;
            }
            else
            {
                 OrgId = (from n in this.dbSubCategory.AdminLogin where n.USERID == UserId  select n.OrgId).SingleOrDefault();
                ((dynamic)base.ViewBag).GetOrganizationName = (from n in this.dbSubCategory.Organisation where n.OrgId == OrgId select n.OrganisationName).SingleOrDefault();
               // objCategory1.getCategoryList(OrgId);
            }
             ((dynamic)base.ViewBag).CategoryList = objCategory1.getCategoryList(OrgId);
            base.TempData["currentgetidss"] = "Masters";
            return base.View(model);
        }

        /// <summary>
        /// POst method for edit the subcategory
        /// </summary>
        /// <param name="objSubCategory"></param>
        /// <returns></returns>
        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult SubCategoryEdit(TBL_SubCategoryMaster objSubCategory)
        {
            base.TempData["currentgetidss"] = "Masters";
            int UId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;

       
            if (UId == 1)
            {
                OrgId = (from n in this.dbSubCategory.Organisation where n.OrganisationName.ToLower().Trim() == objSubCategory.OrgName.ToLower().Trim() select n.OrgId).SingleOrDefault();
            }
            else
            {
                OrgId = (from n in this.dbSubCategory.AdminLogin where n.USERID == UId select n.OrgId).SingleOrDefault();
                ((dynamic)base.ViewBag).GetOrganizationName = (from n in this.dbSubCategory.Organisation where n.OrgId == OrgId select n.OrganisationName).SingleOrDefault();
                
            }

            //int CategoryId = (from m in this.dbSubCategory.Category where m.CategoryName.ToLower().Trim() == objSubCategory.CategoryName.ToLower().Trim() && m.OrgId==OrgId select m.CategoryId).FirstOrDefault();
           
            //if (CategoryId == 0)
            //{
            //    ((dynamic)base.ViewBag).messagealert = "Category Name does not Exists";
            //    return base.View(objSubCategory);
            //}
            //objSubCategory.CategoryId = CategoryId;         
            ((dynamic)base.ViewBag).CategoryList = objCategory1.getCategoryList(OrgId);

            if (base.ModelState.IsValid)
            {
                if ((from n in this.dbSubCategory.SubCategory
                     where n.Status == true && (n.SubCategoryId != objSubCategory.SubCategoryId) && (n.SubCategoryName.ToLower().Trim() == objSubCategory.SubCategoryName.ToLower().Trim()) && n.CategoryId == objSubCategory.CategoryId
                     select n).ToList<TBL_SubCategoryMaster>().Count > 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Sub Category Name Already Exists";
                    return base.View(objSubCategory);
                }
                var SubCategoty = this.dbSubCategory.SubCategory.SingleOrDefault<TBL_SubCategoryMaster>(n => n.SubCategoryId == objSubCategory.SubCategoryId);
                SubCategoty.SubCategoryName = objSubCategory.SubCategoryName;
                SubCategoty.Status = objSubCategory.Status;
                SubCategoty.ModifiedBy = UId.ToString();
                SubCategoty.ModifiedDate = new DateTime?(DateTime.Now);
                SubCategoty.CategoryId = objSubCategory.CategoryId;
                SubCategoty.CategoryName = objSubCategory.CategoryName;
                this.dbSubCategory.Entry(SubCategoty).State = EntityState.Modified;
                this.dbSubCategory.SaveChanges();
                base.TempData["messagealert"] = "Sub Category Updated Successfully";
                return base.RedirectToAction("SubCategoryMasterList");
            }
            return base.View(objSubCategory);
        }

        ///// <summary>
        ///// Update The Status of Category
        ///// </summary>
        ///// <param name="status"></param>
        ///// <param name="cimageid"></param>
        ///// <returns></returns>
        public string UpdateStatus(string status, int cimageid)
        {
            try
            {
                TBL_SubCategoryMaster Result_Org = this.dbSubCategory.SubCategory.SingleOrDefault<TBL_SubCategoryMaster>(n => n.SubCategoryId == cimageid);
                if (status == "true")
                {
                    Result_Org.Status = false;
                }
                else
                {
                    Result_Org.Status = true;
                }
                Result_Org.CategoryName = "Test";
                this.dbSubCategory.Entry(Result_Org).State = EntityState.Modified;
                this.dbSubCategory.SaveChanges();
                return "sucess";
            }
            catch (DbEntityValidationException dbEx)
            {
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        Trace.TraceInformation(
                              "Class: {0}, Property: {1}, Error: {2}",
                              validationErrors.Entry.Entity.GetType().FullName,
                              validationError.PropertyName,
                              validationError.ErrorMessage);
                    }
                }
                return "";
            }
        }

        ///// <summary>
        ///// To View the Category Details
        ///// </summary>
        ///// <param name="Orgid"></param>
        ///// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult SubCategoryView(int SubCategoryId)
        {
            base.TempData["currentgetidss"] = "Masters";
            TBL_SubCategoryMaster model = this.dbSubCategory.SubCategory.SingleOrDefault<TBL_SubCategoryMaster>(n => n.SubCategoryId == SubCategoryId);
            model.CategoryName = (from m in this.dbSubCategory.Category where m.CategoryId == model.CategoryId select m.CategoryName).FirstOrDefault();
            return base.View(model);
        }

        /// <summary>
        /// SubCategory Name Autocomplete
        /// </summary>
        /// <param name="term"></param>
        /// <param name="Category"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult SubCategoryNameAutoComplete(string term, string Category)
        {
            int CategoryId = 0;
            CategoryId = (from n in this.dbSubCategory.Category where n.CategoryName == Category select n.CategoryId).FirstOrDefault();
            var SubCategoryNameList = (from m in this.dbSubCategory.SubCategory where m.SubCategoryName.StartsWith(term) & m.Status == true & m.CategoryId == CategoryId select m.SubCategoryName).Take(10);
            return Json(SubCategoryNameList, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Sub Category Auto Complete
        /// </summary>
        /// <param name="term"></param>
        /// <param name="Category"></param>
        /// <param name="OrgName"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult SubCategoryNameAutoComplete1(string term, string Category,string OrgName)
        {
            int Orgid = 0;
            int UId = Convert.ToInt32(Session["USERID"].ToString());
            if (UId == 1)
            {
                Orgid = (from m in this.dbSubCategory.Organisation where m.OrganisationName.ToLower().Trim() == OrgName.ToLower().Trim() select m.OrgId).FirstOrDefault();
            }
            else
            {
                Orgid = (from m in this.dbSubCategory.AdminLogin where m.USERID == UId select m.OrgId).FirstOrDefault();
            }

            int CategoryId = 0;
            CategoryId = (from n in this.dbSubCategory.Category where n.CategoryName == Category  && n.OrgId==Orgid  select n.CategoryId).FirstOrDefault();
            var SubCategoryNameList = (from m in this.dbSubCategory.SubCategory where m.SubCategoryName.StartsWith(term) & m.Status == true & m.CategoryId == CategoryId select m.SubCategoryName).Take(10);
            return Json(SubCategoryNameList, JsonRequestBehavior.AllowGet);
        }


    }

    #endregion

    #region Reward Points For Health and Safety

    [AuthorizeUser]
    public class RewardPointsController : BaseController
    {
        private static string connString = ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ToString();
        private Database objAccessDb = new Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase(connString); 
        private SmartLabourEntities dbReward = new SmartLabourEntities();
        OrganizationSubAdminController objOrg = new OrganizationSubAdminController();

        /// <summary>
        ///  Update the Reward Point value (Get Method)
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult UpdateRewardPoints()
        {
            TBL_RewardPointMaster objRewardPoint = new TBL_RewardPointMaster();
            objRewardPoint.RewardPointId = (from n in this.dbReward.RewardPoint select n.RewardPointId).SingleOrDefault();
            if (objRewardPoint.RewardPointId == 0)
            {
                objRewardPoint.RewardPoint = 0;
                this.dbReward.RewardPoint.Add(objRewardPoint);
                this.dbReward.SaveChanges();
                objRewardPoint.RewardPointId = (from n in this.dbReward.RewardPoint select n.RewardPointId).SingleOrDefault();
            }
            objRewardPoint.RewardPoint = (from n in this.dbReward.RewardPoint select n.RewardPoint).SingleOrDefault();
            base.TempData["currentgetidss"] = "LearnEarn";
            return View(objRewardPoint);
        }

        /// <summary>
        /// Update the Reward Point value (Post Method)
        /// </summary>
        /// <param name="ObjRewardPoints"></param>
        /// <returns></returns>
        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult UpdateRewardPoints(TBL_RewardPointMaster ObjRewardPoints)
        {
            if (ObjRewardPoints.RewardPoint == 0 || ObjRewardPoints.RewardPoint == null)
            {
                ((dynamic)base.ViewBag).messagealert = "Reward Point Cant be Empty";
                return base.View(ObjRewardPoints);
            }

            var RewarPoints = (from n in dbReward.RewardPoint where n.RewardPointId == 1 select n).SingleOrDefault();
            RewarPoints.RewardPoint = ObjRewardPoints.RewardPoint;
            this.dbReward.Entry(RewarPoints).State = EntityState.Modified;
            this.dbReward.SaveChanges();
            base.TempData["messagealert"] = "Reward Point Updated Successfully";
            base.TempData["currentgetidss"] = "LearnEarn";
            return base.RedirectToAction("LaboursRewardPointsList");

        }

        /// <summary>
        /// List the Cummulative Reward points
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult LaboursRewardPointsList(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"].ToString() != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<TBL_HealthAndSafety> source = new List<TBL_HealthAndSafety>();
            DataAccess ObjDa = new DataAccess();

            DataSet dt = objAccessDb.ExecuteDataSet("SMT_SP_HealthAndSafety", UserId, null, null, null, null, null, 3);
            //  DataTable dt = ObjDa.GetHealthAndSafetyList(UserId);
            foreach (DataRow reader in dt.Tables[0].Rows)
            {
                TBL_HealthAndSafety item = new TBL_HealthAndSafety();
                if (reader["LabourID"] != DBNull.Value)
                {
                    item.LabourID = reader["LabourID"].ToString();
                }
                item.OrgId = Convert.ToInt32(reader["OrgId"].ToString());// HS.LabourID,l.Name,l.OrgId,O.OrganisationName,sum(RewardPoint) as RewardPoints
                item.Name = reader["Name"].ToString();
                item.OrgName = reader["OrganisationName"].ToString();
                item.RewardPoint = Convert.ToInt32(reader["RewardPoints"].ToString());

                source.Add(item);
            }

            if ((search != null) && (search != string.Empty))
            {

                var query = source.ToList();
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":

                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;

                    case "50":
                        source = Startswith(query, "Greater", searchText);
                        break;

                    case "51":
                        source = Startswith(query, "Less", searchText);
                        break;

                    case "52":
                        source = Startswith(query, "Equal", searchText);
                        break;
                }
            }
            else
            {
                source = source.ToList<TBL_HealthAndSafety>();
            }


            int num = source.Count<TBL_HealthAndSafety>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            base.TempData["currentgetidss"] = "LearnEarn";

            return base.View(source.Skip<TBL_HealthAndSafety>(count).Take<TBL_HealthAndSafety>(10).ToList<TBL_HealthAndSafety>());
        }

        #region Search Options

        /// <summary>
        /// Search Method for word Starts  With
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_HealthAndSafety> Startswith(List<TBL_HealthAndSafety> query, string SearchBy, string searchText)
        {
            int Search = Convert.ToInt32(searchText);
            if (SearchBy == "1")
            {
                query = query.Where(n => n.LabourID.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Name.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.OrgName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "Greater")
            {
                query = query.Where(n => n.RewardPoint > Search).ToList();
            }
            else if (SearchBy == "Less")
            {
                query = query.Where(n => n.RewardPoint < Search).ToList();
            }
            else if (SearchBy == "Equal")
            {
                query = query.Where(n => n.RewardPoint == Search).ToList();
            }

            List<TBL_HealthAndSafety> source = query.Select(x => x).ToList<TBL_HealthAndSafety>();
            return source;
        }

        /// <summary>
        /// Search Method for word Equal to Search Value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_HealthAndSafety> EqualTo(List<TBL_HealthAndSafety> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.LabourID.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Name.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.OrgName.ToLower() == searchText).ToList();
            }


            List<TBL_HealthAndSafety> source = query.Select(x => x).ToList<TBL_HealthAndSafety>();
            return source;
        }

        /// <summary>
        /// Search Method for word Contains search word
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_HealthAndSafety> Contains(List<TBL_HealthAndSafety> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.LabourID.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Name.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.OrgName.ToLower().Contains(searchText)).ToList();
            }

            List<TBL_HealthAndSafety> source = query.Select(x => x).ToList<TBL_HealthAndSafety>();
            return source;
        }

        #endregion
    }



    #endregion  

    #region Notification Message Master

    /// <summary>
    /// Notification Message Master
    /// </summary>
    [AuthorizeUser]
    public class PushNotificationMessageMasterController : BaseController
    {
        private SmartLabourEntities dbEntities = new SmartLabourEntities();
        OrganizationSubAdminController objOrg = new OrganizationSubAdminController();
        CommonClass objCommon = new CommonClass();
        /// <summary>
        /// List The Push Message Master
        /// </summary>
        /// <param name="id"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        public ActionResult NotificationMessageList(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"].ToString() != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }

            List<TBL_PushNotficationMsg> source = new List<TBL_PushNotficationMsg>();
            if ((search != null) && (search != string.Empty))
            {
                var query = source;
                if (UserId==1)
                {
                    query = (from n in this.dbEntities.NotificationMessage
                             select n).ToList();
                }
                else
                {
                    query = (from n in this.dbEntities.NotificationMessage where n.OrgId==OrgId
                             select n).ToList();
                }
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();

                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(query, "active", searchText);
                        break;
                    case "51":
                        source = Startswith(query, "inactive", searchText);
                        break;
                }
            }
            else
            {
                 if (UserId==1)
                {
                    source = this.dbEntities.NotificationMessage.ToList<TBL_PushNotficationMsg>();
                }
                else
                {
                    source = (from n in this.dbEntities.NotificationMessage where n.OrgId == OrgId select n).ToList<TBL_PushNotficationMsg>();
                }
            }

            int num = source.Count<TBL_PushNotficationMsg>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            base.TempData["currentgetidss"] = "Masters";
            List<TBL_PushNotficationMsg> MsgList = new List<TBL_PushNotficationMsg>();
            MsgList = (from n in source
                       orderby n.MessageId descending
                       select n).Skip<TBL_PushNotficationMsg>(count).Take<TBL_PushNotficationMsg>(10).ToList<TBL_PushNotficationMsg>();

            return base.View(MsgList);
        }
        
        #region Search Options

        /// <summary>
        /// Search Options for field starts With
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_PushNotficationMsg> Startswith(List<TBL_PushNotficationMsg> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.PushMessage.ToLower().StartsWith(searchText)).ToList();             
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.MsgName.ToLower().StartsWith(searchText)).ToList();
            }
     
            else if (SearchBy == "active")
            {
                query = query.Where(n => n.Status == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.Status == false).ToList();
            }

            List<TBL_PushNotficationMsg> source = query.Select(x => x).ToList<TBL_PushNotficationMsg>();
            return source;
        }

        /// <summary>
        /// Search method for Equal to option
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_PushNotficationMsg> EqualTo(List<TBL_PushNotficationMsg> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.MsgName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.PushMessage.ToLower() == searchText).ToList();              
            }
          
            List<TBL_PushNotficationMsg> source = query.Select(x => x).ToList<TBL_PushNotficationMsg>();
            return source;
        }

        /// <summary>
        /// Search option for field Contains search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_PushNotficationMsg> Contains(List<TBL_PushNotficationMsg> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.MsgName.ToLower().Contains(searchText)).ToList();
            } 
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.PushMessage.ToLower().Contains(searchText)).ToList();               
            }          
            List<TBL_PushNotficationMsg> source = query.Select(x => x).ToList<TBL_PushNotficationMsg>();
            return source;
        }

        #endregion

        /// <summary>
        /// Get Method for Add New Message
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult NotificationMsgAdd()
        {
            TBL_PushNotficationMsg ObjMessage = new TBL_PushNotficationMsg();
            int UId = Convert.ToInt32(Session["USERID"].ToString());
           if (UId != 1)
            {
                int Oid = objCommon.GetOrgIdFromAdminId(UId);// (from m in this.dbEntities.AdminLogin where m.USERID == UId select m.OrgId).FirstOrDefault();
                ((dynamic)base.ViewBag).GetOrganizationName = objCommon.GetOrganizartionNameFromID(Oid); //objOrg.GetOrganizationName(Oid);
                ObjMessage.OrgId = Oid;
            }
            ObjMessage.Status = true;
            base.TempData["currentgetidss"] = "Masters";
            return base.View(ObjMessage);
        }

        /// <summary>
        /// Post method to Add the New Message
        /// </summary>
        /// <param name="Org"></param>
        /// <returns></returns>
        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult NotificationMsgAdd(TBL_PushNotficationMsg Msg)
        {
            try
            {            
            base.TempData["currentgetidss"] = "Masters";
            ((dynamic)base.ViewBag).messagealert = "";
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            Msg.CreatedDate = DateTime.Now;
            Msg.CreatedBy = Convert.ToString(Msg.OrgId);
            Msg.OrgId = OrgId;
            if(UserId==1)
            {                
                Msg.CreatedBy = Convert.ToString(OrgId);
                OrgId = (from n in this.dbEntities.Organisation where n.OrganisationName.ToLower().Trim() == Msg.OrgName.ToLower().Trim() select n.OrgId).SingleOrDefault();
                Msg.OrgId = OrgId;
            }     
            int msgId=(from n in this.dbEntities.NotificationMessage where n.MsgName.ToLower().Trim()==Msg.MsgName.ToLower().Trim() && n.OrgId==OrgId  select n.MessageId).SingleOrDefault();
            if (msgId>1)
                {
                    ((dynamic)base.ViewBag).messagealert = "Message Name Already Exists";
                    return base.View(Msg);
                }
            Msg.OrgName="Dummy";
            if (OrgId == 0)
            {
                ((dynamic)base.ViewBag).messagealert = "Organization Name does not Exists";
                return base.View(Msg);
            }         
            Msg.CreatedBy = "Admin";
            /* Deactivate All Other Messages */
            var Message1 = this.dbEntities.NotificationMessage.Where(n => n.OrgId == OrgId && Msg.Status==true ).ToList<TBL_PushNotficationMsg>();
            foreach (TBL_PushNotficationMsg items in Message1)
            {
                var Entitystate = this.dbEntities.NotificationMessage.Where(n => n.OrgId == items.OrgId && n.MessageId == items.MessageId).SingleOrDefault();
                items.Status = false;
                items.OrgName = "Dummy";
                dbEntities.Entry(Entitystate).State = EntityState.Modified;
                dbEntities.SaveChanges();
            }
            this.dbEntities.NotificationMessage.Add(Msg);    
            this.dbEntities.SaveChanges();
            base.TempData["messagealert"] = "Record Added Successfully";
            return base.RedirectToAction("NotificationMessageList");
                }
            catch (DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
            }
            return View(Msg);
        }

        /// <summary>
        /// Update The Status of Message
        /// </summary>
        /// <param name="status"></param>
        /// <param name="cimageid"></param>
        /// <returns></returns>
        public string UpdateStatus(string status, int cimageid)
        {
            TBL_PushNotficationMsg Result_Msg = this.dbEntities.NotificationMessage.SingleOrDefault<TBL_PushNotficationMsg>(n => n.MessageId == cimageid);
            if (status == "true")
            {
                Result_Msg.Status = false;
            }
            else
            {
                Result_Msg.Status = true;
            }
            Result_Msg.OrgName = "Dummy";
            this.dbEntities.SaveChanges();


            /* Deactivate All Other Messages */
            if (Result_Msg.Status)
            {
                int OrgId = (from m in this.dbEntities.NotificationMessage where m.MessageId == cimageid select m.OrgId).FirstOrDefault();
                var Message1 = this.dbEntities.NotificationMessage.Where(n => n.OrgId == OrgId && n.MessageId != cimageid).ToList<TBL_PushNotficationMsg>();
             //   Message1.ForEach(a => a.Status = true);
                foreach(TBL_PushNotficationMsg items in Message1)
                {
                    var Entitystate = this.dbEntities.NotificationMessage.Where(n => n.OrgId == items.OrgId && n.MessageId==items.MessageId).SingleOrDefault();
                    items.Status=false;
                    items.OrgName = "Dummy";
                    dbEntities.Entry(Entitystate).State = EntityState.Modified;
                    dbEntities.SaveChanges();
                }
          
               
               // dbEntities.SubmitChanges();

            }
           

            return "sucess";
        }

        /// <summary>
        /// Get Method for Edit Notification Measssages
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult NotificationMsgEdit(int MessageId = 0)
        {             
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;
            TBL_PushNotficationMsg model = this.dbEntities.NotificationMessage.SingleOrDefault<TBL_PushNotficationMsg>(n => n.MessageId == MessageId);
            OrgId = (from n in this.dbEntities.NotificationMessage where n.MessageId == MessageId select n.OrgId).SingleOrDefault();
            string OrgName = (from m in this.dbEntities.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();
             if (UserId==1)
            {
                model.OrgName = OrgName;
            }
            else
            {
                ((dynamic)base.ViewBag).GetOrganizationName = OrgName;
            }
            base.TempData["currentgetidss"] = "Masters";        
            model.MessageId  = Convert.ToInt32(MessageId);           
            return base.View(model);
        }

        /// <summary>
        /// Update the Edited Notification Measssages
        /// </summary>
        /// <param name="Orgid"></param>
        /// <param name="objOrgMaster"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult NotificationMsgEdit(TBL_PushNotficationMsg objMsgMaster)
        {
            try
            {

            
            int UId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbEntities.NotificationMessage where m.MessageId == objMsgMaster.MessageId select m.OrgId).FirstOrDefault();
            string OrgName = (from m in this.dbEntities.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();

           if (UId != 1)
            {
                ((dynamic)base.ViewBag).GetOrganizationName = OrgName;
                objMsgMaster.OrgName = OrgName;
            }

            base.TempData["currentgetidss"] = "Masters";
          //  if (base.ModelState.IsValid)
          //  {     
            int msgId = (from n in this.dbEntities.NotificationMessage where n.MessageId!=objMsgMaster.MessageId && n.MsgName.ToLower().Trim() == objMsgMaster.MsgName.ToLower().Trim() && n.OrgId == OrgId select n.MessageId).SingleOrDefault();
            if (msgId > 0)
            {
                if (msgId != objMsgMaster.MessageId)
                {
                    ((dynamic)base.ViewBag).messagealert = "Message Name Already Exists";
                    return base.View(objMsgMaster);
                }
                
            }
                int Orgid = (from m in this.dbEntities.Organisation where m.OrganisationName.ToLower().Trim() == objMsgMaster.OrgName.ToLower().Trim() select m.OrgId).FirstOrDefault();
                if (Orgid == 0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Organization Name does not Exists";
                    return base.View(objMsgMaster);
                }
                TBL_PushNotficationMsg Message = this.dbEntities.NotificationMessage.SingleOrDefault<TBL_PushNotficationMsg>(n => n.MessageId == objMsgMaster.MessageId);
                Message.PushMessage = objMsgMaster.PushMessage;
                Message.Status = objMsgMaster.Status;
                Message.MsgName = objMsgMaster.MsgName;
                Message.ModifiedBy = UId.ToString();
                Message.ModifiedDate = new DateTime?(DateTime.Now);
                Message.OrgName = "Test";
                Message.OrgId = Orgid;              
                this.dbEntities.SaveChanges();

                /* Deactivate All Other Messages */

                var Message1 = this.dbEntities.NotificationMessage.Where(n => n.OrgId == Orgid && n.MessageId != objMsgMaster.MessageId && Message.Status==true).ToList<TBL_PushNotficationMsg>();
                foreach (TBL_PushNotficationMsg items in Message1)
                {
                    var Entitystate = this.dbEntities.NotificationMessage.Where(n => n.OrgId == items.OrgId &&  n.MessageId==items.MessageId).SingleOrDefault();
                    items.Status = false;
                    items.OrgName = "Dummy";
                    dbEntities.Entry(Entitystate).State = EntityState.Modified;
                    dbEntities.SaveChanges();
                }

                base.TempData["messagealert"] = " Message Updated Successfully";
                return base.RedirectToAction("NotificationMessageList");
           // }
                }
            catch (DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
             }

            return base.View(objMsgMaster);
        }

        /// <summary>
        /// To View the Notification Measssages 
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult NotificationMsgView(int MessageId)
        {
            base.TempData["currentgetidss"] = "Masters";
            TBL_PushNotficationMsg model = this.dbEntities.NotificationMessage.SingleOrDefault<TBL_PushNotficationMsg>(n => n.MessageId == MessageId);
            int OrgId = (from n in this.dbEntities.NotificationMessage where n.MessageId == MessageId   select n.OrgId).SingleOrDefault();
            string OrgName = (from m in this.dbEntities.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();
            model.OrgName = OrgName;
            return base.View(model);
        }

        /// <summary>
        /// Remove the Notification Measssages
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        /// 
        [HttpGet]
        public JsonResult NotificationMsgDelete(string id)
        {
            try
            {
                int MessageId = 0;
                // string[] Orgid = id.Split(',');
                string[] Orgid = id.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string Id in Orgid)
                {
                    MessageId = Convert.ToInt32(Id);
                    TBL_PushNotficationMsg entity = this.dbEntities.NotificationMessage.SingleOrDefault<TBL_PushNotficationMsg>(n => n.MessageId == MessageId);
                    this.dbEntities.NotificationMessage.Remove(entity);
                    this.dbEntities.SaveChanges();
                    base.TempData["messagealert"] = "Record Deleted Successfully";
                }
                if (MessageId == 0)
                {
                    return base.Json("0", JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return base.Json("1", JsonRequestBehavior.AllowGet);
                }
            }
            catch
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// AutoComplete Method for Message Name
        /// </summary>
        /// <param name="term"></param>
        /// <param name="OrgName"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult MessageNameAutoComplete(string term, string OrgName)
        {
            int OrgId = objCommon.GetOrgIdFromName(OrgName);
            var GroupNameList = (from m in this.dbEntities.NotificationMessage where m.MsgName.StartsWith(term) & m.Status == true && m.OrgId == OrgId select m.MsgName).Take(10);
            return Json(GroupNameList, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Cheeck Organization Name
        /// </summary>
        /// <param name="OrgName"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult CheckMsgName(string MsgName, string OrgName)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            int MsgId = 0;
            if(UserId==1) {
                OrgId = (from n in this.dbEntities.Organisation where n.OrganisationName.ToLower().Trim() == OrgName.ToLower().Trim() select n.OrgId).SingleOrDefault();
                }
           else 
            {
                OrgId = (from n in this.dbEntities.AdminLogin where n.USERID == UserId select n.OrgId).SingleOrDefault();
            }
            MsgId = (from n in this.dbEntities.NotificationMessage where n.MsgName.ToLower().Trim() == MsgName.ToLower().Trim() && n.OrgId == OrgId && n.Status == true select n.MessageId).SingleOrDefault();              
            if (MsgId == 0)
            {
                return base.Json("Message Name does not Exists", JsonRequestBehavior.AllowGet);
            }
            return base.Json("1", JsonRequestBehavior.AllowGet);
        }
    }


    #endregion  

    #region Notification Message Group Master

    /// <summary>
    /// Notification Message Group MAster
    /// </summary>
    [AuthorizeUser]
    public class PushMessageGroupMasterController : BaseController
    {
        private SmartLabourEntities dbEntities = new SmartLabourEntities();
        OrganizationSubAdminController objOrg = new OrganizationSubAdminController();
        CommonClass objCommon = new CommonClass();

        /// <summary>
        /// List The Push Message group Master
        /// </summary>
        /// <param name="id"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        public ActionResult PushMessageGroupMasterList(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }

            List<TBL_NotificationGroupMaster> source = new List<TBL_NotificationGroupMaster>();
            if ((search != null) && (search != string.Empty))
            {
                var query = source;
                 if (UserId==1)
                {
                    query = (from n in this.dbEntities.NotificationGroupMaster
                             select n).ToList();
                }
                else
                {
                    query = (from n in this.dbEntities.NotificationGroupMaster
                             where n.OrgId == OrgId
                             select n).ToList();
                }
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();

                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(query, "active", searchText);
                        break;
                    case "51":
                        source = Startswith(query, "inactive", searchText);
                        break;
                }
            }
            else
            {
                 if (UserId==1)
                {
                    source =  this.dbEntities.NotificationGroupMaster.ToList<TBL_NotificationGroupMaster>();
                }
                else
                {
                    source = (from n in this.dbEntities.NotificationGroupMaster
                             where n.OrgId == OrgId
                              select n).ToList<TBL_NotificationGroupMaster>();
                }
            }

            int num = source.Count<TBL_NotificationGroupMaster>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            base.TempData["currentgetidss"] = "Masters";
            List<TBL_NotificationGroupMaster> MsgList = new List<TBL_NotificationGroupMaster>();
            MsgList = (from n in source
                       orderby n.GroupId descending
                       select n).Skip<TBL_NotificationGroupMaster>(count).Take<TBL_NotificationGroupMaster>(10).ToList<TBL_NotificationGroupMaster>();

            return base.View(MsgList);
        }

        #region Search Options

        /// <summary>
        /// Search Method for field Starts with Search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_NotificationGroupMaster> Startswith(List<TBL_NotificationGroupMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.GroupName.ToLower().StartsWith(searchText)).ToList();
            }       
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().StartsWith(searchText)).ToList();
            }

            else if (SearchBy == "active")
            {
                query = query.Where(n => n.Status == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.Status == false).ToList();
            }

            List<TBL_NotificationGroupMaster> source = query.Select(x => x).ToList<TBL_NotificationGroupMaster>();
            return source;
        }

        /// <summary>
        /// search Method for field Equal to a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_NotificationGroupMaster> EqualTo(List<TBL_NotificationGroupMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.GroupName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower() == searchText).ToList();
            }

            List<TBL_NotificationGroupMaster> source = query.Select(x => x).ToList<TBL_NotificationGroupMaster>();
            return source;
        }

        /// <summary>
        /// Search method for field Contains a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_NotificationGroupMaster> Contains(List<TBL_NotificationGroupMaster> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.GroupName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.Organizations.OrganisationName.ToLower().Contains(searchText)).ToList();
            }

            List<TBL_NotificationGroupMaster> source = query.Select(x => x).ToList<TBL_NotificationGroupMaster>();
            return source;
        }

        #endregion

        /// <summary>
        /// Get Method for Add New Message Group
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult PushMessageGroupMasterAdd()
        {
            TBL_NotificationGroupMaster ObjMessage = new TBL_NotificationGroupMaster();
            int UId = Convert.ToInt32(Session["USERID"].ToString());
           if (UId != 1)
            {
                int Oid = (from m in this.dbEntities.AdminLogin where m.USERID == UId select m.OrgId).FirstOrDefault();
                ((dynamic)base.ViewBag).GetOrganizationName = (from m in this.dbEntities.Organisation where m.OrgId == Oid select m.OrganisationName).FirstOrDefault();
                ObjMessage.OrgId = Oid;
            }
            ObjMessage.Status = true;
            base.TempData["currentgetidss"] = "Masters";
            return base.View(ObjMessage);
        }

        /// <summary>
        /// Post method to Add the New Message
        /// </summary>
        /// <param name="Org"></param>
        /// <returns></returns>
        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult PushMessageGroupMasterAdd(TBL_NotificationGroupMaster Msg)
        {
            base.TempData["currentgetidss"] = "Masters";
            ((dynamic)base.ViewBag).messagealert = "";
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            Msg.CreatedDate = DateTime.Now;
            Msg.CreatedBy = Convert.ToString(Msg.OrgId);
            Msg.OrgId = OrgId;
             if (UserId==1)
            {
                Msg.CreatedBy = Convert.ToString(OrgId);
                OrgId = (from n in this.dbEntities.Organisation where n.OrganisationName.ToLower().Trim() == Msg.OrgName.ToLower().Trim() select n.OrgId).SingleOrDefault();
                Msg.OrgId = OrgId;
            }
            if (OrgId == 0)
            {
                ((dynamic)base.ViewBag).messagealert = "Organization Name does not Exists";
                return base.View(Msg);
            }
            Msg.OrgName = "Dummy";
            Msg.CreatedBy = "";
            this.dbEntities.NotificationGroupMaster.Add(Msg);
            this.dbEntities.SaveChanges();
            base.TempData["messagealert"] = "Record Added Successfully";
            return base.RedirectToAction("PushMessageGroupMasterList");
        }

        /// <summary>
        /// Update The Status of Message Group
        /// </summary>
        /// <param name="status"></param>
        /// <param name="cimageid"></param>
        /// <returns></returns>
        public string UpdateStatus(string status, int cimageid)
        {
            TBL_NotificationGroupMaster Result_Msg = this.dbEntities.NotificationGroupMaster.SingleOrDefault<TBL_NotificationGroupMaster>(n => n.GroupId == cimageid);
            if (status == "true")
            {
                Result_Msg.Status = false;
            }
            else
            {
                Result_Msg.Status = true;
            }
            Result_Msg.OrgName = "Dummy";
            this.dbEntities.SaveChanges();
            return "sucess";
        }

        /// <summary>
        /// Get Method for Edit Notification Measssages
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult PushMessageGroupMasterEdit(int GroupId = 0)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;
            TBL_NotificationGroupMaster model = this.dbEntities.NotificationGroupMaster.SingleOrDefault<TBL_NotificationGroupMaster>(n => n.GroupId == GroupId);
            OrgId = (from n in this.dbEntities.NotificationGroupMaster where n.GroupId == GroupId select n.OrgId).SingleOrDefault();
            string OrgName = (from m in this.dbEntities.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();
             if (UserId==1)
            {
                model.OrgName = OrgName;
            }
            else
            {
                ((dynamic)base.ViewBag).GetOrganizationName = OrgName;
               
            }
            base.TempData["currentgetidss"] = "Masters";
            model.GroupId = Convert.ToInt32(GroupId);
            return base.View(model);
        }

        /// <summary>
        /// Update the Edited Notification Measssages Group
        /// </summary>
        /// <param name="Orgid"></param>
        /// <param name="objOrgMaster"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult PushMessageGroupMasterEdit(TBL_NotificationGroupMaster objMsgMaster)
        {
            try
            {
                base.TempData["currentgetidss"] = "Masters";
                int UId = Convert.ToInt32(Session["USERID"].ToString());
                ((dynamic)base.ViewBag).messagealert = "";
                int OrgId = (from m in this.dbEntities.NotificationGroupMaster where m.GroupId == objMsgMaster.GroupId select m.OrgId).FirstOrDefault();
              
                             
                if (UId == 1)
                {
                    OrgId = (from m in this.dbEntities.Organisation where m.OrganisationName.ToLower().Trim() == objMsgMaster.OrgName.ToLower().Trim() select m.OrgId).FirstOrDefault();
                    if (OrgId == 0)
                    {
                        ((dynamic)base.ViewBag).messagealert = "Organization Name does not Exists";
                        return base.View(objMsgMaster);
                    }
                }
                else if (UId > 1)
                {
                    string OrgName = (from m in this.dbEntities.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();
                    ((dynamic)base.ViewBag).GetOrganizationName = OrgName;
                }   

                
                TBL_NotificationGroupMaster Message = this.dbEntities.NotificationGroupMaster.SingleOrDefault<TBL_NotificationGroupMaster>(n => n.GroupId == objMsgMaster.GroupId);
                Message.GroupName = objMsgMaster.GroupName;
                Message.Status = objMsgMaster.Status;
                Message.ModifiedBy = UId.ToString();
                Message.ModifiedDate = new DateTime?(DateTime.Now);
                Message.OrgName = "Test";
                Message.OrgId = OrgId;
                this.dbEntities.SaveChanges();
                base.TempData["messagealert"] = " Group Updated Successfully";
                return base.RedirectToAction("PushMessageGroupMasterList");
            }
            catch (DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
            }         
            return base.View(objMsgMaster);
        }

        /// <summary>
        /// To View the Notification Measssages Group
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult PushMessageGroupMasterView(int GroupId)
        {
            base.TempData["currentgetidss"] = "Masters";
            TBL_NotificationGroupMaster model = this.dbEntities.NotificationGroupMaster.SingleOrDefault<TBL_NotificationGroupMaster>(n => n.GroupId == GroupId);
            int OrgId = (from n in this.dbEntities.NotificationGroupMaster where n.GroupId == GroupId select n.OrgId).SingleOrDefault();
            string OrgName = (from m in this.dbEntities.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();
            model.OrgName = OrgName;
            return base.View(model);
        }

        /// <summary>
        /// Remove the Notification Measssages
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        /// 
        [HttpGet]
        public JsonResult PushMessageGroupMasterDelete(string id)
        {           
                int GroupId = 0;             
                string[] Orgid = id.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string Id in Orgid)
                {
                    bool IsNumberType = objCommon.CheckIsNumeric(Id);
                    if (IsNumberType)
                    {
                        GroupId = Convert.ToInt32(Id);
                    }
                    TBL_NotificationGroupMaster entity = this.dbEntities.NotificationGroupMaster.SingleOrDefault<TBL_NotificationGroupMaster>(n => n.GroupId == GroupId);
                    this.dbEntities.NotificationGroupMaster.Remove(entity);
                    this.dbEntities.SaveChanges();
                    base.TempData["messagealert"] = "Record Deleted Successfully";
                }
                if (GroupId == 0)
                {
                    return base.Json("0", JsonRequestBehavior.AllowGet);

                }
                else
                {
                    return base.Json("1", JsonRequestBehavior.AllowGet);
                }          
        }

        /// <summary>
        /// GroupName AutoComplete
        /// </summary>
        /// <param name="term"></param>
        /// <param name="org"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult GroupNameAutoComplete(string term, string org)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;
             if (UserId==1)
            {
                OrgId = objCommon.GetOrgIdFromName(org);
            }
            else
            {
                OrgId = objCommon.GetOrgIdFromAdminId(UserId);
            }
            var GroupNameList = (from m in this.dbEntities.NotificationGroupMaster where m.GroupName.StartsWith(term) & m.Status == true & m.OrgId == OrgId select m.GroupName).Take(10);
            return Json(GroupNameList, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Cheeck Organization Name
        /// </summary>
        /// <param name="OrgName"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult CheckGroupName(string GroupName,string OrgName)
        {
            //base.TempData["currentgetidss"] = "Masters";
            ((dynamic)base.ViewBag).messagealert = "";
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
             if (UserId==1)
            {
                OrgId = (from n in this.dbEntities.Organisation  where n.OrganisationName.ToLower().Trim() == OrgName.ToLower().Trim()  select n.OrgId).SingleOrDefault();
            }
            else
            {
                OrgId = (from n in this.dbEntities.AdminLogin where n.USERID == UserId select n.OrgId).SingleOrDefault();
            }
             OrgId = (from n in this.dbEntities.NotificationGroupMaster where n.GroupName.ToLower().Trim() == GroupName.ToLower().Trim() && n.OrgId == OrgId select n.GroupId).SingleOrDefault();
            if (OrgId == 0)
            {
               // ((dynamic)base.ViewBag).messagealert = "Group Name does not Exists";
                //  return "Organization Name does not Exists";
                return base.Json("Group does not Exists", JsonRequestBehavior.AllowGet);
            }
            return base.Json("1", JsonRequestBehavior.AllowGet);
        }

    }

    #endregion

    #region Notification Message Group Member List

    /// <summary>
    /// Notification Message Group MAster
    /// </summary>
    [AuthorizeUser]
    public class PushMessageGroupMemberController : BaseController
    {
        private static string connString = ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ToString();
        private Database objAccessDb = new Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase(connString);
        private SmartLabourEntities dbEntities = new SmartLabourEntities();
        OrganizationSubAdminController objOrg = new OrganizationSubAdminController();
        CommonClass objCommon = new CommonClass();

        /// <summary>
        /// List The Push Message group Master
        /// </summary>
        /// <param name="id"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        public ActionResult PushMessageGroupMasterList(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"] != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }

            List<TBL_NotificationGroupMaster> source = new List<TBL_NotificationGroupMaster>();
            if ((search != null) && (search != string.Empty))
            {
                var query = source;
                 if (UserId==1)
                {
                    query = (from n in this.dbEntities.NotificationGroupMaster where n.Status==true
                             select n).ToList();
                }
                else
                {
                    query = (from n in this.dbEntities.NotificationGroupMaster
                             where n.OrgId == OrgId && n.Status == true
                             select n).ToList();
                }
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();
                PushMessageGroupMasterController objMasterC = new PushMessageGroupMasterController();
                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                       
                    case "1":
                        source = objMasterC.Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = objMasterC.EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = objMasterC.Contains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = objMasterC.Startswith(query, "active", searchText);
                        break;
                    case "51":
                        source = objMasterC.Startswith(query, "inactive", searchText);
                        break;
                }
            }
            else
            {
                 if (UserId==1)
                {
                    source = (from n in this.dbEntities.NotificationGroupMaster
                              where n.Status == true
                              select n).ToList<TBL_NotificationGroupMaster>();
                }
                else
                {
                    source = (from n in this.dbEntities.NotificationGroupMaster
                              where n.OrgId == OrgId && n.Status == true
                              select n).ToList<TBL_NotificationGroupMaster>();
                }
            }

            int num = source.Count<TBL_NotificationGroupMaster>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            base.TempData["currentgetidss"] = "Masters";
            List<TBL_NotificationGroupMaster> MsgList = new List<TBL_NotificationGroupMaster>();
            MsgList = (from n in source
                       orderby n.GroupId descending
                       select n).Skip<TBL_NotificationGroupMaster>(count).Take<TBL_NotificationGroupMaster>(10).ToList<TBL_NotificationGroupMaster>();

            return base.View(MsgList);
        }

        /// <summary>
        /// List The Push Message List of Group member
        /// </summary>
        /// <param name="id"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        public ActionResult PushMessageGroupMemberList(int? id, string search)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"].ToString() != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }
            List<TBL_NotificationGroupList> source = new List<TBL_NotificationGroupList>();
            var query=source;
            DataSet dt = objAccessDb.ExecuteDataSet("SMT_SP_GetPushGroupMember", UserId, null, null, null, null, 1);          
            foreach (DataRow reader in dt.Tables[0].Rows)
            {
                TBL_NotificationGroupList item = new TBL_NotificationGroupList();
                if (reader["LabourId"] != DBNull.Value)
                {
                    item.LabourId = reader["LabourId"].ToString();
                }
                item.LabourName = reader["LabourName"].ToString();
                item.OrgName = reader["OrganisationName"].ToString();
                item.GroupName = reader["GroupName"].ToString();
                item.GroupListId = 1;// Convert.ToInt32(reader["GroupListId"].ToString());
                query.Add(item);
            }
            if ((search != null) && (search != string.Empty))
            {
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();

                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(query, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(query, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(query, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(query, "active", searchText);
                        break;
                    case "51":
                        source = Startswith(query, "inactive", searchText);
                        break;
                }
            }
            else
            {
                source = query.ToList<TBL_NotificationGroupList>();              
            }

            int num = source.Count<TBL_NotificationGroupList>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            base.TempData["currentgetidss"] = "Masters";
            List<TBL_NotificationGroupList> MsgList = new List<TBL_NotificationGroupList>();
            MsgList = (from n in source
                       orderby n.GroupId descending
                       select n).Skip<TBL_NotificationGroupList>(count).Take<TBL_NotificationGroupList>(10).ToList<TBL_NotificationGroupList>();

            return base.View(MsgList);
        }

        #region Search Options

        /// <summary>
        /// Search Method for field Starts with Search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_NotificationGroupList> Startswith(List<TBL_NotificationGroupList> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.LabourId.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.LabourName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "3")
            {
                query = query.Where(n => n.OrgName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.GroupName.ToLower().StartsWith(searchText)).ToList();
            }

            List<TBL_NotificationGroupList> source = query.Select(x => x).ToList<TBL_NotificationGroupList>();
            return source;
        }

        
        /// <summary>
        /// search Method for field Equal to a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_NotificationGroupList> EqualTo(List<TBL_NotificationGroupList> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.LabourId.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.LabourName.ToLower() == searchText).ToList();
            }
            if (SearchBy == "3")
            {
                query = query.Where(n => n.OrgName.ToLower() == searchText).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.GroupName.ToLower() == searchText).ToList();
            }

            List<TBL_NotificationGroupList> source = query.Select(x => x).ToList<TBL_NotificationGroupList>();
            return source;
        }

        /// <summary>
        /// Search method for field Contains a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_NotificationGroupList> Contains(List<TBL_NotificationGroupList> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.LabourId.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => n.LabourName.ToLower().Contains(searchText)).ToList();
            }
            if (SearchBy == "3")
            {
                query = query.Where(n => n.OrgName.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "4")
            {
                query = query.Where(n => n.GroupName.ToLower().Contains(searchText)).ToList();
            }
            List<TBL_NotificationGroupList> source = query.Select(x => x).ToList<TBL_NotificationGroupList>();
            return source;
        }

        #endregion

        /// <summary>
        /// Get Method for Add New Message Group
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult PushMessageGroupMemberAdd()
        {
            TBL_NotificationGroupList ObjMessage = new TBL_NotificationGroupList();
            int UId = Convert.ToInt32(Session["USERID"].ToString());
           if (UId != 1)
            {
                int Oid = objCommon.GetOrgIdFromAdminId(UId);
                ((dynamic)base.ViewBag).GetOrganizationName = objCommon.GetOrganizartionNameFromID(Oid); 
            }           
            base.TempData["currentgetidss"] = "Masters";
            return base.View(ObjMessage);
        }

        /// <summary>
        /// Post method to Add the New Message
        /// </summary>
        /// <param name="Org"></param>
        /// <returns></returns>
        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult PushMessageGroupMemberAdd(TBL_NotificationGroupList ObjMembers)
        {
            base.TempData["currentgetidss"] = "Masters";
            ((dynamic)base.ViewBag).messagealert = "";
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = objCommon.GetOrgIdFromAdminId(UserId); 
            if (UserId==1)
            {
                OrgId = objCommon.GetOrgIdFromName(ObjMembers.OrgName);
            }
            if (OrgId == 0)
            {
                ((dynamic)base.ViewBag).messagealert = "Organization Name does not Exists";
                return base.View(ObjMembers);
            }
            int GroupId = 0;
            if (ObjMembers.GroupName!=string.Empty && ObjMembers.GroupName!=null)
            {
                GroupId = (from n in this.dbEntities.NotificationGroupMaster where n.GroupName.ToLower().Trim() == ObjMembers.GroupName.ToLower().Trim() && n.OrgId == OrgId && n.Status==true select n.GroupId).SingleOrDefault();
                ObjMembers.GroupId = GroupId;
                if (GroupId==0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Group Name Does Not Exists";
                    return View(ObjMembers);
                }
            }
            if (!ModelState.IsValid)
            {
                return View(ObjMembers);
            }
            int LUserid = (from n in this.dbEntities.Labours where n.LabourID == ObjMembers.LabourId && n.STATUS select n.UserID).SingleOrDefault();
            if (LUserid==0)
            {
                ((dynamic)base.ViewBag).messagealert = "Labour ID Does Exists in this Group";
                return View(ObjMembers);
            }

            int Check = (from n in this.dbEntities.NotificationGroupList where n.GroupId == GroupId && n.LabourId == ObjMembers.LabourId  select n.GroupId).SingleOrDefault();
            if (Check > 0 )
            {
                ((dynamic)base.ViewBag).messagealert = "Labour ID Already Not Exists in this Group";
                return View(ObjMembers);
            }
            this.dbEntities.NotificationGroupList.Add(ObjMembers);
            this.dbEntities.SaveChanges();
            base.TempData["messagealert"] = "Record Added Successfully";
            return base.RedirectToAction("PushMessageGroupMemberList");
        }

        /// <summary>
        /// Update The Status of Message Group List
        /// </summary>
        /// <param name="status"></param>
        /// <param name="cimageid"></param>
        /// <returns></returns>
        public string UpdateStatus(string status, int cimageid)
        {
            //TBL_NotificationGroupList Result_Msg = this.dbEntities.NotificationGroupList.SingleOrDefault<TBL_NotificationGroupList>(n => n.GroupListId == cimageid);
            //if (status == "true")
            //{
            //    Result_Msg.Status = false;
            //}
            //else
            //{
            //    Result_Msg.Status = true;
            //}
            //Result_Msg.OrgName = "Dummy";
            //this.dbEntities.SaveChanges();
            return "sucess";
        }

        /// <summary>
        /// Get Method for Edit Notification Measssages
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult PushMessageGroupMemberEdit(int GroupId = 0)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;
            TBL_NotificationGroupMaster model = this.dbEntities.NotificationGroupMaster.SingleOrDefault<TBL_NotificationGroupMaster>(n => n.GroupId == GroupId);
            OrgId = (from n in this.dbEntities.NotificationGroupMaster
                     where n.GroupId == GroupId                   
                     select n.OrgId).SingleOrDefault();
            string GroupName = (from m in this.dbEntities.NotificationGroupMaster
                                where m.GroupId == GroupId 
                                select m.GroupName).SingleOrDefault();
            string OrgName = (from m in this.dbEntities.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();
             if (UserId==1)
            {
                model.OrgName = OrgName;
            }
            else
            {
                ((dynamic)base.ViewBag).GetOrganizationName = OrgName;
            }
            base.TempData["currentgetidss"] = "Masters";
            model.GroupName = GroupName;
            model.GroupId = Convert.ToInt32(GroupId);
            return base.View(model);
        }

        /// <summary>
        /// Update the Edited Notification Measssages Group
        /// </summary>
        /// <param name="Orgid"></param>
        /// <param name="objOrgMaster"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult PushMessageGroupMemberEdit(TBL_NotificationGroupList ObjMembers)
        {
            base.TempData["currentgetidss"] = "Masters";
            ((dynamic)base.ViewBag).messagealert = "";
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = objCommon.GetOrgIdFromAdminId(UserId);//(from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
             if (UserId==1)
            {
                OrgId = objCommon.GetOrgIdFromName(ObjMembers.OrgName);                       
            }
            else
            {
                ((dynamic)base.ViewBag).GetOrganizationName = objCommon.GetOrganizartionNameFromID(OrgId);// (from m in this.dbEntities.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault(); 
                
            }
            if (OrgId == 0)
            {
                ((dynamic)base.ViewBag).messagealert = "Organization Name does not Exists";
                return base.View(ObjMembers);
            }
            int GroupId = 0;
            if (ObjMembers.GroupName != string.Empty && ObjMembers.GroupName != null)
            {
                GroupId = (from n in this.dbEntities.NotificationGroupMaster where n.GroupName.ToLower().Trim() == ObjMembers.GroupName.ToLower().Trim() && n.OrgId == OrgId && n.Status==true select n.GroupId).SingleOrDefault();
                ObjMembers.GroupId = GroupId;
                if (GroupId == 0)
                {

                    ((dynamic)base.ViewBag).messagealert = "Group Name Does Not Exists";
                    return View(ObjMembers);
                }
            }
            if (!ModelState.IsValid)
            {
                return View(ObjMembers);
            }
            int LUserid = (from n in this.dbEntities.Labours where n.LabourID == ObjMembers.LabourId && n.STATUS select n.UserID).SingleOrDefault();
            if (LUserid == 0)
            {
                ((dynamic)base.ViewBag).messagealert = "Labour ID Does Exists in this Group";
                return View(ObjMembers);
            }

                int Check = (from n in this.dbEntities.NotificationGroupList where n.GroupId == GroupId && n.LabourId == ObjMembers.LabourId select n.GroupId).SingleOrDefault();
                if (Check>0)
                {
                    ((dynamic)base.ViewBag).messagealert = "Labour ID Already Not Exists in this Group";
                    return View(ObjMembers);
                }
                TBL_NotificationGroupList Message = this.dbEntities.NotificationGroupList.SingleOrDefault<TBL_NotificationGroupList>(n => n.GroupListId == ObjMembers.GroupListId);                             
                Message.GroupName = "Test";
                Message.LabourId = ObjMembers.LabourId;
                Message.GroupId = ObjMembers.GroupId;
                this.dbEntities.SaveChanges();
                base.TempData["messagealert"] = " Group Member Details Updated Successfully";
                return base.RedirectToAction("PushMessageGroupMemberList");         
        }

        /// <summary>
        /// To View the Notification Measssages Group
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult PushMessageGroupMemberView(int GroupListId)
        {
            base.TempData["currentgetidss"] = "Masters";
            TBL_NotificationGroupList model = this.dbEntities.NotificationGroupList.SingleOrDefault<TBL_NotificationGroupList>(n => n.GroupListId == GroupListId);
            int OrgId = (from n in this.dbEntities.NotificationGroupMaster where n.GroupId == GroupListId select n.OrgId).SingleOrDefault();
            string OrgName = (from m in this.dbEntities.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();
            model.OrgName = OrgName;
            return base.View(model);
        }

        /// <summary>
        /// Remove the Notification Measssages
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        /// 
        [HttpGet]
        public JsonResult PushMessageGroupMemberDelete(string id)
        {
            int GroupListId = 0;
            string[] Orgid = id.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (string Id in Orgid)
            {
                bool IsNumberType = objCommon.CheckIsNumeric(Id);
                if (IsNumberType)
                {
                    GroupListId = Convert.ToInt32(Id);
                }
                TBL_NotificationGroupList entity = this.dbEntities.NotificationGroupList.SingleOrDefault<TBL_NotificationGroupList>(n => n.GroupListId == GroupListId);
                this.dbEntities.NotificationGroupList.Remove(entity);
                this.dbEntities.SaveChanges();
                base.TempData["messagealert"] = "Record Deleted Successfully";
            }
            if (GroupListId == 0)
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);

            }
            else
            {
                return base.Json("1", JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// Grid for Load Grup and Non Group member list
        /// </summary>
        /// <param name="GroupId"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult NonGroupMemberList(string GroupId,string OrgName)
        {
            List<Labour> source = new List<Labour>();
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;
            if(UserId==1)
            {
                OrgId=(from n in this.dbEntities.Organisation where n.OrganisationName.ToLower().Trim()==OrgName.ToLower().Trim() select n.OrgId).SingleOrDefault();
            }
            else
            {
               OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            }

            int GroupID = (from m in this.dbEntities.NotificationGroupMaster where m.GroupName.ToLower().Trim() == GroupId.ToLower().Trim() && m.OrgId == OrgId select m.GroupId).FirstOrDefault();
            if(GroupID==0)
            {
                return PartialView("GroupMembersList", source.ToList<Labour>());
            }
            OrgId = (from m in this.dbEntities.NotificationGroupMaster where m.GroupId == GroupID select m.OrgId).FirstOrDefault();
            DataSet dt = objAccessDb.ExecuteDataSet("SMT_SP_GetGroupMemberDetails", UserId, OrgId, GroupID, 1);
          
            foreach (DataRow reader in dt.Tables[0].Rows)
            {
                Labour item = new Labour();
                if (reader["LabourID"] != DBNull.Value)
                {
                    item.LabourID = reader["LabourID"].ToString();
                }              
                item.Name = reader["Name"].ToString();
                item.OrgName = reader["OrgName"].ToString();
                item.UserID = Convert.ToInt32(reader["UserID"].ToString());
                source.Add(item);
            }         
            return PartialView("GroupMembersList", source.ToList<Labour>());
        }

        /// <summary>
        ///Update the Message Group Master
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        /// 
        [HttpGet]
        public JsonResult UpdateGroupMaster(string id, string GroupId, string OrgName)
        {
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;
            if (UserId == 1)
            {
                OrgId = (from n in this.dbEntities.Organisation where n.OrganisationName.ToLower().Trim() == OrgName.ToLower().Trim() select n.OrgId).SingleOrDefault();
            }
            else
            {
                OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            }
                int GroupID = 0;     
                GroupID = (from m in this.dbEntities.NotificationGroupMaster where m.GroupName.ToLower().Trim() == GroupId.ToLower().Trim() && m.Status==true && m.OrgId==OrgId select m.GroupId).FirstOrDefault();
                if (GroupID == 0)
                {
                    return base.Json("0", JsonRequestBehavior.AllowGet);
                }
                TBL_NotificationGroupMaster entity = this.dbEntities.NotificationGroupMaster.SingleOrDefault<TBL_NotificationGroupMaster>(n => n.GroupId == GroupID);
                entity.Members = id;           
                this.dbEntities.SaveChanges();
                base.TempData["messagealert"] = "Record Add Successfully";   
                return base.Json("1", JsonRequestBehavior.AllowGet);          
        }

        /// <summary>
        /// Get method for send notification message PAge
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult SendPushMessage()
        {
            TBL_NotificationGroupMaster objGM = new TBL_NotificationGroupMaster();
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;           
            if (UserId!=1)
            {
                OrgId = (from n in this.dbEntities.AdminLogin where n.USERID == UserId select n.OrgId).SingleOrDefault();
                string OrgName = (from m in this.dbEntities.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();
               //((dynamic)base.ViewBag).GetOrganizationName = OrgName;
               objGM.OrgName = OrgName;
            }
            base.TempData["currentgetidss"] = "Masters";
            return base.View(objGM);
        }

        /// <summary>
        /// Send Notification to Selected Organization Groups
        /// </summary>
        /// <param name="objGM"></param>
        /// <returns></returns>
        [HttpPost]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult SendPushMessage(TBL_NotificationGroupMaster objGM)
        {
            try
            {            
             base.TempData["currentgetidss"] = "Masters";
             int UserId = Convert.ToInt32(Session["USERID"].ToString());
                int OrgId = 0;
                int GroupId = 0;
                if (UserId == 1)
                {
                  OrgId=(from n in this.dbEntities.Organisation where n.OrganisationName.ToLower().Trim()==objGM.OrgName.ToLower().Trim() select n.OrgId).SingleOrDefault();
                }
                else
                {
                    OrgId = (from n in this.dbEntities.AdminLogin where n.USERID == UserId select n.OrgId).SingleOrDefault();
                    string OrgName = (from m in this.dbEntities.Organisation where m.OrgId == OrgId select m.OrganisationName).FirstOrDefault();
                    ((dynamic)base.ViewBag).GetOrganizationName = OrgName;
                }
                GroupId = (from n in this.dbEntities.NotificationGroupMaster where n.GroupName.ToLower().Trim() == objGM.GroupName.ToLower().Trim() && n.OrgId == OrgId select n.GroupId).SingleOrDefault();
                string Members = (from n in this.dbEntities.NotificationGroupMaster where n.GroupId == GroupId select n.Members).SingleOrDefault();
                if (Members != string.Empty && Members != "0" && Members != null)
                {
                    string[] UserIdArray = Members.Split(',');
                    int TempId = 0;
                    string Email = string.Empty;
                    foreach (string labourId in UserIdArray)
                    {
                        if (objCommon.CheckIsNumeric(labourId))
                        {
                            TempId = Convert.ToInt32(labourId);
                            Email = (from n in this.dbEntities.Labours where n.UserID == TempId && n.STATUS == true select n.EmailID).SingleOrDefault();
                            string Message = (from n in this.dbEntities.NotificationMessage where n.Status==true && n.OrgId == OrgId select n.PushMessage).SingleOrDefault();
                            objCommon.SendingMail(Email, "Smart Labour - Push Message", Email, "", "", Message);

                            string notificationMsg = Message;
                            var labourDetails = this.dbEntities.Labours.SingleOrDefault<Labour>(n => n.UserID == TempId);
                            if (labourDetails!=null)
                            {
                                if ((labourDetails.DeviceToken != null) && (labourDetails.DeviceType == "Android"))
                                {
                                    string deviceToken = labourDetails.DeviceToken;
                                    string str2 = "AIzaSyCDuLpL_40YdjlU7BkBbMc9Cr5n4PuRCig";
                                    WebRequest request = WebRequest.Create("https://gcm-http.googleapis.com/gcm/send");
                                    request.Method = "post";
                                    request.ContentType = " application/x-www-form-urlencoded;charset=UTF-8";
                                    request.Headers.Add(string.Format("Authorization: key={0}", str2));
                                    string str5 = string.Concat(new object[] { "collapse_key=Updates Available&data.message=", notificationMsg, "&data.title=\"smartLabours\"&data.notId=", DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Millisecond, "&data.time=", DateTime.Now.ToString(), "&to=", deviceToken });
                                    Console.WriteLine(str5);
                                    byte[] bytes = Encoding.UTF8.GetBytes(str5);
                                    request.ContentLength = bytes.Length;
                                    Stream requestStream = request.GetRequestStream();
                                    requestStream.Write(bytes, 0, bytes.Length);
                                    requestStream.Close();
                                    WebResponse response = request.GetResponse();
                                    requestStream = response.GetResponseStream();
                                    StreamReader reader = new StreamReader(requestStream);
                                    string str6 = reader.ReadToEnd();
                                    reader.Close();
                                    requestStream.Close();
                                    response.Close();
                                }
                                else if ((labourDetails.DeviceToken != null) && (labourDetails.DeviceType == "iOS"))
                                {
                                    string deviceToken = labourDetails.DeviceToken;
                                    sendAppleNotification(deviceToken, notificationMsg);
                                }
                            }                           
                            ((dynamic)base.ViewBag).messagealert1 = "Mail Sent Successfully.";
                            }
                    }
                    return View();
                }
                return View();
            }
            catch(Exception)
            {
                ((dynamic)base.ViewBag).messagealert1 = "Mail Not Sent.";
                return View();

            }              
       }
    }

    #endregion

    #region Reports

    /// <summary>
    /// Controller for a Reports Methods
    /// </summary>
    [AuthorizeUser]
    [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
    public class ReportsController : BaseController
    {
        private static string connString = ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ToString();
        private Database objAccessDb = new Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase(connString);
        private SmartLabourEntities dbEntities = new SmartLabourEntities();
        OrganizationSubAdminController objOrg = new OrganizationSubAdminController();      
        CommonClass objCommon = new CommonClass();

        /// <summary>
        /// Method for return a Reports in Partial View
        /// </summary>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult ReportsList(int? id, string search)
        {
           // int UserId = Convert.ToInt32(Session["USERID"].ToString());
            //int OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            return View(new View());
        }

        /// <summary>
        /// Ajax Method for Generate a reports
        /// </summary>
        /// <param name="OrgName"></param>
        /// <param name="Report"></param>
        /// <param name="id"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ReportGenerate(string OrgName, string Report, int? id, string search)
        {
            if (!id.HasValue)
            {
                id = 1;
            }
            List<ReportModel> source = new List<ReportModel>();
            string ViewName=string.Empty;
          //  ReportModel ObjReport = new ReportModel();
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;
             if (UserId==1)
            {
             OrgId = (from n in this.dbEntities.Organisation where n.OrganisationName.ToLower().Trim() == OrgName.ToLower().Trim() select n.OrgId).SingleOrDefault();
              //  OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            }
            else
            {
                OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            }
            if (OrgId == 0)
            {

            }
            else
            {
                DataSet dt = objAccessDb.ExecuteDataSet("SMT_SP_CourseReports", UserId, OrgId, null, Report);
                source=CommonReportSearch(Report,dt,search);
                ViewName=FindReportName(Report);

                int num = source.Count<ReportModel>();
                int num2 = 0;
                if ((num % 10) == 0)
                {
                    num2 = num / 10;
                }
                else
                {
                    num2 = (num / 10) + 1;
                }
                if ((search != null) && (search != string.Empty))
                {
                    base.ViewData["SearchText"] = search;
                    if (num2 < id)
                    {
                        id = 1;
                    }
                }
                else
                {
                    base.ViewData["SearchText"] = "";
                }
                ((dynamic)base.ViewBag).totalnumber = num2;
                ((dynamic)base.ViewBag).TotalRecordcount = num;
                ((dynamic)base.ViewBag).CurrentPage = id;
                int count = (Convert.ToInt32(id) * 10) - 10;
            }
            return PartialView(ViewName, source.ToList<ReportModel>());   //source.ToList<Labour>()

        }

        /// <summary>
        /// To Find name Of report 
        /// </summary>
        /// <param name="Report"></param>
        /// <returns></returns>
        public string FindReportName(string Report)
        {
            string ViewName=string.Empty;
             if (Report == "1")
                {
                    ViewName = "CourseStarted";
                }
                else if(Report == "2")
                {
                    ViewName = "CourseCompleted";
                }
                else if(Report=="3")
                {
                     ViewName = "CourseWiseReport";
                }
                else if(Report=="4")
                {
                      ViewName = "TestDetailsReport";
                }

            return ViewName;

        }

        #region Bind Reports Data

        /// <summary>
        ///  Bind Values to Caourse started and Completed reports
        /// </summary>
        /// <param name="dt"></param>
        /// <returns></returns>
        private List<ReportModel> CourseStartAndComplete(DataSet dt)
        {
             List<ReportModel> source = new List<ReportModel>();
            foreach (DataRow reader in dt.Tables[0].Rows)
            {
                ReportModel item = new ReportModel();
                if (reader["LabourID"] != DBNull.Value)
                {
                    item.LabourId = reader["LabourID"].ToString();
                }
                item.LabourName = reader["Name"].ToString();
                item.CourseName = reader["CourseName"].ToString();  //CourseTypeName
                item.CourseTypeName = reader["CourseTypeName"].ToString();
                item.OrgName = reader["OrganisationName"].ToString();
                source.Add(item);
            }
            return source;
        }

        /// <summary>
        /// Bind Values to Course Wise Reports
        /// </summary>
        /// <param name="dt"></param>
        /// <returns></returns>
        private List<ReportModel> CourseWiseReport(DataSet dt)
        {
            List<ReportModel> source = new List<ReportModel>();
            foreach (DataRow reader in dt.Tables[0].Rows)
            {
                ReportModel item = new ReportModel();
                item.CourseAttended = reader["CourseAttendantedLabours"].ToString();
                item.CourseId = reader["CourseID"].ToString();
                item.CourseName = reader["CourseName"].ToString();
                item.OrgName = reader["OrganisationName"].ToString();
                source.Add(item);
               // 
            }
            return source;
        }

        /// <summary>
        /// Bind Values to Test Result Report
        /// </summary>
        /// <param name="dt"></param>
        /// <returns></returns>
        private List<ReportModel> TestResultReport(DataSet dt)
        {
            List<ReportModel> source = new List<ReportModel>();
            foreach (DataRow reader in dt.Tables[0].Rows)
            {
                ReportModel item = new ReportModel();
                item.LabourId = reader["LabourID"].ToString();
                item.LabourName = reader["Name"].ToString();
                item.Email = reader["EmailID"].ToString();
                item.CourseName = reader["CourseName"].ToString();
                item.AnswerCorrect = reader["AnswerCorrect"].ToString();
                item.TotalCredit = reader["TotalCreditPoints"].ToString();
                item.OrgName = reader["OrganisationName"].ToString();
                source.Add(item);               
            }
            return source;
        }

        #endregion

        #region Call Serach Methods 

        /// <summary>
        /// Search Method for All reports
        /// </summary>
        /// <param name="Report"></param>
        /// <param name="dt"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        public List<ReportModel> CommonReportSearch(string Report,DataSet dt,string search)
        {
             List<ReportModel> source=new List<ReportModel>();
            if (Report == "1" || Report == "2")
            {
                source = CourseStartAndComplete(dt);
            
                if ((search != null) && (search != string.Empty))
                {
                    string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                    string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();

                    switch (search.Split(new char[] { ',' })[1].Trim())
                    {
                        case "1":
                            source = R1Startswith(source, searchBy, searchText);
                            break;

                        case "2":
                            source = R1EqualTo(source, searchBy, searchText);
                            break;

                        case "3":
                            source = R1Contains(source, searchBy, searchText);
                            break;
                    }
                }
            }
            else if (Report == "3")
            {
                source = CourseWiseReport(dt);
               
                if ((search != null) && (search != string.Empty))
                {
                    string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                    string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();

                    switch (search.Split(new char[] { ',' })[1].Trim())
                    {
                        case "1":
                            source = R2Startswith(source, searchBy, searchText);
                            break;

                        case "2":
                            source = R2EqualTo(source, searchBy, searchText);
                            break;

                        case "3":
                            source = R2Contains(source, searchBy, searchText);
                            break;
                    }
                }
            }
            else if (Report == "4")
            {
                source = TestResultReport(dt);
              
                if ((search != null) && (search != string.Empty))
                {
                    string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                    string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();

                    switch (search.Split(new char[] { ',' })[1].Trim())
                    {
                        case "1":
                            source = R3Startswith(source, searchBy, searchText);
                            break;

                        case "2":
                            source = R3EqualTo(source, searchBy, searchText);
                            break;

                        case "3":
                            source = R3Contains(source, searchBy, searchText);
                            break;
                    }
                }
            }

            return source.ToList<ReportModel>();
        }

        #endregion

        #region  Reports Search Functions

        /* Course Completetion  and StartedReport Search */
        /// <summary>
        /// Search method for field Contains a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        private List<ReportModel> R1Contains(List<ReportModel> query, string searchBy, string searchText)
        {
            if (searchBy == "1")
            {
                query = query.Where(n => n.LabourId.ToLower().Contains(searchText)).ToList();
            }
            else if (searchBy == "2")
            {
                query = query.Where(n => n.LabourName.ToLower().Contains(searchText)).ToList();
            }
            else if (searchBy == "3")
            {
                query = query.Where(n => n.CourseName.ToLower().Contains(searchText)).ToList();
            }
            else if (searchBy == "4")
            {
                query = query.Where(n => n.CourseTypeName.ToLower().Contains(searchText)).ToList();
            }          
            List<ReportModel> source = query.Select(x => x).ToList<ReportModel>();
            return source;
        }


        /// <summary>
        /// search Method for field Equal to a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns
        private List<ReportModel> R1EqualTo(List<ReportModel> query, string searchBy, string searchText)
        {
            if (searchBy == "1")
            {
                query = query.Where(n => n.LabourId.ToLower() == searchText).ToList();
            }
            else if (searchBy == "2")
            {
                query = query.Where(n => n.LabourName.ToLower() == searchText).ToList();
            }
            else if (searchBy == "3")
            {
                query = query.Where(n => n.CourseName.ToLower() == searchText).ToList();
            }
            else if (searchBy == "4")
            {
                query = query.Where(n => n.CourseTypeName.ToLower() == searchText).ToList();
            }
           
            List<ReportModel> source = query.Select(x => x).ToList<ReportModel>();
            return source;
        }


        /// <summary>
        /// Search Method for field Starts with Search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        private List<ReportModel> R1Startswith(List<ReportModel> query, string searchBy, string searchText)
        {
            if (searchBy == "1")
            {
                query = query.Where(n => n.LabourId.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "2")
            {
                query = query.Where(n => n.LabourName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "3")
            {
                query = query.Where(n => n.CourseName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "4")
            {
                query = query.Where(n => n.CourseTypeName.ToLower().StartsWith(searchText)).ToList();
            }
                     
            List<ReportModel> source = query.Select(x => x).ToList<ReportModel>();
            return source;
        }


        /* Course Wise Report Search */
        /// <summary>
        /// Search method for field Contains a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        private List<ReportModel> R2Contains(List<ReportModel> query, string searchBy, string searchText)
        {

            if (searchBy == "1")
            {
                query = query.Where(n => n.CourseAttended.ToLower().Contains(searchText)).ToList();
            }
            else if (searchBy == "2")
            {
                query = query.Where(n => n.CourseId.ToLower().Contains(searchText)).ToList();
            }
            else if (searchBy == "3")
            {
                query = query.Where(n => n.CourseName.ToLower().Contains(searchText)).ToList();
            }
            else if (searchBy == "4")
            {
                query = query.Where(n => n.OrgName.ToLower().Contains(searchText)).ToList();
            }

          
            List<ReportModel> source = query.Select(x => x).ToList<ReportModel>();
            return source;
        }


        /// <summary>
        /// search Method for field Equal to a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns
        private List<ReportModel> R2EqualTo(List<ReportModel> query, string searchBy, string searchText)
        {
            if (searchBy == "1")
            {
                query = query.Where(n => n.CourseAttended.ToLower() == searchText).ToList();
            }
            else if (searchBy == "2")
            {
                query = query.Where(n => n.CourseId.ToLower() == searchText).ToList();
            }
            else if (searchBy == "3")
            {
                query = query.Where(n => n.CourseName.ToLower() == searchText).ToList();
            }
            else if (searchBy == "4")
            {
                query = query.Where(n => n.OrgName.ToLower() == searchText).ToList();
            }
          
            List<ReportModel> source = query.Select(x => x).ToList<ReportModel>();
            return source;
        }


        /// <summary>
        /// Search Method for field Starts with Search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        private List<ReportModel> R2Startswith(List<ReportModel> query, string searchBy, string searchText)
        {
            if (searchBy == "1")
            {
                query = query.Where(n => n.CourseAttended.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "2")
            {
                query = query.Where(n => n.CourseId.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "3")
            {
                query = query.Where(n => n.CourseName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "4")
            {
                query = query.Where(n => n.OrgName.ToLower().StartsWith(searchText)).ToList();
            }

           
            List<ReportModel> source = query.Select(x => x).ToList<ReportModel>();
            return source;

        }


        /* Course Test Results Report Search */
        /// <summary>
        /// Search method for field Contains a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        private List<ReportModel> R3Contains(List<ReportModel> query, string searchBy, string searchText)
        {


            if (searchBy == "1")
            {
                query = query.Where(n => n.LabourId.ToLower().Contains(searchText)).ToList();
            }
            else if (searchBy == "2")
            {
                query = query.Where(n => n.LabourName.ToLower().Contains(searchText)).ToList();
            }
            else if (searchBy == "3")
            {
                query = query.Where(n => n.Email.ToLower().Contains(searchText)).ToList();
            }

            else if (searchBy == "4")
            {
                query = query.Where(n => n.CourseName.ToLower().Contains(searchText)).ToList();
            }

            else if (searchBy == "5")
            {
                query = query.Where(n => n.TotalCredit.ToLower().Contains(searchText)).ToList();
            }

            else if (searchBy == "6")
            {
                query = query.Where(n => n.AnswerCorrect.ToLower().Contains(searchText)).ToList();
            }
            else if (searchBy == "7")
            {
                query = query.Where(n => n.OrgName.ToLower().Contains(searchText)).ToList();
            }
            List<ReportModel> source = query.Select(x => x).ToList<ReportModel>();
            return source;
        }


        /// <summary>
        /// search Method for field Equal to a search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns
        private List<ReportModel> R3EqualTo(List<ReportModel> query, string searchBy, string searchText)
        {
            if (searchBy == "1")
            {
                query = query.Where(n => n.LabourId.ToLower()==searchText).ToList();
            }
            else if (searchBy == "2")
            {
                query = query.Where(n => n.LabourName.ToLower()==searchText).ToList();
            }
            else if (searchBy == "3")
            {
                query = query.Where(n => n.Email.ToLower()==searchText).ToList();
            }  
            else if (searchBy == "4")
            {
                query = query.Where(n => n.CourseName.ToLower()==searchText).ToList();
            }
            else if (searchBy == "5")
            {
                query = query.Where(n => n.TotalCredit.ToLower()==searchText).ToList();
            }
            else if (searchBy == "6")
            {
                query = query.Where(n => n.AnswerCorrect.ToLower()==searchText).ToList();
            }
            else if (searchBy == "7")
            {
                query = query.Where(n => n.OrgName.ToLower()==searchText).ToList();
            }
            List<ReportModel> source = query.Select(x => x).ToList<ReportModel>();
            return source;
        }


        /// <summary>
        /// Search Method for field Starts with Search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        private List<ReportModel> R3Startswith(List<ReportModel> query, string searchBy, string searchText)
        {

            if (searchBy == "1")
            {
                query = query.Where(n => n.LabourId.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "2")
            {
                query = query.Where(n => n.LabourName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "3")
            {
                query = query.Where(n => n.Email.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "4")
            {
                query = query.Where(n => n.CourseName.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "5")
            {
                query = query.Where(n => n.TotalCredit.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "6")
            {
                query = query.Where(n => n.AnswerCorrect.ToLower().StartsWith(searchText)).ToList();
            }
            else if (searchBy == "7")
            {
                query = query.Where(n => n.OrgName.ToLower().StartsWith(searchText)).ToList();
            }
            List<ReportModel> source = query.Select(x => x).ToList<ReportModel>();
            return source;



        }

        #endregion

        /// <summary>
        /// Export a report Excel Sheet
        /// </summary>
        /// <param name="OrgName"></param>
        /// <param name="Report"></param>
        /// <param name="search"></param>
        /// <returns></returns>
        [HttpGet]
        public void ReportExportExcelAndPdf(string OrgName, string Report, string search,string type)
        {
            List<ReportModel> source = new List<ReportModel>();
            string ViewName=string.Empty;        
            int UserId = Convert.ToInt32(Session["USERID"].ToString());
            int OrgId = 0;
             if (UserId==1)
            {
                OrgId = objCommon.GetOrgIdFromName(OrgName);
           
            }
            else
            {
                OrgId = objCommon.GetOrgIdFromAdminId(UserId);
            }
            if (OrgId == 0)
            {

            }
            else
            {             
               try
               {
                DataSet dt = objAccessDb.ExecuteDataSet("SMT_SP_CourseReports", UserId, OrgId, null, Report);
                string ReportName = FindReportName(Report) ;        
                LocalReport lr = new LocalReport();
                string path = Path.Combine(Server.MapPath("~/Reports"), ReportName+".rdlc");
                if (System.IO.File.Exists(path))
                {
                    lr.ReportPath = path;
                }
                else
                {
                   // return View("Index");
                }           
                source = CommonReportSearch(Report, dt, search);             
                ReportDataSource rd = new ReportDataSource("CourseStartedReport", source);
                lr.DataSources.Add(rd);
                string mimeType;
                string encoding;
                string fileNameExtension;
                string pagewidth = "9in";
                string pageheight="11.69in";
                   if(Report=="4")
                   {
                       pagewidth = "11.69in";
                       pageheight = "8.27in";
                   }
                string deviceInfo =
                "<DeviceInfo>" + "  <OutputFormat>" + type + "</OutputFormat>" + "  <PageWidth>" + pagewidth + "</PageWidth>" + "  <PageHeight>" + pageheight + "</PageHeight>" +
                "  <MarginTop>0.5in</MarginTop>" + "  <MarginLeft>1in</MarginLeft>" + "  <MarginRight>1in</MarginRight>" +"  <MarginBottom>0.5in</MarginBottom>" +
                "</DeviceInfo>";                             
                Warning[] warnings;
                string[] streams;
                byte[] renderedBytes;
                renderedBytes = lr.Render(type,deviceInfo,out mimeType,out encoding,out fileNameExtension,out streams,out warnings);
                Response.Buffer = true;
                Response.Clear();
                Response.ContentType = mimeType;
                string FileName = OrgName + ReportName + DateTime.Now.ToString();
                if (type == "Excel")
                {
                   // Response.AddHeader("content-disposition", "attachment; filename=" + FileName + "." + "xls");
                     FileName = OrgName + ReportName + DateTime.Now.ToString() + "." + "xls";
                }
                else
                {
                    FileName = OrgName + ReportName + DateTime.Now.ToString() + "." + "pdf";
                }
                var cd = new System.Net.Mime.ContentDisposition
                {
                    FileName = FileName,
                    Inline = false,
                };
              //  Response.Clear();
                Response.AppendHeader("Content-Disposition", cd.ToString());
                Response.BinaryWrite(renderedBytes);
                Response.Flush();               
            }
            catch (Exception )
            {
                
            }

            }           
        }     
    }

    #endregion

    #region Apk File Download
      /// <summary>
    /// Controller for a Reports Methods
    /// </summary>
    [AuthorizeUser]
    [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
    public class ApkDownloaderController : BaseController
    {
        private static string connString = ConfigurationManager.ConnectionStrings["SmartLabourEntities"].ToString();
        private Database objAccessDb = new Microsoft.Practices.EnterpriseLibrary.Data.Sql.SqlDatabase(connString);
        private SmartLabourEntities dbEntities = new SmartLabourEntities();

        [HttpGet]
        public ActionResult ApkDownload()
        {            
            return View(new View());
        }




    }
    #endregion

    #region Notification Message Master

    /// <summary>
    /// Notification Message Master
    /// </summary>
    [AuthorizeUser]
    public class ServiceTypeMasterController : BaseController
    {
        private SmartLabourEntities dbEntities = new SmartLabourEntities();
        OrganizationSubAdminController objOrg = new OrganizationSubAdminController();
        CommonClass objCommon = new CommonClass();

        /// <summary>
        /// List The Push Message Master
        /// </summary>
        /// <param name="id"></param>
        /// <param name="?"></param>
        /// <returns></returns>
        public ActionResult ServiceTypeList(int? id, string search)
        {
            //int UserId = Convert.ToInt32(Session["USERID"].ToString());
           // int OrgId = (from m in this.dbEntities.AdminLogin where m.USERID == UserId select m.OrgId).FirstOrDefault();
            if (!id.HasValue)
            {
                id = 1;
            }
            if ((base.TempData["messagealert"] != null) && (base.TempData["messagealert"].ToString() != ""))
            {
                ((dynamic)base.ViewBag).messagealert = base.TempData["messagealert"];
            }

            List<TBL_SERVICETYPE_SMT> source = new List<TBL_SERVICETYPE_SMT>();
            source = (from n in this.dbEntities.ServiceType
                      select n).ToList();
            if ((search != null) && (search != string.Empty))
            { 
                string searchText = search.Split(new char[] { ',' })[0].Trim().ToLower();
                string searchBy = search.Split(new char[] { ',' })[2].Trim().ToLower();

                switch (search.Split(new char[] { ',' })[1].Trim())
                {
                    case "1":
                        source = Startswith(source, searchBy, searchText);
                        break;

                    case "2":
                        source = EqualTo(source, searchBy, searchText);
                        break;

                    case "3":
                        source = Contains(source, searchBy, searchText);
                        break;
                    case "50":
                        source = Startswith(source, "active", searchText);
                        break;
                    case "51":
                        source = Startswith(source, "inactive", searchText);
                        break;
                }
            }           

            int num = source.Count<TBL_SERVICETYPE_SMT>();
            int num2 = 0;
            if ((num % 10) == 0)
            {
                num2 = num / 10;
            }
            else
            {
                num2 = (num / 10) + 1;
            }
            if ((search != null) && (search != string.Empty))
            {
                base.ViewData["SearchText"] = search;
                if (num2 < id)
                {
                    id = 1;
                }
            }
            else
            {
                base.ViewData["SearchText"] = "";
            }
            ((dynamic)base.ViewBag).totalnumber = num2;
            ((dynamic)base.ViewBag).TotalRecordcount = num;
            ((dynamic)base.ViewBag).CurrentPage = id;
            int count = (Convert.ToInt32(id) * 10) - 10;
            base.TempData["currentgetidss"] = "Service";
            List<TBL_SERVICETYPE_SMT> MsgList = new List<TBL_SERVICETYPE_SMT>();
            MsgList = (from n in source
                       orderby n.SERVICETYPEID descending
                       select n).Skip<TBL_SERVICETYPE_SMT>(count).Take<TBL_SERVICETYPE_SMT>(10).ToList<TBL_SERVICETYPE_SMT>();

            return base.View(MsgList);
        }

        #region Search Options

        /// <summary>
        /// Search Options for field starts With
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_SERVICETYPE_SMT> Startswith(List<TBL_SERVICETYPE_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.SERVICETYPENAME.ToLower().StartsWith(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower().StartsWith(searchText)).ToList();
            }       

            else if (SearchBy == "active")
            {
                query = query.Where(n => n.STATUS == true).ToList();
            }
            else if (SearchBy == "inactive")
            {
                query = query.Where(n => n.STATUS == false).ToList();
            }

            List<TBL_SERVICETYPE_SMT> source = query.Select(x => x).ToList<TBL_SERVICETYPE_SMT>();
            return source;
        }

        /// <summary>
        /// Search method for Equal to option
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_SERVICETYPE_SMT> EqualTo(List<TBL_SERVICETYPE_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.SERVICETYPENAME.ToLower()==(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower()==(searchText)).ToList();
            }       
            List<TBL_SERVICETYPE_SMT> source = query.Select(x => x).ToList<TBL_SERVICETYPE_SMT>();
            return source;
        }

        /// <summary>
        /// Search option for field Contains search value
        /// </summary>
        /// <param name="query"></param>
        /// <param name="SearchBy"></param>
        /// <param name="searchText"></param>
        /// <returns></returns>
        public List<TBL_SERVICETYPE_SMT> Contains(List<TBL_SERVICETYPE_SMT> query, string SearchBy, string searchText)
        {
            if (SearchBy == "1")
            {
                query = query.Where(n => n.SERVICETYPENAME.ToLower().Contains(searchText)).ToList();
            }
            else if (SearchBy == "2")
            {
                query = query.Where(n => Convert.ToString(n.CREATEDDATE).ToLower().Contains(searchText)).ToList();
            }       
            List<TBL_SERVICETYPE_SMT> source = query.Select(x => x).ToList<TBL_SERVICETYPE_SMT>();
            return source;
        }

        #endregion

        /// <summary>
        /// Get Method for Add New Message
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult ServiceTypeAdd()
        {
            TBL_SERVICETYPE_SMT Service = new TBL_SERVICETYPE_SMT();
            base.TempData["currentgetidss"] = "Service";
            return base.View(Service);
        }

        /// <summary>
        /// Post method to Add the New Message
        /// </summary>
        /// <param name="Org"></param>
        /// <returns></returns>
        [HttpPost, OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult ServiceTypeAdd(TBL_SERVICETYPE_SMT Service)
        {
            try
            {
                base.TempData["currentgetidss"] = "Service";
                ((dynamic)base.ViewBag).messagealert = "";
                int UserId = Convert.ToInt32(Session["USERID"].ToString());
                Service.CREATEDDATE = DateTime.Now;
                Service.CREATEDBY = Convert.ToString(UserId);   
                int msgId = (from n in this.dbEntities.ServiceType where n.SERVICETYPENAME.ToLower().Trim() == Service.SERVICETYPENAME.ToLower().Trim()select n.SERVICETYPEID).SingleOrDefault();
                if (msgId > 1)
                {
                    ((dynamic)base.ViewBag).messagealert = "Service Name Already Exists";
                    return base.View(Service);
                }
                this.dbEntities.ServiceType.Add(Service);
                this.dbEntities.SaveChanges();
                base.TempData["messagealert"] = "Record Added Successfully";
                return base.RedirectToAction("ServiceTypeList");
            }
            catch (DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
            }
            return View(Service);
        }

        /// <summary>
        /// Update The Status of Message
        /// </summary>
        /// <param name="status"></param>
        /// <param name="cimageid"></param>
        /// <returns></returns>
        public string UpdateStatus(string status, int cimageid)
        {
            TBL_SERVICETYPE_SMT objService = this.dbEntities.ServiceType.SingleOrDefault<TBL_SERVICETYPE_SMT>(n => n.SERVICETYPEID == cimageid);
            if (status == "true")
            {
                objService.STATUS = false;
            }
            else
            {
                objService.STATUS = true;
            }          
            this.dbEntities.SaveChanges();
            return "sucess";
        }

        /// <summary>
        /// Get Method for Edit Notification Measssages
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult ServiceTypeEdit(int ServiceTypeId = 0)
        {
            TBL_SERVICETYPE_SMT model = this.dbEntities.ServiceType.SingleOrDefault<TBL_SERVICETYPE_SMT>(n => n.SERVICETYPEID == ServiceTypeId);
            base.TempData["currentgetidss"] = "Service";           
            return base.View(model);
        }

        /// <summary>
        /// Update the Edited Notification Measssages
        /// </summary>
        /// <param name="Orgid"></param>
        /// <param name="objOrgMaster"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ServiceTypeEdit(TBL_SERVICETYPE_SMT objService)
        {
            try
            {
                int UserId = Convert.ToInt32(Session["USERID"].ToString());
                base.TempData["currentgetidss"] = "Service";               
                int ServiceTypeId = (from n in this.dbEntities.ServiceType where n.SERVICETYPEID != objService.SERVICETYPEID && n.SERVICETYPENAME.ToLower().Trim() == objService.SERVICETYPENAME.ToLower().Trim() select n.SERVICETYPEID).SingleOrDefault();
                if (ServiceTypeId > 0)
                {
                    if (ServiceTypeId != objService.SERVICETYPEID)
                    {
                        ((dynamic)base.ViewBag).messagealert = "Service type name already exists";
                        return base.View(objService);
                    }
                }

                TBL_SERVICETYPE_SMT Service = this.dbEntities.ServiceType.SingleOrDefault<TBL_SERVICETYPE_SMT>(n => n.SERVICETYPEID == objService.SERVICETYPEID);
                Service.SERVICETYPENAME = objService.SERVICETYPENAME;
                Service.MODIFIEDBY = Convert.ToString(UserId);
                Service.MODIFIEDDATE = new DateTime?(DateTime.Now);  
                this.dbEntities.SaveChanges();
                base.TempData["messagealert"] = "Service type updated successfully";
                return base.RedirectToAction("ServiceTypeList");
                // }
            }
            catch (DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
            }

            return base.View(objService);
        }

        /// <summary>
        /// To View the Notification Measssages 
        /// </summary>
        /// <param name="Orgid"></param>
        /// <returns></returns>
        [HttpGet]
        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "None")]
        public ActionResult ServiceTypeView(int ServiceTypeId)
        {
            base.TempData["currentgetidss"] = "Service";
            TBL_SERVICETYPE_SMT model = this.dbEntities.ServiceType.SingleOrDefault<TBL_SERVICETYPE_SMT>(n => n.SERVICETYPEID == ServiceTypeId);                    
            return base.View(model);
        }

        /// <summary>
        /// Remove the Notification Measssages
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        /// 
        [HttpGet]
        public JsonResult ServiceTypeDelete(string id)
        {
            try
            {
                int ServiceTypeId = 0;              
                string[] Orgid = id.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string Id in Orgid)
                {
                    ServiceTypeId = Convert.ToInt32(Id);
                    TBL_SERVICETYPE_SMT entity = this.dbEntities.ServiceType.SingleOrDefault<TBL_SERVICETYPE_SMT>(n => n.SERVICETYPEID == ServiceTypeId);
                    this.dbEntities.ServiceType.Remove(entity);
                    this.dbEntities.SaveChanges();
                    base.TempData["messagealert"] = "Record Deleted Successfully";
                }
                if (ServiceTypeId == 0)
                {
                    return base.Json("0", JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return base.Json("1", JsonRequestBehavior.AllowGet);
                }
            }
            catch
            {
                return base.Json("0", JsonRequestBehavior.AllowGet);
            }
        }
    }


    #endregion  

    #region WebServise Checking Class

    public class WebServiceCheckController : BaseController
    {
        private SmartLabourEntities dbWebService = new SmartLabourEntities();


        [HttpGet]
        public ActionResult Index(int? id, string search)
        {
           // var url = Url.Content("~/Uplodify/Testimonialvideo/Hamza_Smart_Labour_Tamil8820158.mp4");
           // CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;
           // if (currentCulture.Name=="en-IN")
           // {
           // }
           // CultureInfo[] cultures = CultureInfo.GetCultures(CultureTypes.UserCustomCulture |
           // CultureTypes.SpecificCultures);
           //// int ctr = 0;
           // foreach (var culture in cultures)
           // {
           //     if ((culture.CultureTypes & CultureTypes.UserCustomCulture) == CultureTypes.UserCustomCulture)
           //     {
           //         string Name = culture.Name;
           //     }
           //}   

            //        var contactUsUrlBuilder =
            //new UriBuilder(Request.Url.AbsoluteUri)
            //{
            //    Path = Url.Action("AssignSessionHealth", "Session")
            //};

            //        var contactUsUri = contactUsUrlBuilder.Uri;
            //        var contactUsUriString = contactUsUrlBuilder.ToString();

            // int UserId = Convert.ToInt32(Session["USERID"].ToString());
            SmartLabourServices objWs = new SmartLabourServices();
            string Device = "QVBBOTFiSFNQeWpINnF5NWNTSHBBZ0dfUVlEdjhEakI1QVQ0eWRqOGRSRG1QVHhQeU5tbVFFWUM1dUh5TW9nTFZCSWVVMTBwQllWekwtVmdIbi1waFp3RjEwNm9fcG1uVEhhUjBrSHp2MzMyV05qWTNYSmR6T1R3RXNFSDM0a043VVdnV19BSk5mb2Y=";
           // objWs.GetServiceTypeList();
           //  objWs.AttachFiles();
           //  objWs.Login("thiyagarajan.e@angleritech.com", "123123123", Device, "Anddroid");
           //  PostTestimonial/sdasdasd/erwerwerwer/qwqweqw/werwe/123456789056322/Y29udGVudDovL21lZGlhL2V4dGVybmFsL2ltYWdlcy9tZWRpYS8yMjM5/Y29udGVudDovL21lZGlhL2V4dGVybmFsL3ZpZGVvL21lZGlhLzIzMTQ=


           //  objWs.GetAllQuestionList("9");
           //  objWs.GetCountryList();

           //  objWs.GetPushNotification("123123123098123");
           // List<QuestionList> list2 = new List<QuestionList>();

           // var list2=objWs.GetAllQuestionList("7", "123123123098123");
           //  var list3 = objWs.QuestionAndAnswer("7");
           // objWs.GetCountryList();
            

            //  objWs.GetTelecomOperators("1");
              objWs.RegisterLabour("458578937", "Test Webservice", "12456", "checkMAil@gmial.com", "343534534534", "9-9-1888", "1", "asddsa", "null", "null", "null", "false", "10", "47", "Trichy", "Tamil Nadu", "India", "12", "1","");
            //  objWs.UpdateLabour("4471653786343436376", "Thiyagarajan.E", "thiyagarajan.e@angleritech.com", "7564656456", "1958-02-02", "1", "Address1", "Address2", "Address3", "636102", "true","20", "0", "47", "Salem", "Himachal", "Malesiya", "12", "1", "65");
            //  objWs.ForgotPassword("selvakumar.k@angleritech.com");
            //http://www.smartlabour.ae:88/SmartLabourServices.svc/RegisterLabour/123456456456455/asda/123456/undefined/34534534534/9-9-1888/female/asddsa/
            //null/null/null/false/20
          //  List<Category> obj = objWs.GetCategoryList("47");

            //List<SubCategory> obj2 = objWs.GetSubCategoryList("12");
            ImageConverterClass ObjImage = new ImageConverterClass();
          //  List<TestimonalVideoList> obj3 = objWs.GetTestimonalVideoList();

         //   objWs.GetUserDetail("4471653786343436376");
            //// Temp Code  - Web Service Checking Code
          //  string path1 = System.Web.HttpContext.Current.Server.MapPath("~/Upload_Files/Test/sampletest.mp4");
          //  byte[] Audio = System.IO.File.ReadAllBytes(path1);
           // string path = System.Web.HttpContext.Current.Server.MapPath("~/Upload_Files/Test/jpg.jpg");
          //  byte[] Image = System.IO.File.ReadAllBytes(path);
           // string strImage = Convert.ToBase64String(Image);
           // string strVideo = Convert.ToBase64String(Audio);


           // objWs.PostTestimonial("Title Test", "Selva", "Sponsor", "<Smart>", "Test", strImage, strVideo);
            // strImage = "OTksMTExLDExMCwxMTYsMTAxLDExMCwxMTYsNTgsNDcsNDcsMTA5LDEwMSwxMDAsMTA1LDk3LDQ3LDEwMSwxMjAsMTE2LDEwMSwxMTQsMTEwLDk3LDEwOCw0NywxMDUsMTA5LDk3LDEwMywxMDEsMTE1LDQ3LDEwOSwxMDEsMTAwLDEwNSw5Nyw0Nyw1MCw1MCw1MSw1Nw==";
            // objWs.SubmitHealthAndSafety("4471653786343436376", strImage, "undefined", "Comments test");

           //  objWs.CoursePages("14");

            // objWs.GetAllCourses("1", "54645643456124367");

           // objWs.PostTestimonial("Title", "Sriraj", "Labour", "<Smart>", "", strImage, strVideo);


            //   objWs.SubmitHealthAndSafety("4589734857348978937", strImage, strAudio, "Comments test");

            //// End here
            //  string n = objWs.ForgotPassword("thiyagarajan.e@angleritech.com");
             //return RedirectToAction("Session", "AssignSessionHealth", new { Id = "Fvv6RqK5FHG%2fzoN86iZZfw%3d%3d", Hsid = "Lp07eHerRZ3fVF%2bKQUjFeQ%3d%3d" });
            return base.View();
        }

        [HttpGet]
        public ActionResult Index1()
        {
                      return base.View();
        }

    }

    #endregion

}